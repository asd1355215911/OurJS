var apiData = {"HTMLFormElement#getFieldValue":{"parameters":[{"description":"域的名称。","type":"string","name":"name","isOptional":false}],"description":"获取本表单内某个域的当前值。\n当该域只包含一个非 select-multiple 类型的控件时，如果具备有效值则返回该值，否则返回空字符串（将无效值与空字符串等同处理是为了降低后续处理的复杂度）。\n其他情况（该域只包含一个 select-multiple 类型的控件或者多个任意类型的控件时）返回数组，值为空字符串的项不会被加入数组。","returns":[{"type":"string|Array","description":"域的当前值。"}],"type":"string|Array","see":["http://www.w3.org/TR/REC-html40/interact/forms.html#successful-controls"],"isFunction":true,"category":"instance","name":"HTMLFormElement#getFieldValue"},"Element#cancelAnimation":{"parameters":[{"description":"要取消的动画类型，如果要取消多种类型的动画，使用逗号将它们分开即可。\n如果省略该参数，则取消本元素所有正在播放的动画。","type":"string","name":"type","isOptional":true}],"description":"取消本元素正在播放的动画。\n对于 morph 类型的动画，会在当前帧停止。\n对于 highlight 类型的动画，会恢复到动画播放前的状态。\n对于 fade 类型的动画，会跳过补间帧直接完成显示/隐藏。\n对于 smoothScroll 类型的动画，会立即停止滚动。","returns":[{"type":"Element","description":"本元素。"}],"type":"Element","isFunction":true,"category":"instance","name":"Element#cancelAnimation"},"DOMEvent#isPropagationStopped":{"description":"查询事件的传播是否已被阻止。","returns":[{"type":"boolean","description":"查询结果。"}],"type":"boolean","isFunction":true,"category":"instance","name":"DOMEvent#isPropagationStopped"},"JSEventTarget":{"description":"所有的 JSEventTarget 对象都具备处理事件的能力，通过调用 new JSEventTarget() 获得的新对象，或经过 JSEventTarget.create(object) 处理后的 object 对象都是 JSEventTarget 对象。\nJSEventTarget 对象在处理事件时，是工作在 JS 事件模型中的。","isFunction":true,"category":"constructor","name":"JSEventTarget"},"JSEventTarget#off":{"parameters":[{"description":"监听器名称。\n本对象上添加的所有名称与 name 匹配的监听器都将被删除。\n使用逗号分割多个监听器名称，即可同时删除该对象上的多个监听器。","type":"string","name":"name","isOptional":false}],"description":"删除本对象上已添加的事件监听器。","returns":[{"type":"Object","description":"本对象。"}],"type":"Object","isFunction":true,"category":"instance","name":"JSEventTarget#off"},"navigator.isIE10":{"description":"浏览器是否为 IE10。","type":"boolean","isFunction":false,"category":"static","name":"navigator.isIE10"},"Number.isNaN":{"parameters":[{"description":"提供的值。","type":"*","name":"value","isOptional":false}],"description":"检查提供的值是否为非数字。","returns":[{"type":"boolean","description":"检查结果。"}],"type":"boolean","see":["http://wiki.ecmascript.org/doku.php?id=harmony:number.isnan"],"examples":["isNaN(undefined);\n// true\nNumber.isNaN(undefined);\n// false"],"isFunction":true,"category":"static","name":"Number.isNaN"},"RegExp.escape":{"parameters":[{"description":"要转义的字符串。","type":"string","name":"string","isOptional":false}],"description":"转义字符串中包含的正则表达式元字符。\n转以后的字符串可以安全的作为正则表达式的一部分使用。","returns":[{"type":"string","description":"转义后的字符串。"}],"type":"string","see":["http://prototypejs.org/"],"isFunction":true,"category":"static","name":"RegExp.escape"},"Object":{"isFunction":true,"category":"constructor","name":"Object"},"Global":{"description":"全局对象。","isFunction":false,"category":"static","name":"Global"},"DOMEvent#stopPropagation":{"description":"阻止事件的传播。","isFunction":true,"category":"instance","name":"DOMEvent#stopPropagation"},"DOMEvent#clientX":{"description":"事件发生时鼠标在视口中的 X 坐标，仅在鼠标事件对象上有效。","type":"number","isFunction":false,"category":"instance","name":"DOMEvent#clientX"},"DOMEvent#clientY":{"description":"事件发生时鼠标在视口中的 Y 坐标，仅在鼠标事件对象上有效。","type":"number","isFunction":false,"category":"instance","name":"DOMEvent#clientY"},"DOMEvent#ctrlKey":{"description":"事件发生时，ctrl 键是否被按下。","type":"boolean","isFunction":false,"category":"instance","name":"DOMEvent#ctrlKey"},"Element#insertAdjacentText":{"parameters":[{"description":"要插入的位置，可选值请参考下表。\n<table>\n<tr><th>可选值</th><th>含义</th></tr>\n<tr><td><dfn>beforeBegin</dfn></td><td>将文本插入到本元素之前。</td></tr>\n<tr><td><dfn>afterBegin</dfn></td><td>将文本插入到本元素的所有内容之前。</td></tr>\n<tr><td><dfn>beforeEnd</dfn></td><td>将文本插入到本元素的所有内容之后。</td></tr>\n<tr><td><dfn>afterEnd</dfn></td><td>将文本插入到本元素之后。</td></tr>\n</table>","type":"string","name":"position","isOptional":false},{"description":"要插入的文本。","type":"Element","name":"text","isOptional":false}],"description":"在本元素的指定位置插入文本。","isFunction":true,"category":"instance","name":"Element#insertAdjacentText"},"Animation#pause":{"description":"暂停动画。\n仅在动画处于“播放”或“倒放”状态时，调用本方法才有效。","returns":[{"type":"boolean","description":"本方法是否已被成功调用。"}],"type":"boolean","isFunction":true,"category":"instance","name":"Animation#pause"},"HTMLSelectElement#deleteOption":{"parameters":[{"description":"要删除的选项的索引。索引从 0 开始，如果指定的索引大于当前选项的数目或为 -1，则不会删除任何选项。","type":"number","name":"index","isOptional":false}],"description":"删除本下拉选单中的一个指定选项。","returns":[{"type":"Element","description":"本元素。"}],"type":"Element","isFunction":true,"category":"instance","name":"HTMLSelectElement#deleteOption"},"localStorage.removeItem":{"parameters":[{"description":"数据名。","type":"string","name":"key","isOptional":false}],"description":"从 localStorage 中删除一条数据。","isFunction":true,"category":"static","name":"localStorage.removeItem"},"String#startsWith":{"parameters":[{"description":"指定的子串。","type":"string","name":"substring","isOptional":false}],"description":"检查字符串是否以指定的子串开始。","returns":[{"type":"boolean","description":"检查结果。"}],"type":"boolean","see":["http://wiki.ecmascript.org/doku.php?id=harmony:string_extras"],"examples":["'abcdefg'.startsWith('a');\n// true"],"isFunction":true,"category":"instance","name":"String#startsWith"},"Array#forEach":{"parameters":[{"description":"对数组中的每个元素都调用一次的回调函数。\n回调函数有三个参数：当前元素，当前元素的索引和调用该方法的数组对象。","type":"Function","name":"callback","isOptional":false},{"description":"callback 被调用时 this 的值。","type":"Object","name":"thisArg","isOptional":true}],"description":"遍历数组，对数组中的每一个元素都调用一次指定的函数。","see":["http://es5.github.com/#x15.4.4.18","https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/array/forEach"],"examples":["var s = '';\n[1, 2, 3].forEach(function(item) {\n  s += item;\n});\ns;\n// 123"],"isFunction":true,"category":"instance","name":"Array#forEach"},"Number.isFinite":{"parameters":[{"description":"提供的值。","type":"*","name":"value","isOptional":false}],"description":"检查提供的值是否为有限的数字。","returns":[{"type":"boolean","description":"检查结果。"}],"type":"boolean","see":["http://wiki.ecmascript.org/doku.php?id=harmony:number.isfinite"],"examples":["isFinite(null);\n// true\nNumber.isFinite(null);\n// false"],"isFunction":true,"category":"static","name":"Number.isFinite"},"DOMEvent#pageX":{"description":"事件发生时鼠标在页面中的 X 坐标，仅在鼠标事件对象上有效。","type":"number","isFunction":false,"category":"instance","name":"DOMEvent#pageX"},"DOMEvent#pageY":{"description":"事件发生时鼠标在页面中的 Y 坐标，仅在鼠标事件对象上有效。","type":"number","isFunction":false,"category":"instance","name":"DOMEvent#pageY"},"DOMEvent#metaKey":{"description":"事件发生时，meta 键是否被按下。","type":"boolean","isFunction":false,"category":"instance","name":"DOMEvent#metaKey"},"cookie.setItem":{"parameters":[{"description":"数据名。","type":"string","name":"key","isOptional":false},{"description":"数据值。","type":"string","name":"value","isOptional":false},{"description":"可选参数。","type":"Object","name":"options","isOptional":true},{"description":"限定生效的路径，默认为当前路径。","type":"string","name":"options.path","isOptional":true},{"description":"限定生效的域名，默认为当前域名。","type":"string","name":"options.domain","isOptional":true},{"description":"是否仅通过 SSL 连接 (HTTPS) 传输本条数据。","type":"boolean","name":"options.secure","isOptional":true},{"description":"过期时间，默认为会话结束。\n如果使用字符串类型，其表示时间的格式应为 'YYYY-MM-DD hh:mm:ss'。","type":"string|Date","name":"options.expires","isOptional":true}],"description":"在 cookie 中保存一条数据。","isFunction":true,"category":"static","name":"cookie.setItem"},"Array#getLast":{"description":"获取本数组的最后一个元素。","returns":[{"type":"*","description":"本数组的最后一个元素。"}],"type":"*","examples":["[0, 1, 2, 3, 4].getLast();\n// 4"],"isFunction":true,"category":"instance","name":"Array#getLast"},"Request#send":{"parameters":[{"description":"要发送的数据。\n数据格式为 {key1: value1, key2: [value21, value22, ...], ...}，其中所有 value 都可以为任意基本类型的数据（在发送时它们都将被强制转换为字符串类型），另外 key 和 value 均不必做百分比编码。\n本方法的参数不允许使用字符串类型的数据，因为无法判断指定的字符串值是否需要做百分比编码。","type":"Object","name":"requestData","isOptional":true}],"description":"发送请求。\n如果上一次发送的请求尚未完成，则调用本方法无效。","returns":[{"type":"boolean","description":"本方法是否已被成功调用。"}],"type":"boolean","isFunction":true,"category":"instance","name":"Request#send"},"JSEvent#target":{"description":"触发事件的对象。","type":"Object","isFunction":false,"category":"instance","name":"JSEvent#target"},"Element#morph":{"parameters":[{"description":"目标样式，元素将向指定的目标样式渐变。目标样式包含一条或多条要设置的样式声明，与 setStyles 的参数的差异如下：\n1. 不能使用复合属性。\n2. lineHeight 仅支持 'px' 单位的长度设置，而不支持数字。\n3. 支持相对长度，如 '+=10' 表示在现有长度的基础上增加 10 像素，'-=10' 表示在现有长度的基础上减少 10 像素。","type":"Object","name":"styles","isOptional":false},{"description":"动画选项。","type":"Object","name":"options","isOptional":true},{"description":"播放时间，单位为毫秒，默认为 400。","type":"number","name":"options.duration","isOptional":true},{"description":"控速函数名称或表达式，细节请参考 Animation.prototype.addClip 的同名参数，默认为 'ease'。","type":"string","name":"options.timingFunction","isOptional":true},{"description":"播放开始时的回调。\n该函数被调用时 this 的值为本元素。","type":"Function","name":"options.onStart","isOptional":true},{"description":"播放每一帧之后的回调。\n该函数被调用时 this 的值为本元素。","type":"Function","name":"options.onStep","isOptional":true},{"description":"播放完成时的回调。\n该函数被调用时 this 的值为本元素。","type":"Function","name":"options.onFinish","isOptional":true}],"description":"让本元素播放一个渐变动画。\n如果本元素的动画播放列表中已经存在一个 morph 动画，则停止旧的，播放新的。","returns":[{"type":"Element","description":"本元素。"}],"type":"Element","isFunction":true,"category":"instance","name":"Element#morph"},"Global.execScript":{"parameters":[{"description":"要执行的代码。","type":"string","name":"code","isOptional":false}],"description":"将字符串作为脚本执行，执行时的作用域为全局作用域。","see":["http://w3help.org/zh-cn/causes/BX9056"],"examples":["var a;\nexecScript('a = 128 * 2 + 256;');\na;\n// 512"],"isFunction":true,"category":"static","name":"Global.execScript"},"Element#getFirstChild":{"description":"获取本元素的第一个子元素。","returns":[{"type":"?Element","description":"本元素的第一个子元素。"}],"type":"?Element","isFunction":true,"category":"instance","name":"Element#getFirstChild"},"navigator.isIE6":{"description":"浏览器是否为 IE6。","type":"boolean","isFunction":false,"category":"static","name":"navigator.isIE6"},"navigator.isIE7":{"description":"浏览器是否为 IE7。","type":"boolean","isFunction":false,"category":"static","name":"navigator.isIE7"},"navigator.isIE8":{"description":"浏览器是否为 IE8。","type":"boolean","isFunction":false,"category":"static","name":"navigator.isIE8"},"Element#insertTo":{"parameters":[{"description":"目标元素。","type":"Element","name":"target","isOptional":false},{"description":"要插入的位置，可选值请参考下表。\n<table>\n<tr><th>可选值</th><th>含义</th></tr>\n<tr><td><dfn>beforeBegin</dfn></td><td>将本元素插入到目标元素之前。</td></tr>\n<tr><td><dfn>afterBegin</dfn></td><td>将本元素插入到目标元素的所有内容之前。</td></tr>\n<tr><td><dfn>beforeEnd</dfn></td><td>将本元素插入到目标元素的所有内容之后。</td></tr>\n<tr><td><dfn>afterEnd</dfn></td><td>将本元素插入到目标元素之后。</td></tr>\n</table>\n如果该参数被省略，则使用 <dfn>beforeEnd</dfn> 作为默认值。","type":"string","name":"position","isOptional":true}],"description":"将本元素插入到目标元素的指定位置。","returns":[{"type":"Element","description":"本元素。"}],"type":"Element","isFunction":true,"category":"instance","name":"Element#insertTo"},"Animation#reverse":{"description":"倒放动画。\n如果当前动画正在倒放中，或时间点已到达起点，则调用本方法无效。","returns":[{"type":"boolean","description":"本方法是否已被成功调用。"}],"type":"boolean","isFunction":true,"category":"instance","name":"Animation#reverse"},"navigator.isIE9":{"description":"浏览器是否为 IE9。","type":"boolean","isFunction":false,"category":"static","name":"navigator.isIE9"},"Animation.createStyleRenderer":{"parameters":[{"description":"要实施渐变效果的元素。","type":"Element","name":"element","isOptional":false},{"description":"要实施渐变效果的样式。支持相对长度值和颜色值，其中相对长度值目前仅支持像素单位，颜色值支持 140 个颜色名称、#RRGGBB 格式、#RGB 格式或 rgb(R, G, B) 格式。","type":"Object","name":"styles","isOptional":false}],"description":"创建样式渐变效果渲染器。","returns":[{"type":"Function","description":"生成的渲染器。"}],"type":"Function","isFunction":true,"category":"static","name":"Animation.createStyleRenderer"},"RegExp":{"isFunction":true,"category":"constructor","name":"RegExp"},"document.$":{"parameters":[{"description":"不同类型的元素表示。","type":"string|Element","name":"e","isOptional":false}],"description":"根据指定的参数获取/创建一个元素，并对其进行扩展。\n* 当参数为一个元素（可以包含后代元素）的序列化之后的字符串时，会返回扩展后的、根据这个字符串反序列化的元素。\n注意：不要使用本方法创建 SCRIPT 元素，对于动态载入外部脚本文件的需求，应使用 document.loadScript 方法。\n* 当参数为一个 CSS 选择符时，会返回扩展后的、与指定的 CSS 选择符相匹配的<strong>第一个元素</strong>。\n如果没有找到任何元素，返回 null。\n* 当参数为一个元素时，会返回扩展后的该元素。\n* 当参数为其他值（包括 document 和 window）时，均返回 null。","returns":[{"type":"?Element","description":"扩展后的元素。"}],"type":"?Element","see":["http://jquery.com/","http://mootools.net/","http://w3help.org/zh-cn/causes/SD9003"],"isFunction":true,"category":"static","name":"document.$"},"DOMEvent#screenX":{"description":"事件发生时鼠标在屏幕上的 X 坐标，仅在鼠标事件对象上有效。","type":"number","isFunction":false,"category":"instance","name":"DOMEvent#screenX"},"DOMEvent#screenY":{"description":"事件发生时鼠标在屏幕上的 Y 坐标，仅在鼠标事件对象上有效。","type":"number","isFunction":false,"category":"instance","name":"DOMEvent#screenY"},"Date.parseExact":{"parameters":[{"description":"代表日期的字符串，该字符串应该能够通过 Date.prototype.format 生成。\n日期字符串中缺失的部分将使用默认值代替，各部分的默认值如下：\n<table>\n<tr><th>日期字段</th><th>默认值</th></tr>\n<tr><td>年</td><td>当前年份</td></tr>\n<tr><td>月</td><td>1</td></tr>\n<tr><td>日</td><td>1</td></tr>\n<tr><td>时</td><td>0</td></tr>\n<tr><td>分</td><td>0</td></tr>\n<tr><td>秒</td><td>0</td></tr>\n<tr><td>毫秒</td><td>0</td></tr>\n<tr><td>时区</td><td>当地时区</td></tr>\n</table>\n注意：未检查字符串内包含数据的有效性，若数据异常，将得不到预期的日期值。","type":"string","name":"string","isOptional":false},{"description":"由代表日期字段的标识符和其他字符组成的格式字符串，默认为 'YYYY-MM-DD'。格式请参考 Date.prototype.format 的同名参数。","type":"string","name":"format","isOptional":true},{"description":"字符串是否为世界标准时间。\n当 isUTC 与 string 中已存在的 TZD 标识冲突时，isUTC 将被忽略。","type":"boolean","name":"isUTC","isOptional":true}],"description":"将以指定格式表示日期的字符串转换为日期对象。","returns":[{"type":"Date","description":"转换后的日期对象。"}],"type":"Date","examples":["Date.parseExact('2012-06-25 12:00:00', 'YYYY-MM-DD hh:mm:ss')\n// 各浏览器中日期的字符串形式略有差异。\n// \"Mon Jun 25 2012 12:00:00 GMT+0800\"\nDate.parseExact('2012-12-21T23:14:35.000+08:00', 'YYYY-MM-DDThh:mm:ss.sTZD', true).format('世界标准时间YYYY年MM月DD日hh点mm分ss秒', true)\n// \"世界标准时间2012年12月21日15点14分35秒\"\nDate.parseExact('02-29 16:00', 'MM-DD hh:mm')\n// 年份缺失，使用默认值代替。\n// \"Wed Feb 29 2012 16:00:00 GMT+0800\""],"isFunction":true,"category":"static","name":"Date.parseExact"},"localStorage":{"description":"为不支持 localStorage 的浏览器提供类似的功能。\n在不支持 localStorage 的浏览器中，会使用路径 '/favicon.ico' 来创建启用 userData 的元素。应保证上述路径存在，以免出现预料外的异常。\nuserData 的尺寸限制为每文件 128KB，每域 1024KB；受限站点每文件 64KB，每域 640KB。","isFunction":false,"category":"static","name":"localStorage"},"Global.typeOf":{"parameters":[{"description":"要判断的值。","type":"*","name":"value","isOptional":false}],"description":"判断提供的值的数据类型，比 typeof 运算符返回的结果更明确（将对结果为 'object' 的情况进行更细致的区分）。\n特殊情况：\n一些特殊的对象，如 IE7 IE8 中的 XMLHttpRequest，是作为构造函数使用的，但使用本方法将得到 'object.Object' 的结果。考虑到需要判断这类对象的情况极为少见，因此未作处理。\nIE6 IE7 IE8 IE9 IE10 中 SELECT.options === SELECT 为 true，因此 SELECT.options 将得到 'object.Node'，而不是预期的 'object.Collection'。\nIE6 IE7 IE8 中在试图访问某些对象提供的属性/方法时，如 new ActiveXObject('Microsoft.XMLHTTP').abort，将抛出“对象不支持此属性或方法”的异常，因此也无法使用本方法对其进行判断。但可以对其使用 typeof 运算符并得到结果 'unknown'。","returns":[{"type":"string","description":"值的类型，可能为以下几种情况之一：\nundefined\nboolean\nnumber\nstring\nfunction\nnull\nobject.Boolean\nobject.Number\nobject.String\nobject.Array\nobject.Date\nobject.RegExp\nobject.Error\nobject.Math\nobject.JSON\nobject.Arguments\nobject.Global\nobject.Node\nobject.Collection\nobject.Object"}],"type":"string","see":["http://mootools.net/","http://jquery.com/"],"examples":["typeOf(document);\n// 'object.Node'"],"isFunction":true,"category":"static","name":"Global.typeOf"},"Array#shuffle":{"description":"随机排序本数组中的各元素。","returns":[{"type":"Array","description":"随机排序后的本数组。"}],"type":"Array","see":["http://bost.ocks.org/mike/shuffle/"],"examples":["[0, 1, 2, 3, 4].shuffle();\n// [4, 0, 2, 1, 3]"],"isFunction":true,"category":"instance","name":"Array#shuffle"},"Element#getClientRect":{"description":"获取本元素的 border-box 在视口中的坐标信息。","returns":[{"type":"Object","description":"包含位置（left、right、top、bottom）及尺寸（width、height）的对象，所有属性值均为 number 类型，单位为像素。"}],"type":"Object","isFunction":true,"category":"instance","name":"Element#getClientRect"},"Element#getStyles":{"parameters":[{"description":"指定要获取的特性名，可以为任意个。","type":"Array","name":"propertyNames","isOptional":false}],"description":"获取本元素的“计算后的样式”中一组特性的值。","returns":[{"type":"Object","description":"包含一组特性值的，格式为 {propertyName: propertyValue, ...} 的对象。"}],"type":"Object","isFunction":true,"category":"instance","name":"Element#getStyles"},"document.addStyleRules":{"parameters":[{"description":"包含样式规则的数组，其中每一项为一条规则。","type":"Array","name":"rules","isOptional":false}],"description":"添加样式规则。","isFunction":true,"category":"static","name":"document.addStyleRules"},"localStorage.setItem":{"parameters":[{"description":"数据名，不能为空字符串。","type":"string","name":"key","isOptional":false},{"description":"数据值。","type":"string","name":"value","isOptional":false}],"description":"在 localStorage 中保存一条数据。\n注意：与原生的 localStorage 不同，IE6 IE7 的实现不允许 `~!@#$%^&*() 等符号出现在 key 中，可以使用 . 和 _ 符号，但不能以 . 和数字开头。","isFunction":true,"category":"static","name":"localStorage.setItem"},"console":{"description":"控制台对象。","isFunction":false,"category":"static","name":"console"},"Element":{"description":"确保 Element.prototype 可访问。","isFunction":false,"category":"static","name":"Element"},"DOMEvent#stopImmediatePropagation":{"description":"立即阻止事件的传播，被立即阻止传播的事件也不会在当前的对象上被分发到其他的监听器。","isFunction":true,"category":"instance","name":"DOMEvent#stopImmediatePropagation"},"Animation.fps":{"description":"指定动画引擎播放动画时的每秒帧数。\n应指定 10 到 60 之间的数字，默认为 60。\n仅在对性能敏感的环境下，才需要降低这个数值。过低的 fps 将导致动画播放不流畅。","type":"number","isFunction":false,"category":"static","name":"Animation.fps"},"DOMEvent#altKey":{"description":"事件发生时，alt 键是否被按下。","type":"boolean","isFunction":false,"category":"instance","name":"DOMEvent#altKey"},"Array#getFirst":{"description":"获取本数组的第一个元素。","returns":[{"type":"*","description":"本数组的第一个元素。"}],"type":"*","examples":["[0, 1, 2, 3, 4].getFirst();\n// 0"],"isFunction":true,"category":"instance","name":"Array#getFirst"},"String":{"isFunction":true,"category":"constructor","name":"String"},"navigator.isIElt10":{"description":"浏览器是否为 IE，且版本小于 10。","type":"boolean","isFunction":false,"category":"static","name":"navigator.isIElt10"},"localStorage.clear":{"description":"清空 localStorage 中的所有数据。","isFunction":true,"category":"static","name":"localStorage.clear"},"Element#getChildCount":{"description":"获取本元素的子元素的总数。","returns":[{"type":"number","description":"本元素的子元素的总数。"}],"type":"number","isFunction":true,"category":"instance","name":"Element#getChildCount"},"DOMEvent#bubbles":{"description":"是否可以冒泡，不冒泡的事件不能使用代理事件监听。","type":"boolean","isFunction":false,"category":"instance","name":"DOMEvent#bubbles"},"Animation.createBasicRenderer":{"parameters":[{"description":"渲染函数，传入两个参数“时间轴”和“偏移量”。\n该函数被调用时 this 的值为所属的 Animation 对象。","type":"Function","name":"renderer","isOptional":false}],"description":"创建基本渲染器。","returns":[{"type":"Function","description":"生成的渲染器。"}],"type":"Function","isFunction":true,"category":"static","name":"Animation.createBasicRenderer"},"navigator.inStandardsMode":{"description":"浏览器是否工作在标准模式下。","type":"boolean","isFunction":false,"category":"static","name":"navigator.inStandardsMode"},"Element#find":{"parameters":[{"description":"选择符。","type":"string","name":"selector","isOptional":false}],"description":"在本元素的后代元素中，根据指定的选择符查找符合条件的第一个元素。","returns":[{"type":"?Element","description":"查找到的元素。\n如果没有找到任何元素，返回 null。"}],"type":"?Element","see":["http://www.w3.org/TR/selectors-api2/","https://github.com/jquery/sizzle/wiki/Sizzle-Home"],"isFunction":true,"category":"instance","name":"Element#find"},"Array#map":{"parameters":[{"description":"对数组中的每个元素都调用一次的回调函数。\n回调函数有三个参数：当前元素，当前元素的索引和调用该方法的数组对象。","type":"Function","name":"callback","isOptional":false},{"description":"callback 被调用时 this 的值。","type":"Object","name":"thisArg","isOptional":true}],"description":"对数组中的每一个元素都调用一次回调函数，并返回一个包含这个回调函数的每次调用后的返回值的新数组。","returns":[{"type":"Array","description":"包含 callback 的每次调用后的返回值的新数组。"}],"type":"Array","see":["http://es5.github.com/#x15.4.4.19","https://developer.mozilla.org/en/Core_JavaScript_1.5_Reference/Objects/Array/map"],"examples":["var a = [1, 2, 3].map(function(item) {\n  return item + 10;\n});\na;\n// [11, 12, 13]"],"isFunction":true,"category":"instance","name":"Array#map"},"Element#clone":{"parameters":[{"description":"是否进行深克隆。","type":"boolean","name":"recursively","isOptional":true},{"description":"是否保留本元素及后代元素上的所有事件监听器。","type":"boolean","name":"keepListeners","isOptional":true}],"description":"克隆本元素。\n如果本元素有 id 属性，需注意克隆元素的 id 属性将与之有相同的值，必要时应进一步处理。\n不要克隆包含脚本的元素，以免出现兼容性问题。\n不要克隆包含样式表的元素，以免最终样式不符合预期。","returns":[{"type":"Element","description":"克隆后的元素。"}],"type":"Element","see":["http://jquery.com/","http://mootools.net/","http://w3help.org/zh-cn/causes/SD9029"],"isFunction":true,"category":"instance","name":"Element#clone"},"Element#getStyle":{"parameters":[{"description":"特性名（不支持复合特性），应使用 camel case 格式。","type":"string","name":"propertyName","isOptional":false}],"description":"获取本元素的“计算后的样式”中某个特性的值。\n注意：不要尝试获取未插入文档树的元素的“计算后的样式”，它们存在兼容性问题。","returns":[{"type":"string","description":"对应的特性值，如果获取的是长度值，其单位未必是 px，可能是其定义时的单位。"}],"type":"string","isFunction":true,"category":"instance","name":"Element#getStyle"},"Date":{"isFunction":true,"category":"constructor","name":"Date"},"window":{"description":"扩展 DOMWindow 对象。","isFunction":false,"category":"static","name":"window"},"Array#filter":{"parameters":[{"description":"对数组中的每个元素都调用一次的回调函数。\n回调函数有三个参数：当前元素，当前元素的索引和调用该方法的数组对象。","type":"Function","name":"callback","isOptional":false},{"description":"callback 被调用时 this 的值。","type":"Object","name":"thisArg","isOptional":true}],"description":"对数组中的每一个元素都调用一次回调函数，并且创建一个新的数组，该数组包含所有调用回调函数后返回值为 true 时对应的原数组元素。","returns":[{"type":"Array","description":"包含所有调用 callback 后返回值为 true 时对应的原数组元素的新数组。"}],"type":"Array","see":["http://es5.github.com/#x15.4.4.20","https://developer.mozilla.org/en/Core_JavaScript_1.5_Reference/Objects/Array/filter"],"examples":["var a = [1, 2, 3].filter(function(item) {\n  return item % 2 === 1;\n});\na;\n// [1, 3]"],"isFunction":true,"category":"instance","name":"Array#filter"},"Array.from":{"parameters":[{"description":"要转化为数组的值。\n如果该值为 undefined 或 null，则返回空数组。\n如果该值本身即为一个数组，则直接返回这个数组。\n如果该值有 toArray 方法，则返回调用该方法后的结果。\n如果该值可遍历，则返回一个包含各可遍历项的数组。\n否则，返回一个仅包含该值的数组。","type":"*","name":"value","isOptional":false}],"description":"将一个值转化为数组。","returns":[{"type":"Array","description":"由 value 转化而来的数组。"}],"type":"Array","isFunction":true,"category":"static","name":"Array.from"},"Boolean":{"isFunction":true,"category":"constructor","name":"Boolean"},"Number.isInteger":{"parameters":[{"description":"提供的值。","type":"*","name":"value","isOptional":false}],"description":"检查提供的值是否为 IEEE-754 双精度整数。\n取值范围在 ±Math.pow(2, 53) 之间。","returns":[{"type":"boolean","description":"检查结果。"}],"type":"boolean","see":["http://wiki.ecmascript.org/doku.php?id=harmony:number.isinteger"],"examples":["Number.isInteger(9007199254740992);\n// false"],"isFunction":true,"category":"static","name":"Number.isInteger"},"Element#setStyles":{"parameters":[{"description":"包含一条或多条要设置的样式声明，格式为 {propertyName: propertyValue, ...} 的对象。","type":"Object","name":"declarations","isOptional":false}],"description":"为本元素设置一组行内样式声明。","returns":[{"type":"Element","description":"本元素。"}],"type":"Element","isFunction":true,"category":"instance","name":"Element#setStyles"},"Element#getParent":{"description":"获取本元素的父元素。","returns":[{"type":"?Element","description":"本元素的父元素。"}],"type":"?Element","isFunction":true,"category":"instance","name":"Element#getParent"},"Animation#play":{"description":"播放动画。\n如果当前动画正在播放中，或时间点已到达终点，则调用本方法无效。","returns":[{"type":"boolean","description":"本方法是否已被成功调用。"}],"type":"boolean","isFunction":true,"category":"instance","name":"Animation#play"},"window.getClientSize":{"description":"获取视口可视区域的尺寸。\nIE9 Firefox Chrome Safari Opera 有 window.innerWidth 和 window.innerHeight 属性，但这个值是包含了滚动条宽度的值。\n为保持一致性，不使用这两个属性来获取文档可视区域尺寸。","returns":[{"type":"Object","description":"尺寸，包含 width 和 height 两个数字类型的属性，单位为像素。"}],"type":"Object","see":["http://www.w3.org/TR/cssom-view/#dom-window-innerwidth","http://www.w3.org/TR/cssom-view/#dom-window-innerheight"],"isFunction":true,"category":"static","name":"window.getClientSize"},"Math":{"isFunction":true,"category":"constructor","name":"Math"},"Math.limit":{"parameters":[{"description":"输入的数字。","type":"number","name":"number","isOptional":false},{"description":"允许的数字下限。","type":"number","name":"min","isOptional":false},{"description":"允许的数字上限。","type":"number","name":"max","isOptional":false}],"description":"参考输入的数字 number，返回介于 min 和 max 之间（包含 min 和 max）的数字。\n如果 number 小于 min 则返回 min；如果 number 大于 max 则返回 max；否则返回 number。","returns":[{"type":"number","description":"输出的数字。"}],"type":"number","see":["http://mootools.net/"],"examples":["Math.limit(100, 0, 80);\n// 80\nMath.limit(NaN, 0, 80);\n// 0"],"isFunction":true,"category":"static","name":"Math.limit"},"Math.randomRange":{"parameters":[{"description":"要获取的随机数的下限，整数。","type":"number","name":"min","isOptional":false},{"description":"要获取的随机数的上限，整数。","type":"number","name":"max","isOptional":false}],"description":"生成介于 min 和 max 之间（包含 min 和 max）的伪随机整数。","returns":[{"type":"number","description":"生成的伪随机整数。"}],"type":"number","see":["http://mootools.net/"],"isFunction":true,"category":"static","name":"Math.randomRange"},"Request":{"parameters":[{"description":"请求地址。","type":"string","name":"url","isOptional":false},{"description":"可选参数。","type":"Object","name":"options","isOptional":true},{"description":"请求模式，可选值为 'xhr'（启用 XHR 模式）和 'jsonp'（启用 JSONP 模式），大小写不敏感，默认为 'xhr'。","type":"string","name":"options.mode","isOptional":true},{"description":"请求方法，仅在 XHR 模式下有效，可以使用 'get' 和 'post'，大小写不敏感，默认为 'get'。\n在 JSONP 模式下，永远使用 'get' 方法进行请求。\n当使用 'get' 方法进行请求时，应将整个 URL 的长度控制在 2048 个字符以内。","type":"string","name":"options.method","isOptional":true},{"description":"是否禁用浏览器的缓存，仅在 XHR 模式下有效，默认启用浏览器的缓存。\n在 JSONP 模式下，永远禁用浏览器的缓存。","type":"boolean","name":"options.noCache","isOptional":true},{"description":"是否使用同步方式进行请求，仅在 XHR 模式下有效，默认使用异步方式进行请求。\n在 JSONP 模式下，永远使用异步方式进行请求。","type":"boolean","name":"options.sync","isOptional":true},{"description":"请求最短时间，仅在使用异步方式进行请求时有效，单位为毫秒，默认为 NaN，即无最短时间限制。","type":"number","name":"options.minTime","isOptional":true},{"description":"请求超时时间，仅在使用异步方式进行请求时有效，单位为毫秒，默认为 NaN，即无超时时间限制。","type":"number","name":"options.maxTime","isOptional":true},{"description":"用户名，仅在 XHR 模式下有效，默认为空字符串，即不指定用户名。","type":"string","name":"options.username","isOptional":true},{"description":"密码，仅在 XHR 模式下有效，默认为空字符串，即不指定密码。","type":"string","name":"options.password","isOptional":true},{"description":"请求头的内容，仅在 XHR 模式下有效，格式为 {key: value, ...}，默认为 {'X-Requested-With': 'XMLHttpRequest', 'Accept': '*&#47;*'}。","type":"Object","name":"options.headers","isOptional":true},{"description":"发送的数据类型，仅在 XHR 模式下且 method 为 'post' 时有效，默认为 'application/x-www-form-urlencoded'。","type":"string","name":"options.contentType","isOptional":true},{"description":"保存 JSONP 前缀的参数名，服务端应将该参数的值作为输出 JSONP 时的前缀使用，仅在 JSONP 模式下有效，大小写敏感，默认为 'callback'。","type":"string","name":"options.callbackName","isOptional":true}],"description":"对一个指定的资源发起请求，并获取响应数据。\n所有 Request 的实例也都是一个 JSEventTarget 对象。\n每个 Request 的实例都对应一个资源，实例创建后可以重复使用。\n创建 Request 时，可以选择使用 XHR 模式（同域请求时）或 JSONP 模式（跨域请求时）。\n在 JSONP 模式下，如果服务端返回的响应体不是 JSONP 格式的数据，请求将出现错误，并且这个错误是无法被捕获的。需要注意的是 JSONP 请求会直接执行另一个域内的脚本，因此如果该域遭到攻击，本域也可能会受到影响。\n两种模式的请求结果都会被传入 abort、timeout、complete 和 finish 事件监听器中。\nXHR 模式的请求结果中包含以下属性：\n<ul>\n<li>{number} <dfn>status</dfn> 状态码。</li>\n<li>{string} <dfn>statusText</dfn> 状态描述。</li>\n<li>{Object} <dfn>headers</dfn> 响应头。</li>\n<li>{string} <dfn>text</dfn> 响应文本。</li>\n<li>{?XMLDocument} <dfn>xml</dfn> 响应 XML 文档。</li>\n</ul>\nJSONP 模式的请求结果中包含以下属性：\n<ul>\n<li>{number} <dfn>status</dfn> 状态码。</li>\n<li>{string} <dfn>statusText</dfn> 状态描述。</li>\n<li>{*} <dfn>data</dfn> 请求结果。</li>\n</ul>","fires":[{"description":"请求开始时触发。","name":"start"},{"description":"请求被取消时触发。","name":"abort"},{"description":"请求超时时触发。","name":"timeout"},{"description":"请求完成时触发。","name":"complete"},{"description":"请求结束时触发。\n只要请求已开始，此事件就必然会被触发（跟随在 abort、timeout 或 complete 任一事件之后）。\n这样设计的好处是在请求结束时可以统一处理一些状态的设定或恢复，如将 start 事件监听器中呈现到用户界面的提示信息隐藏。","name":"finish"}],"isFunction":true,"category":"constructor","name":"Request"},"Request#ongoing":{"description":"请求是否正在进行中。","type":"boolean","isFunction":false,"category":"instance","name":"Request#ongoing"},"Object.toQueryString":{"parameters":[{"description":"要转换的对象，该对象的每个属性名和属性值都将以键值对的形式被转换为字符串。\n如果某个属性值为 undefined 或 null，则忽略该属性。\n如果某个属性值为数组，则表示其对应的属性名有多个有效值。","type":"Object","name":"object","isOptional":false},{"description":"转换时不使用 encodeURIComponent 编码。","type":"boolean","name":"dontEncode","isOptional":true}],"description":"将一个对象转换为用于 HTTP 传输的查询字符串。","returns":[{"type":"string","description":"转换后的字符串。"}],"type":"string","examples":["Object.toQueryString({a: undefined, b: null, c: '', d: 100, e: ['Composite Value', true]});\n// \"c=&d=100&e=Composite%20Value&e=true\""],"isFunction":true,"category":"static","name":"Object.toQueryString"},"Element#removeData":{"parameters":[{"description":"数据名。","type":"string","name":"key","isOptional":false}],"description":"从本元素中删除一条自定义数据。\n注意：IE6 IE7 在 removeAttribute 时，key 参数是大小写敏感的。","returns":[{"type":"Element","description":"本元素。"}],"type":"Element","isFunction":true,"category":"instance","name":"Element#removeData"},"location":{"description":"扩展 location 对象。","isFunction":false,"category":"static","name":"location"},"DOMEvent#shiftKey":{"description":"事件发生时，shift 键是否被按下。","type":"boolean","isFunction":false,"category":"instance","name":"DOMEvent#shiftKey"},"Element#fade":{"parameters":[{"description":"模式，默认为 'toggle'。\n<table>\n<tr><th>可选值</th><th>含义</th></tr>\n<tr><td><dfn>toggle</dfn></td><td>如果本元素的动画播放列表中已经存在一个 fade 动画，则使用与这个已存在的动画相反的模式。<br>否则若本元素的 display 为 none 则为淡入模式，display 不为 none 则为淡出模式。</td></tr>\n<tr><td><dfn>in</dfn></td><td>淡入模式。</td></tr>\n<tr><td><dfn>out</dfn></td><td>淡出模式。</td></tr>\n</table>","type":"string","name":"mode","isOptional":true},{"description":"动画选项。","type":"Object","name":"options","isOptional":true},{"description":"播放时间，单位为毫秒，默认为 200。","type":"number","name":"options.duration","isOptional":true},{"description":"控速函数名称或表达式，细节请参考 Animation.prototype.addClip 的同名参数，默认为 'easeIn'。","type":"string","name":"options.timingFunction","isOptional":true},{"description":"播放开始时的回调。\n该函数被调用时 this 的值为本元素。","type":"Function","name":"options.onStart","isOptional":true},{"description":"播放每一帧之后的回调。\n该函数被调用时 this 的值为本元素。","type":"Function","name":"options.onStep","isOptional":true},{"description":"播放完成时的回调。\n该函数被调用时 this 的值为本元素。","type":"Function","name":"options.onFinish","isOptional":true}],"description":"让本元素播放一个淡入或淡出动画。\n如果本元素的动画播放列表中已经存在一个 fade 动画，则停止旧的，播放新的。这种情况下新动画的播放时间会小于设定的时间（具体取决于旧动画已播放的百分比）。\n否则若本元素的 display 不为 none 则不能播放淡入动画，display 为 none 则不能播放淡出动画。","returns":[{"type":"Element","description":"本元素。"}],"type":"Element","isFunction":true,"category":"instance","name":"Element#fade"},"String#contains":{"parameters":[{"description":"指定的子串。","type":"string","name":"substring","isOptional":false}],"description":"检查字符串是否包含指定的子串。","returns":[{"type":"boolean","description":"检查结果。"}],"type":"boolean","see":["http://wiki.ecmascript.org/doku.php?id=harmony:string_extras"],"examples":["'abcdefg'.contains('cd');\n// true"],"isFunction":true,"category":"instance","name":"String#contains"},"DOMEvent#wheelDown":{"description":"事件发生时鼠标滚轮是否正在向下滚动，仅在 mousewheel 类型的事件对象上有效。","type":"boolean","isFunction":false,"category":"instance","name":"DOMEvent#wheelDown"},"document.find":{"parameters":[{"description":"选择符。","type":"string","name":"selector","isOptional":false}],"description":"在文档中根据指定的选择符查找符合条件的第一个元素。","returns":[{"type":"?Element","description":"查找到的元素。\n如果没有找到任何元素，返回 null。"}],"type":"?Element","see":["http://www.w3.org/TR/selectors-api2/","https://github.com/jquery/sizzle/wiki/Sizzle-Home"],"isFunction":true,"category":"static","name":"document.find"},"Object.mixin":{"parameters":[{"description":"目标对象。","type":"Object","name":"destination","isOptional":false},{"description":"源对象，其 properties 会被复制到 destination 中。","type":"Object","name":"source","isOptional":false},{"description":"过滤要添加的 source 中的 properties 的名单。","type":"Object","name":"filter","isOptional":true},{"description":"仅当 source 中的 key 包含于 whiteList 时，对应的 property 才会被复制到 destination 中。","type":"Array","name":"filter.whiteList","isOptional":true},{"description":"如果 source 中的 key 包含于 blackList，则对应的 property 不会被复制到 destination 中。\n如果 blackList 与 whiteList 有重复的值，则 whiteList 中的将被忽略。","type":"Array","name":"filter.blackList","isOptional":true}],"description":"将源对象（不包含原型链）上的 properties 添加到目标对象中。\nsource 中的 property 会覆盖 destination 中的同名 property。\n<table>\n<tr><th>destination (before)</th><th>source</th><th>destination (after)</th></tr>\n<tr><td>a: 0</td><td></td><td>a: 0</td></tr>\n<tr><td>b: 0</td><td>b: 1</td><td>b: 1</td></tr>\n<tr><td></td><td>c: 1</td><td>c: 1</td></tr>\n</table>","returns":[{"type":"Object","description":"目标对象。"}],"type":"Object","examples":["Object.mixin({a: 0}, {b: 1});\n// {a: 0, b: 1}","Object.mixin({a: 0, b: 0}, {a: 1, b: 1}, {whiteList: ['a']});\n// {a: 1, b: 0}\nObject.mixin({a: 0, b: 0}, {a: 1, b: 1}, {whiteList: ['a', 'b'], blackList: ['a']});\n// {a: 0, b: 1}"],"isFunction":true,"category":"static","name":"Object.mixin"},"DOMEvent#originalEvent":{"description":"原生事件对象。\n使用 fire 方法创建的事件对象的 originalEvent.type 为空字符串。","type":"Object","isFunction":false,"category":"instance","name":"DOMEvent#originalEvent"},"Animation.createScrollRenderer":{"parameters":[{"description":"要实施滚动效果的元素。","type":"Element","name":"element","isOptional":false},{"description":"横向滚动坐标，元素的内容将向指定的坐标平滑滚动。","type":"number","name":"x","isOptional":false},{"description":"纵向滚动坐标，元素的内容将向指定的坐标平滑滚动。","type":"number","name":"y","isOptional":false}],"description":"创建平滑滚动效果渲染器。","returns":[{"type":"Function","description":"生成的渲染器。"}],"type":"Function","isFunction":true,"category":"static","name":"Animation.createScrollRenderer"},"Widget.parse":{"parameters":[{"description":"要解析的元素。","type":"Element","name":"element","isOptional":false},{"description":"是否解析该元素的后代元素。","type":"boolean","name":"recursively","isOptional":true}],"description":"将符合条件的元素解析为 Widget。\n在 DOM 树解析完成后会自动将页面内的全部符合条件的元素解析为 Widget，因此仅应在必要时调用本方法。","isFunction":true,"category":"static","name":"Widget.parse"},"DOMEvent#relatedTarget":{"description":"事件被触发时的相关对象，仅在 mouseover/mouseout/mousedrag/mousedragend/mousedragenter/mousedragleave/mousedragover/mousedrop 类型的事件对象上有效。\n对于 mouseover/mouseout 事件，其值为发生此类事件之前，鼠标指向的对象。\n对于其他拖拽类型的事件，其值为正在被拖拽的元素。这个元素应在 mousedragstart 事件的监听器中，通过事件对象的本属性来指定。","type":"?Element","isFunction":false,"category":"instance","name":"DOMEvent#relatedTarget"},"DOMEvent#offsetX":{"description":"事件发生时鼠标在横向移动的偏移量，仅在 mousedragstart/mousedrag/mousedragend/mousedragenter/mousedragleave/mousedragover/mousedrop 类型的事件对象上有效。","type":"number","isFunction":false,"category":"instance","name":"DOMEvent#offsetX"},"Object.forEach":{"parameters":[{"description":"要遍历的对象。","type":"Object","name":"object","isOptional":false},{"description":"用来遍历的函数，参数为 value，key，object。","type":"Function","name":"callback","isOptional":false},{"description":"callback 被调用时 this 的值。","type":"Object","name":"thisArg","isOptional":true}],"description":"遍历一个对象。","isFunction":true,"category":"static","name":"Object.forEach"},"DOMEvent#offsetY":{"description":"事件发生时鼠标在纵向移动的偏移量，仅在 mousedragstart/mousedrag/mousedragend/mousedragenter/mousedragleave/mousedragover/mousedrop 类型的事件对象上有效。","type":"number","isFunction":false,"category":"instance","name":"DOMEvent#offsetY"},"Widget":{"description":"提供对 Widget 的支持。","isFunction":false,"category":"static","name":"Widget"},"Element#getPreviousSibling":{"description":"获取本元素的上一个兄弟元素。","returns":[{"type":"?Element","description":"本元素的上一个兄弟元素。"}],"type":"?Element","isFunction":true,"category":"instance","name":"Element#getPreviousSibling"},"String#toArray":{"description":"将字符串转化为数组。","returns":[{"type":"Array","description":"从字符串转化的数组。"}],"type":"Array","see":["http://wiki.ecmascript.org/doku.php?id=harmony:string_extras"],"examples":["'abcdefg'.toArray();\n// ['a', 'b', 'c', 'd', 'e', 'f', 'g']"],"isFunction":true,"category":"instance","name":"String#toArray"},"Element#getNextSibling":{"description":"获取本元素的下一个兄弟元素。","returns":[{"type":"?Element","description":"本元素的下一个兄弟元素。"}],"type":"?Element","isFunction":true,"category":"instance","name":"Element#getNextSibling"},"Number#toJSON":{"description":"将数字转换为 JSON 格式的字符串。","returns":[{"type":"string","description":"转换后的字符串。"}],"type":"string","isFunction":true,"category":"instance","name":"Number#toJSON"},"DOMEvent#which":{"description":"当一个设备触发事件时的相关代码。在键盘事件中为按下的键的代码。","type":"number","isFunction":false,"category":"instance","name":"DOMEvent#which"},"Array#lastIndexOf":{"parameters":[{"description":"指定的元素。","type":"*","name":"searchElement","isOptional":false},{"description":"从指定索引为起始点开始查找，默认为数组的长度。\n如果该值大于数组的长度，则使用数组的长度作为查找起始点。\n如果该值为负数，则表示从数组的末尾开始计算的偏移量，即使用 (fromIndex + 数组的长度) 作为查找起始点，如果这个结果仍为负数，则使用 0 作为查找起始点。","type":"number","name":"fromIndex","isOptional":true}],"description":"返回数组中最后一次出现指定的元素的索引。","returns":[{"type":"number","description":"索引值，如果数组中不包含指定的元素，则返回 -1。"}],"type":"number","see":["http://es5.github.com/#x15.4.4.15","https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Array/lastIndexOf"],"examples":["[1, 2, 3, 2, 1].lastIndexOf(2);\n// 3\n[1, 2, 3, 2, 1].lastIndexOf(2, 2);\n// 1\n[1, 2, 3, 2, 1].lastIndexOf(2, -3)\n// 1\n[1, 2, 3, 2, 1].lastIndexOf(8)\n// -1"],"isFunction":true,"category":"instance","name":"Array#lastIndexOf"},"window.getScrollSize":{"description":"获取视口滚动区域的尺寸。当内容不足以充满视口可视区域时，返回视口可视区域的尺寸。","returns":[{"type":"Object","description":"尺寸，包含 width 和 height 两个数字类型的属性，单位为像素。"}],"type":"Object","isFunction":true,"category":"static","name":"window.getScrollSize"},"Animation#addClip":{"parameters":[{"description":"使用 Animation.create*Renderer 创建的渲染器。\n该函数被调用时 this 的值为所属的 Animation 对象。","type":"Function","name":"renderer","isOptional":false},{"description":"延时。","type":"number","name":"delay","isOptional":false},{"description":"播放时间。","type":"number","name":"duration","isOptional":false},{"description":"控速函数名称或表达式。\n支持的名称有 linear，bounceIn，bounceOut，ease，easeIn，easeOut，easeInOut，easeOutIn。\n表达式的格式为 <dfn>cubicBezier(<var>p1x</var>, <var>p1y</var>, <var>p2x</var>, <var>p2y</var>)</dfn>，各参数均为浮点数，其中 <var>p1x</var> 和 <var>p2x</var> 的取值范围必须在 [0, 1] 之间。","type":"string","name":"timingFunction","isOptional":false}],"description":"添加动画剪辑。","returns":[{"type":"Object","description":"Animation 对象。"}],"type":"Object","isFunction":true,"category":"instance","name":"Animation#addClip"},"Number#padZero":{"parameters":[{"description":"数字总位数（包括整数位和小数位），当数字实际位数小于指定的数字总位数时，会在左侧补零。","type":"number","name":"digits","isOptional":false}],"description":"在数字左侧补零，以使数字更整齐。","returns":[{"type":"string","description":"补零后的数字、NaN、Infinity 或 -Infinity 的字符形式。"}],"type":"string","isFunction":true,"category":"instance","name":"Number#padZero"},"navigator.userAgentInfo.name":{"description":"浏览器的名称，值为以下之一：IE|Firefox|Chrome|Safari|Opera|Unknown。","type":"string","isFunction":false,"category":"static","name":"navigator.userAgentInfo.name"},"Element#removeClass":{"parameters":[{"description":"类名，如果要同时指定多个类名，使用逗号将它们分开即可。","type":"string","name":"className","isOptional":false}],"description":"为本元素删除指定的类名。","returns":[{"type":"Element","description":"本元素。"}],"type":"Element","isFunction":true,"category":"instance","name":"Element#removeClass"},"Element#toggleClass":{"parameters":[{"description":"类名，如果要同时指定多个类名，使用逗号将它们分开即可。","type":"string","name":"className","isOptional":false}],"description":"如果本元素没有指定的类名，则添加指定的类名，否则删除指定的类名。","returns":[{"type":"Element","description":"本元素。"}],"type":"Element","isFunction":true,"category":"instance","name":"Element#toggleClass"},"Element#getData":{"parameters":[{"description":"数据名。","type":"string","name":"key","isOptional":false}],"description":"从本元素中读取一条自定义数据。","returns":[{"type":"?string","description":"数据值。\n如果指定的数据名不存在，返回 null。"}],"type":"?string","see":["http://www.w3.org/TR/html5/dom.html#embedding-custom-non-visible-data-with-the-data-*-attributes"],"isFunction":true,"category":"instance","name":"Element#getData"},"DOMEvent#rightButton":{"description":"事件发生时，鼠标右键是否被按下，仅在鼠标事件对象上有效。","type":"boolean","isFunction":false,"category":"instance","name":"DOMEvent#rightButton"},"DOMEvent#middleButton":{"description":"事件发生时，鼠标中键是否被按下，仅在鼠标事件对象上有效。","type":"boolean","isFunction":false,"category":"instance","name":"DOMEvent#middleButton"},"Element#swap":{"parameters":[{"description":"目标元素。","type":"Element","name":"target","isOptional":false}],"description":"交换本元素和目标元素的位置。","returns":[{"type":"Element","description":"本元素。"}],"type":"Element","isFunction":true,"category":"instance","name":"Element#swap"},"window.getPageOffset":{"description":"获取视口的滚动偏移量。","returns":[{"type":"Object","description":"坐标，包含 x 和 y 两个数字类型的属性，单位为像素。"}],"type":"Object","isFunction":true,"category":"static","name":"window.getPageOffset"},"Widget.register":{"parameters":[{"description":"要注册的 Widget 的相关信息。","type":"Object","name":"widget","isOptional":false},{"description":"Widget 的类型。","type":"string","name":"widget.type","isOptional":false},{"description":"Widget 的选择符（要求格式为 <var>nodeName</var>.<var>className</var>），能被此选择符选中的元素即可被本 Widget 的解析器解析。","type":"string","name":"widget.selector","isOptional":false},{"description":"包含要应用到此类 Widget 的 CSS 规则集的数组。","type":"Array","name":"widget.styleRules","isOptional":true},{"description":"包含此类 Widget 的默认配置的对象。","type":"Object","name":"widget.config","isOptional":true},{"description":"包含此类 Widget 的实例方法的对象。","type":"Object","name":"widget.methods","isOptional":true},{"description":"此类 Widget 的初始化函数。","type":"Function","name":"widget.initialize","isOptional":true}],"description":"注册一个 Widget。","isFunction":true,"category":"static","name":"Widget.register"},"DOMEvent#type":{"description":"事件类型。","type":"string","isFunction":false,"category":"instance","name":"DOMEvent#type"},"Element#innerText":{"description":"获取/设置本元素内的文本信息。\n注意：getter 在处理 BR 元素或换行符时，各浏览器的行为不一致。","type":"string","isFunction":false,"category":"instance","name":"Element#innerText"},"location.parameters":{"description":"通过此对象可以访问当前页面地址中查询字符串所携带的参数。\n注意：获取的参数值均为原始值（未经过 decodeURIComponent 解码）。","type":"Object","see":["http://w3help.org/zh-cn/causes/HD9001"],"examples":["// 设页面地址为 test.html?a=ok&b=100&b=128\nlocation.parameters\n// {a:'ok', b:['100', '128']}"],"isFunction":false,"category":"static","name":"location.parameters"},"Request.options":{"description":"默认选项。\n修改 Request.options 即可更改 Request 的默认选项，新的默认选项仅对后续创建的实例生效。","type":"Object","isFunction":false,"category":"static","name":"Request.options"},"DOMEventTarget":{"description":"所有的 DOMEventTarget 对象都具备处理事件的能力，window 对象、document 对象和所有的 Element 对象都是 DOMEventTarget 对象。\n本构造器仅供内部实现使用，外部无法访问。\nDOMEventTarget 对象在处理事件时，是工作在 DOM 事件模型中的。","isFunction":true,"category":"constructor","name":"DOMEventTarget"},"Date.now":{"description":"获取系统当前的时间戳。","returns":[{"type":"number","description":"系统当前的时间戳。"}],"type":"number","see":["http://es5.github.com/#x15.9.4.4"],"examples":["Date.now() === new Date().getTime();\n// true"],"isFunction":true,"category":"static","name":"Date.now"},"DOMEvent#isDefaultPrevented":{"description":"查询事件的默认行为是否已被阻止。","returns":[{"type":"boolean","description":"查询结果。"}],"type":"boolean","isFunction":true,"category":"instance","name":"DOMEvent#isDefaultPrevented"},"Element#compareDocumentPosition":{"parameters":[{"description":"目标元素。","type":"Element","name":"target","isOptional":false}],"description":"比较本元素和目标元素在文档树中的位置关系。\n调用本方法后返回的 number 值的含义：\n<table>\n<tr><th>Bits</th><th>Number</th><th>Meaning</th></tr>\n<tr><td>000000</td><td>0</td><td>节点 A 与节点 B 相等</td></tr>\n<tr><td>000001</td><td>1</td><td>节点 A 与节点 B 在不同的文档（或者一个在文档之外）</td></tr>\n<tr><td>000010</td><td>2</td><td>节点 B 在节点 A 之前</td></tr>\n<tr><td>000100</td><td>4</td><td>节点 A 在节点 B 之前</td></tr>\n<tr><td>001000</td><td>8</td><td>节点 B 包含节点 A</td></tr>\n<tr><td>010000</td><td>16</td><td>节点 A 包含节点 B</td></tr>\n<tr><td>100000</td><td>32</td><td>浏览器的私有使用</td></tr>\n</table>","returns":[{"type":"number","description":"比较结果。"}],"type":"number","see":["http://www.w3.org/TR/DOM-Level-3-Core/core.html#Node3-compareDocumentPosition","http://ejohn.org/blog/comparing-document-position/"],"isFunction":true,"category":"instance","name":"Element#compareDocumentPosition"},"Element#matchesSelector":{"parameters":[{"description":"选择符。","type":"string","name":"selector","isOptional":false}],"description":"检查本元素是否能被指定的选择符选中。","returns":[{"type":"boolean","description":"检查结果。"}],"type":"boolean","see":["http://www.w3.org/TR/selectors-api2/","https://github.com/jquery/sizzle/wiki/Sizzle-Home"],"isFunction":true,"category":"instance","name":"Element#matchesSelector"},"String#toJSON":{"description":"将字符串转换为 JSON 格式的字符串。","returns":[{"type":"string","description":"转换后的字符串。"}],"type":"string","isFunction":true,"category":"instance","name":"String#toJSON"},"Array#remove":{"parameters":[{"description":"指定的元素。","type":"*","name":"element","isOptional":false}],"description":"移除数组中第一个与指定的元素相同的元素。\nIE6 无法通过 [undefined].remove(undefined) 或 [undefined].remove() 成功移除数组中的元素。","returns":[{"type":"boolean","description":"指定的元素是否存在并被移除。"}],"type":"boolean","examples":["[1, 2, 1].remove(1);\n// [2, 1]"],"isFunction":true,"category":"instance","name":"Array#remove"},"Element#outerText":{"description":"获取本元素内的文本信息，或使用文本信息替换本元素。\n与 innerText 不同，如果设置一个元素的 outerText，那么设置的字符串将作为文本节点替换本元素在文档树中的位置。\n注意：getter 在处理 BR 元素或换行符时，各浏览器的行为不一致。","type":"string","isFunction":false,"category":"instance","name":"Element#outerText"},"String#camelize":{"parameters":[{"description":"是否使用大驼峰式命名法（又名 Pascal 命名法）。","type":"boolean","name":"useUpperCamelCase","isOptional":true}],"description":"以 camelize 的形式重组字符串。","returns":[{"type":"string","description":"重组后的字符串。"}],"type":"string","examples":["'foo-bar'.camelize();\n// 'fooBar'\n'foo-bar'.camelize(true);\n// 'FooBar'\n'HTMLFormElement'.camelize();\n// 'htmlFormElement'"],"isFunction":true,"category":"instance","name":"String#camelize"},"Number":{"isFunction":true,"category":"constructor","name":"Number"},"Element#insertAdjacentElement":{"parameters":[{"description":"要插入的位置，可选值请参考下表。\n<table>\n<tr><th>可选值</th><th>含义</th></tr>\n<tr><td><dfn>beforeBegin</dfn></td><td>将目标元素插入到本元素之前。</td></tr>\n<tr><td><dfn>afterBegin</dfn></td><td>将目标元素插入到本元素的所有内容之前。</td></tr>\n<tr><td><dfn>beforeEnd</dfn></td><td>将目标元素插入到本元素的所有内容之后。</td></tr>\n<tr><td><dfn>afterEnd</dfn></td><td>将目标元素插入到本元素之后。</td></tr>\n</table>","type":"string","name":"position","isOptional":false},{"description":"目标元素。","type":"Element","name":"target","isOptional":false}],"description":"在本元素的指定位置插入目标元素。","returns":[{"type":"Element","description":"目标元素。"}],"type":"Element","isFunction":true,"category":"instance","name":"Element#insertAdjacentElement"},"JSEventTarget#on":{"parameters":[{"description":"监听器名称。\n监听器名称由要监听的事件类型（必选）和标签（可选）组成，格式如下：\n<p><dfn><var>type</var></dfn>[<dfn>.<var>label</var></dfn>]</p>\n详细信息请参考下表：\n<table>\n<tr><th>组成部分</th><th>详细描述</th></tr>\n<tr>\n<td><dfn><var>type</var></dfn></td>\n<td>本监听器要监听的事件类型。<br><var>type</var> 只能使用大小写英文字母。</td>\n</tr>\n<tr>\n<td><dfn>.<var>label</var></dfn></td>\n<td>在监听器名称的末尾添加标签可以可以使相同对象上添加的相同类型、相同行为的监听器具备不同的名称。不同的名称可以确保调用 off 方法时能够精确匹配要删除的监听器。<br>添加具有明确含义的标签，可以最大限度的避免监听器被误删。<br><var>label</var> 可以使用英文字母、数字和下划线。</td>\n</tr>\n</table>\n使用逗号分割多个监听器名称，即可以在本对象上使用多个名称将同一个监听器添加多次。","type":"string","name":"name","isOptional":false},{"description":"监听器。\n该函数将在对应的事件发生时被调用，传入事件对象作为参数。\n该函数被调用时 this 的值为监听到本次事件的对象。","type":"Function","name":"listener","isOptional":false}],"description":"为本对象添加事件监听器。","returns":[{"type":"Object","description":"本对象。"}],"type":"Object","isFunction":true,"category":"instance","name":"JSEventTarget#on"},"navigator.userAgentInfo.engine":{"description":"浏览器渲染引擎的类型，值为以下之一：Trident|WebKit|Gecko|Presto|Unknown。","type":"string","isFunction":false,"category":"static","name":"navigator.userAgentInfo.engine"},"Element#replace":{"parameters":[{"description":"目标元素。","type":"Element","name":"target","isOptional":false},{"description":"是否保留目标元素及后代元素上的所有事件监听器。","type":"boolean","name":"keepListeners","isOptional":true}],"description":"使用本元素替换目标元素。","returns":[{"type":"Element","description":"本元素。"}],"type":"Element","isFunction":true,"category":"instance","name":"Element#replace"},"Array#some":{"parameters":[{"description":"用来检查的回调函数。\n回调函数有三个参数：当前元素，当前元素的索引和调用该方法的数组对象。\n回调函数返回 true 表示当前元素通过检查，反之表示未通过检查。","type":"Function","name":"callback","isOptional":false},{"description":"callback 被调用时 this 的值。","type":"Object","name":"thisArg","isOptional":true}],"description":"检查数组中是否有任一元素符合某个条件。","returns":[{"type":"boolean","description":"检查结果。"}],"type":"boolean","see":["http://es5.github.com/#x15.4.4.17","https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Array/some"],"examples":["[1, 2, 3].some(function(item) {\n  return item === 2;\n});\n// true"],"isFunction":true,"category":"instance","name":"Array#some"},"HTMLSelectElement#insertOption":{"parameters":[{"description":"在指定的索引之前插入新选项。索引从 0 开始，如果指定的索引大于当前选项的数目或为 -1，则在所有选项之后插入新选项。","type":"number","name":"index","isOptional":false},{"description":"新选项的文本。","type":"string","name":"text","isOptional":false},{"description":"新选项的值。","type":"string","name":"value","isOptional":false},{"description":"新选项是否为默认选中。如果指定为 true，则在本下拉选单所属的表单被重置后，这个选项将被选中。","type":"boolean","name":"defaultSelected","isOptional":true},{"description":"新选项的当前状态是否为选中。","type":"boolean","name":"selected","isOptional":true}],"description":"在本下拉选单中插入一个新的选项。\n如果 SELECT 元素中含有 OPTGROUP 则不适合使用本方法。","returns":[{"type":"Element","description":"本元素。"}],"type":"Element","isFunction":true,"category":"instance","name":"HTMLSelectElement#insertOption"},"Date#format":{"parameters":[{"description":"由代表日期字段的标识符和其他字符组成的格式字符串，默认为 'YYYY-MM-DD'。\n各标识符及其含义：\n<table>\n<tr><th>字符</th><th>含义</th></tr>\n<tr><td>YYYY</td><td>四位数年份。</td></tr>\n<tr><td>MM</td><td>两位数月份。</td></tr>\n<tr><td>DD</td><td>两位数日期。</td></tr>\n<tr><td>hh</td><td>两位数小时，24 小时制。</td></tr>\n<tr><td>mm</td><td>两位数分钟。</td></tr>\n<tr><td>ss</td><td>两位数秒钟。</td></tr>\n<tr><td>s</td><td>三位数毫秒。</td></tr>\n<tr><td>TZD</td><td>时区指示。世界标准时间显示大写字母 Z，其他时区用当地时间加时差表示。</td></tr>\n</table>","type":"string","name":"format","isOptional":true},{"description":"是否格式化为世界标准时间。","type":"boolean","name":"toUTC","isOptional":true}],"description":"将日期对象格式化为字符串。","returns":[{"type":"string","description":"格式化后的字符串。"}],"type":"string","see":["http://www.w3.org/TR/NOTE-datetime","http://en.wikipedia.org/wiki/ISO_8601","http://blog.stevenlevithan.com/archives/date-time-format"],"examples":["new Date(2000,0,1).format()\n// \"2000-01-01\"\nnew Date(2000,2,1).format('MM-DD hh:mm', true)\n// \"02-29 16:00\"\nnew Date('Fri, 21 Dec 2012 15:14:35 GMT').format('YYYY-MM-DDThh:mm:ss.sTZD')\n// \"2012-12-21T23:14:35.000+08:00\"\nnew Date(2012, 0, 1).format('YYYYYY')\n// 未被成功匹配的字符均会作为普通字符显示。\n// \"2012YY\""],"isFunction":true,"category":"instance","name":"Date#format"},"Element#empty":{"description":"将本元素的内容清空。\n在本元素的所有后代元素上添加的事件监听器也将被删除。","returns":[{"type":"Element","description":"本元素。"}],"type":"Element","isFunction":true,"category":"instance","name":"Element#empty"},"String#endsWith":{"parameters":[{"description":"指定的子串。","type":"string","name":"substring","isOptional":false}],"description":"检查字符串是否以指定的子串结束。","returns":[{"type":"boolean","description":"检查结果。"}],"type":"boolean","see":["http://wiki.ecmascript.org/doku.php?id=harmony:string_extras"],"examples":["'abcdefg'.endsWith('a');\n// false"],"isFunction":true,"category":"instance","name":"String#endsWith"},"navigator.isSafari":{"description":"浏览器是否为 Safari。","type":"boolean","isFunction":false,"category":"static","name":"navigator.isSafari"},"Array#indexOf":{"parameters":[{"description":"指定的元素。","type":"*","name":"searchElement","isOptional":false},{"description":"从指定索引为起始点开始查找，默认为 0。\n如果该值大于数组的长度，则使用数组的长度作为查找起始点。\n如果该值为负数，则表示从数组的末尾开始计算的偏移量，即使用 (fromIndex + 数组的长度) 作为查找起始点，如果这个结果仍为负数，则使用 0 作为查找起始点。","type":"number","name":"fromIndex","isOptional":true}],"description":"返回数组中第一次出现指定的元素的索引。","returns":[{"type":"number","description":"索引值，如果数组中不包含指定的元素，则返回 -1。"}],"type":"number","see":["http://es5.github.com/#x15.4.4.14","https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Array/indexOf"],"examples":["[1, 2, 3, 2, 1].indexOf(2);\n// 1\n[1, 2, 3, 2, 1].indexOf(2, 2);\n// 3\n[1, 2, 3, 2, 1].indexOf(2, -3)\n// 3\n[1, 2, 3, 2, 1].indexOf(8)\n// -1"],"isFunction":true,"category":"instance","name":"Array#indexOf"},"navigator.userAgentInfo.version":{"description":"浏览器的版本号，如果取不到版本号，则为 NaN。","type":"string","isFunction":false,"category":"static","name":"navigator.userAgentInfo.version"},"Element#setStyle":{"parameters":[{"description":"特性名（支持复合特性），应使用 camel case 格式。","type":"string","name":"propertyName","isOptional":false},{"description":"特性值，若为数字，则为期望长度单位的特性值自动添加长度单位 'px'。","type":"number|string","name":"propertyValue","isOptional":false}],"description":"为本元素设置一条行内样式声明。\n注意：如果设置的是长度值，若长度单位不是 'px' 则不能省略长度单位。","returns":[{"type":"Element","description":"本元素。"}],"type":"Element","isFunction":true,"category":"instance","name":"Element#setStyle"},"DOMEventTarget#on":{"parameters":[{"description":"监听器名称。\n监听器名称由要监听的事件类型（必选）、限定符（可选）和标签（可选）组成，格式如下：\n<p><dfn><var>type</var></dfn>[<dfn>:relay(<var>selector</var>)</dfn>][<dfn>:once</dfn>|<dfn>:idle(<var>n</var>)</dfn>|<dfn>:throttle(<var>n</var>)</dfn>][<dfn>.<var>label</var></dfn>]</p>\n详细信息请参考下表：\n<table>\n<tr><th>组成部分</th><th>详细描述</th></tr>\n<tr>\n<td><dfn><var>type</var></dfn></td>\n<td>本监听器要监听的事件类型。<br><var>type</var> 只能使用大小写英文字母。</td>\n</tr>\n<tr>\n<td><dfn>:relay(<var>selector</var>)</dfn></td>\n<td>指定本监听器为代理事件监听器，监听的目标为文档树中（如果本方法在 document 上被调用）或本元素的后代元素中（如果本方法在一个元素上被调用），符合 <var>selector</var> 限定的元素。<br><var>selector</var> 应为合法的 CSS 选择符。</td>\n</tr>\n<tr>\n<td><dfn>:once</dfn></td>\n<td>指定本监听器仅能被调用一次，调用后即被自动删除。<br>自动删除时，会使用添加本监听器时使用的监听器名称。</td>\n</tr>\n<tr>\n<td><dfn>:idle(<var>n</var>)</dfn></td>\n<td>指定本监听器将在该类型的事件每次被触发 <var>n</var> 毫秒后、且下一次同类型的事件被触发前才能被调用。<br><var>n</var> 应为大于 0 的数字。</td>\n</tr>\n<tr>\n<td><dfn>:throttle(<var>n</var>)</dfn></td>\n<td>指定当事件连续发生时，本监听器可被连续调用的最短时间间隔为 <var>n</var> 毫秒。<br><var>n</var> 应为大于 0 的数字。</td>\n</tr>\n<tr>\n<td><dfn>.<var>label</var></dfn></td>\n<td>在监听器名称的末尾添加标签可以可以使相同对象上添加的相同类型、相同行为的监听器具备不同的名称。不同的名称可以确保调用 off 方法时能够精确匹配要删除的监听器。<br>添加具有明确含义的标签，可以最大限度的避免监听器被误删。<br><var>label</var> 可以使用英文字母、数字和下划线。</td>\n</tr>\n</table>\n使用逗号分割多个监听器名称，即可以在本对象上使用多个名称将同一个监听器添加多次。","type":"string","name":"name","isOptional":false},{"description":"监听器。\n该函数将在对应的事件发生时被调用，传入事件对象作为参数。如果指定了 idle 或 throttle 限定符，则该事件对象无法被阻止传播或取消默认行为。\n该函数被调用时 this 的值为监听到本次事件的对象，即：\n<ul>\n<li>如果是普通监听器，则 this 的值为本对象。</li>\n<li>如果是代理监听器，则 this 的值为被代理的元素。</li>\n</ul>\n如果该函数返回 false，则相当于调用了传入的事件对象的 stopPropagation 和 preventDefault 方法。","type":"Function","name":"listener","isOptional":false}],"description":"为本对象添加事件监听器。","returns":[{"type":"Object","description":"本对象。"}],"type":"Object","see":["http://mootools.net/","http://www.quirksmode.org/dom/events/index.html"],"examples":["document.on('click', onClick);\n// 为 document 添加一个 click 事件的监听器。","$element.on('click:relay(a)', onClick);\n// 为 $element 添加一个代理监听器，为该元素所有的后代 A 元素代理 click 事件的监听。","$element.on('click.temp', onClick);\n// 为 $element 添加一个 click 事件的监听器，并为其指定一个标签 temp。","$element.on('input:idle(200)', onInput);\n// 为 $element 添加一个 input 事件的监听器，该监听器将在每次 input 事件被触发 200 毫秒后、且下一次 input 事件被触发前被调用。","$element.on('scroll:throttle(200)', onScroll);\n// 为 $element 添加一个 scroll 事件的监听器，该监听器可被连续调用的最短时间间隔为 200 毫秒。"],"isFunction":true,"category":"instance","name":"DOMEventTarget#on"},"DOMEvent#isImmediatePropagationStopped":{"description":"查询事件的传播是否已被立即阻止。","returns":[{"type":"boolean","description":"查询结果。"}],"type":"boolean","isFunction":true,"category":"instance","name":"DOMEvent#isImmediatePropagationStopped"},"navigator.languageCode":{"description":"浏览器的语言代码。","type":"string","isFunction":false,"category":"static","name":"navigator.languageCode"},"navigator.isOpera":{"description":"浏览器是否为 Opera。","type":"boolean","isFunction":false,"category":"static","name":"navigator.isOpera"},"Function":{"isFunction":true,"category":"constructor","name":"Function"},"Object.clone":{"parameters":[{"description":"原始对象。","type":"Object","name":"source","isOptional":false},{"description":"是否进行深克隆。","type":"boolean","name":"recursively","isOptional":true}],"description":"克隆一个对象。\n实例关系和原型链都不会被克隆。\n一些类型的值是无法被克隆的，当尝试克隆它们时，会抛出异常，它们是 (传入 typeOf 方法后返回的值)：\n<ul>\n<li>function</li>\n<li>object.Error</li>\n<li>object.Math</li>\n<li>object.JSON</li>\n<li>object.Arguments</li>\n<li>object.Global</li>\n<li>object.Node</li>\n<li>object.Collection</li>\n</ul>\n如果成功对一个对象进行深克隆，则对克隆对象的任何操作都不会影响原始对象。","returns":[{"type":"Object","description":"克隆对象。"}],"type":"Object","isFunction":true,"category":"static","name":"Object.clone"},"Element#hasClass":{"parameters":[{"description":"类名，如果要同时指定多个类名，使用逗号将它们分开即可。","type":"string","name":"className","isOptional":false}],"description":"检查本元素是否有指定的类名。","returns":[{"type":"boolean","description":"检查结果。"}],"type":"boolean","isFunction":true,"category":"instance","name":"Element#hasClass"},"JSEvent":{"parameters":[{"description":"事件类型。","type":"string","name":"type","isOptional":false},{"description":"触发本事件的对象。","type":"Object","name":"target","isOptional":false},{"description":"附加数据。","type":"Object","name":"data","isOptional":true}],"description":"事件对象。","isFunction":true,"category":"constructor","name":"JSEvent"},"Element#contains":{"parameters":[{"description":"目标元素。","type":"Element","name":"target","isOptional":false}],"description":"判断本元素是否包含目标元素。\n注意，如果本元素和目标元素一致，本方法也将返回 true。","returns":[{"type":"boolean","description":"判断结果。"}],"type":"boolean","isFunction":true,"category":"instance","name":"Element#contains"},"DOMEventTarget#off":{"parameters":[{"description":"监听器名称。\n本对象上添加的所有名称与 name 匹配的监听器都将被删除。\n使用逗号分割多个监听器名称，即可同时删除该对象上的多个监听器。","type":"string","name":"name","isOptional":false}],"description":"删除本对象上已添加的事件监听器。","returns":[{"type":"Object","description":"本对象。"}],"type":"Object","examples":["document.off('click');\n// 为 document 删除名为 click 的监听器。","$element.off('click:relay(a)');\n// 为 $element 删除名为 click:relay(a) 的监听器。"],"isFunction":true,"category":"instance","name":"DOMEventTarget#off"},"window.$":{"parameters":[{"description":"不同类型的元素表示。","type":"string|Element","name":"e","isOptional":false}],"description":"对 document.$ 的引用。\n在编写应用代码时，可以使用 $ 来代替 document.$。","returns":[{"type":"?Element","description":"扩展后的元素。"}],"type":"?Element","isFunction":true,"category":"static","name":"window.$"},"Boolean#toJSON":{"description":"将布尔值转换为 JSON 格式的字符串。","returns":[{"type":"string","description":"转换后的字符串。"}],"type":"string","isFunction":true,"category":"instance","name":"Boolean#toJSON"},"Animation#timePoint":{"description":"当前帧所处的时间点。","type":"number","isFunction":false,"category":"instance","name":"Animation#timePoint"},"Element#getLastChild":{"description":"获取本元素的最后一个子元素。","returns":[{"type":"?Element","description":"本元素的最后一个子元素。"}],"type":"?Element","isFunction":true,"category":"instance","name":"Element#getLastChild"},"JSEvent#type":{"description":"事件类型。","type":"string","isFunction":false,"category":"instance","name":"JSEvent#type"},"JSEventTarget#fire":{"parameters":[{"description":"事件类型。","type":"string","name":"type","isOptional":false},{"description":"在事件对象上附加的数据。","type":"Object","name":"data","isOptional":true}],"description":"触发本对象的某类事件。","returns":[{"type":"Object","description":"事件对象。"}],"type":"Object","isFunction":true,"category":"instance","name":"JSEventTarget#fire"},"Element#getChildren":{"description":"获取本元素的所有子元素。","returns":[{"type":"Array","description":"包含本元素的所有子元素的数组，数组内各元素的顺序为调用本方法时各元素在文档树中的顺序。"}],"type":"Array","isFunction":true,"category":"instance","name":"Element#getChildren"},"DOMEvent#leftButton":{"description":"事件发生时，鼠标左键是否被按下，仅在鼠标事件对象上有效。","type":"boolean","isFunction":false,"category":"instance","name":"DOMEvent#leftButton"},"Element#remove":{"parameters":[{"description":"是否保留本元素及后代元素上的所有事件监听器。","type":"boolean","name":"keepListeners","isOptional":true}],"description":"将本元素从文档树中删除。","returns":[{"type":"Element","description":"本元素。"}],"type":"Element","isFunction":true,"category":"instance","name":"Element#remove"},"document.findAll":{"parameters":[{"description":"选择符。","type":"string","name":"selector","isOptional":false}],"description":"在文档中根据指定的选择符查找符合条件的所有元素。","returns":[{"type":"Array","description":"包含查找到的元素的数组。\n如果没有找到任何元素，返回空数组。"}],"type":"Array","see":["http://www.w3.org/TR/selectors-api2/","https://github.com/jquery/sizzle/wiki/Sizzle-Home"],"isFunction":true,"category":"static","name":"document.findAll"},"navigator.isFirefox":{"description":"浏览器是否为 Firefox。","type":"boolean","isFunction":false,"category":"static","name":"navigator.isFirefox"},"String#dasherize":{"description":"以 dasherize 的形式重组字符串。","returns":[{"type":"string","description":"重组后的字符串。"}],"type":"string","examples":["'foo_bar'.dasherize();\n// 'foo-bar'\n'FooBar'.dasherize();\n// 'foo-bar'"],"isFunction":true,"category":"instance","name":"String#dasherize"},"JSON":{"description":"JSON 对象。","isFunction":false,"category":"static","name":"JSON"},"Element#setData":{"parameters":[{"description":"数据名，必须为 camel case 形式，并且只能包含英文字母。","type":"string","name":"key","isOptional":false},{"description":"数据值，必须为字符串。","type":"string","name":"value","isOptional":false}],"description":"向本元素中保存一条自定义数据。","returns":[{"type":"Element","description":"本元素。"}],"type":"Element","isFunction":true,"category":"instance","name":"Element#setData"},"String#clean":{"description":"合并字符串中的空白字符，并去掉首尾的空白字符。","returns":[{"type":"string","description":"清理后的字符串。"}],"type":"string","examples":["' a b  c   d    e     f      g       '.clean();\n// 'a b c d e f g'"],"isFunction":true,"category":"instance","name":"String#clean"},"Array":{"isFunction":true,"category":"constructor","name":"Array"},"JSEventTarget.create":{"parameters":[{"description":"目标对象。\n目标对象不应该是 window 对象、document 对象或 Element 的实例对象，因为这些对象是 DOMEventTarget 对象，使用的是 DOM 事件模型。","type":"Object","name":"target","isOptional":false}],"description":"让目标对象成为一个 JSEventTarget 对象，以具备处理事件的能力。\n* 目标对象将被添加实例属性 eventHandlers 用于保存处理事件所必需的数据。\n* 目标对象将被添加实例方法 on 用于添加事件监听器。\n* 目标对象将被添加实例方法 off 用于删除事件监听器。\n* 目标对象将被添加实例方法 fire 用于触发某类事件。","returns":[{"type":"Object","description":"目标对象。"}],"type":"Object","isFunction":true,"category":"static","name":"JSEventTarget.create"},"String#repeat":{"parameters":[{"description":"要重复的次数。","type":"number","name":"count","isOptional":false}],"description":"将字符串重复指定的次数。","returns":[{"type":"string","description":"重复指定次数后的字符串。"}],"type":"string","see":["http://wiki.ecmascript.org/doku.php?id=harmony:string.prototype.repeat"],"examples":["'*'.repeat(5);\n// '*****'"],"isFunction":true,"category":"instance","name":"String#repeat"},"navigator.isChrome":{"description":"浏览器是否为 Chrome。","type":"boolean","isFunction":false,"category":"static","name":"navigator.isChrome"},"JSON.stringify":{"parameters":[{"description":"要转换的 ECMAScript 值，通常是 Object 或 Array 类型，也可以是 String、Boolean、Number、Date 类型或者 null。","type":"*","name":"value","isOptional":false},{"description":"用来更改/过滤转换结果的函数或数组。\n<dl>\n<dt>如果是函数，则：</dt>\n<dd>\n该函数将在解析要转换的 ECMAScript 值中每一个键值对之前被调用，传入两个参数 key 和 value，并使用其返回值代替 value 进行转换。如果返回 undefined，则正在处理的这个键值对将被从转换结果中删除。\n该函数第一次被调用（如果要转换的 ECMAScript 值的类型是 String、Boolean、Number、Date 或为 null 时则是唯一一次被调用）时，传入的 key 是空字符串，value 是要转换的 ECMAScript 值。\n该函数被调用时 this 的值为当前传入的 key 和 value 所属的 ECMAScript 对象，可能为 Object 或 Array。\n</dd>\n<dt>如果是数组，则：</dt>\n<dd>\n该数组只能包含字符串，本方法会仅对 key 出现在数组中的部分进行转换。\n</dd>\n</dl>","type":"Function|Array","name":"replacer","isOptional":true},{"description":"为使 JSON 字符串更易读而将其换行，并在每行内容之前加入的前缀。\n如果是字符串，则直接加入这个字符串作为前缀。若字符串的长度超过 10，则仅保留前 10 个字符。\n如果是数字，则加入对应数目的空格符。若数字大于 10，则只使用 10 个空格符。\n如果未指定该值，或者该值为 '' 或小于 1 的数字，则 JSON 字符串不会换行。","type":"string|number","name":"space","isOptional":true}],"description":"将 ECMAScript 值转换为 JSON 格式的字符串。","returns":[{"type":"string","description":"转换后的字符串。"}],"type":"string","isFunction":true,"category":"static","name":"JSON.stringify"},"Object.fromQueryString":{"parameters":[{"description":"要转换的查询字符串。","type":"string","name":"string","isOptional":false},{"description":"转换时不使用 decodeURIComponent 解码。","type":"boolean","name":"dontDecode","isOptional":true}],"description":"将一个用于 HTTP 传输的查询字符串转换为对象。","returns":[{"type":"Object","description":"转换后的对象。"}],"type":"Object","examples":["Object.fromQueryString('c=&d=100&e=Composite%20Value&e=true');\n// {c: '', d: '100', e: ['Composite Value', 'true']}"],"isFunction":true,"category":"static","name":"Object.fromQueryString"},"Element#addClass":{"parameters":[{"description":"类名，如果要同时指定多个类名，使用逗号将它们分开即可。","type":"string","name":"className","isOptional":false}],"description":"为本元素添加指定的类名。","returns":[{"type":"Element","description":"本元素。"}],"type":"Element","isFunction":true,"category":"instance","name":"Element#addClass"},"DOMEvent#preventDefault":{"description":"阻止事件的默认行为。","isFunction":true,"category":"instance","name":"DOMEvent#preventDefault"},"Request#abort":{"description":"取消请求。\n仅在一次异步模式的请求正在进行时，调用本方法才有效。","returns":[{"type":"boolean","description":"本方法是否已被成功调用。"}],"type":"boolean","isFunction":true,"category":"instance","name":"Request#abort"},"document.loadScript":{"parameters":[{"description":"脚本文件的路径。","type":"string","name":"url","isOptional":false},{"description":"可选参数。","type":"Object","name":"options","isOptional":true},{"description":"脚本文件的字符集。","type":"string","name":"options.charset","isOptional":true},{"description":"加载完毕后的回调。\n该函数被调用时 this 的值为加载本脚本时创建的 SCRIPT 元素。","type":"Function","name":"options.onLoad","isOptional":true}],"description":"加载脚本。","isFunction":true,"category":"static","name":"document.loadScript"},"cookie.getItem":{"parameters":[{"description":"数据名。","type":"string","name":"key","isOptional":false}],"description":"从 cookie 中读取一条数据。","returns":[{"type":"?string","description":"数据值。\n如果指定的数据名不存在或无法访问，返回 null。"}],"type":"?string","isFunction":true,"category":"static","name":"cookie.getItem"},"document.preloadImages":{"parameters":[{"description":"包含需预加载的图片路径的数组。","type":"Array","name":"urlArray","isOptional":false},{"description":"每个图片加载完毕后的回调。\n该函数被调用时 this 的值为已完成加载的 IMG 元素。","type":"Function","name":"onLoad","isOptional":true}],"description":"预加载图片。","isFunction":true,"category":"static","name":"document.preloadImages"},"String#trim":{"description":"删除字符串两端的空白符。","returns":[{"type":"string","description":"删除两端的空白符后的字符串。"}],"type":"string","see":["http://blog.stevenlevithan.com/archives/faster-trim-javascript","http://es5.github.com/#x15.5.4.20"],"examples":["' hello  '.trim();\n// 'hello'"],"isFunction":true,"category":"instance","name":"String#trim"},"Array.isArray":{"parameters":[{"description":"提供的值。","type":"*","name":"value","isOptional":false}],"description":"检查提供的值是否为数组。","returns":[{"type":"boolean","description":"检查结果。"}],"type":"boolean","see":["http://es5.github.com/#x15.4.3.2","https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Array/isArray"],"examples":["Array.isArray([]);\n// true"],"isFunction":true,"category":"static","name":"Array.isArray"},"DOMEventTarget#fire":{"parameters":[{"description":"事件类型。","type":"string","name":"type","isOptional":false},{"description":"在事件对象上附加的数据。\ndata 的属性会被追加到事件对象中，但名称为 originalEvent、type、target 的属性除外。\n如果指定其 bubbles 属性为 true，则该事件将可以在文档树中传播。","type":"Object","name":"data","isOptional":true}],"description":"触发本对象的某类事件。\n通过调用本方法产生的事件对象不具备默认行为。\n如果需要执行此类事件的默认行为，可以直接在本对象上调用对应的方法（如 click、reset 等）。","returns":[{"type":"Object","description":"事件对象。"}],"type":"Object","isFunction":true,"category":"instance","name":"DOMEventTarget#fire"},"document.head":{"description":"获取文档的 HEAD 元素。","type":"Element","examples":["document.documentElement === document.getElementsByTagName('html')[0];\n// true\ndocument.head === document.getElementsByTagName('head')[0];\n// true\ndocument.body === document.getElementsByTagName('body')[0];\n// true"],"isFunction":false,"category":"static","name":"document.head"},"HTMLFormElement":{"description":"确保 HTMLFormElement.prototype 可访问。","isFunction":false,"category":"static","name":"HTMLFormElement"},"Array#every":{"parameters":[{"description":"用来检查的回调函数。\n回调函数有三个参数：当前元素，当前元素的索引和调用该方法的数组对象。\n回调函数返回 true 表示当前元素通过检查，反之表示未通过检查。","type":"Function","name":"callback","isOptional":false},{"description":"callback 被调用时 this 的值。","type":"Object","name":"thisArg","isOptional":true}],"description":"检查数组中的所有元素是否都符合某个条件。","returns":[{"type":"boolean","description":"检查结果。"}],"type":"boolean","see":["http://es5.github.com/#x15.4.4.16","https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Array/every"],"examples":["[1, 2, 3].every(function(item) {\n  return item < 5;\n});\n// true"],"isFunction":true,"category":"instance","name":"Array#every"},"navigator.userAgentInfo":{"description":"从 navigator.userAgent 中提取的常用信息。\n注意：navigator.userAgentInfo 下的三个属性是根据 navigator.userAgent 得到的，仅供参考，不建议作为逻辑判断的依据。","type":"Object","isFunction":false,"category":"static","name":"navigator.userAgentInfo"},"document":{"description":"扩展 document 对象。","isFunction":false,"category":"static","name":"document"},"JSON.parse":{"parameters":[{"description":"要转换的 JSON 格式的字符串。","type":"string","name":"text","isOptional":false},{"description":"用来过滤或更改转换结果的函数。\n该函数将在解析 text 中每一个键值对之后被调用，传入两个参数 key 和 value，并使用其返回值代替 value 作为最终值。如果返回 undefined，则正在处理的这个键值对将被从转换结果中删除。\n该函数最后一次被调用（如果 text 表示的是一个 String、Boolean、Number 类型的值或 null 时则是唯一一次被调用）时，传入的 key 是空字符串，value 是已从 text 转换到 ECMAScript 值的结果。\n该函数被调用时 this 的值为当前传入的 key 和 value 所属的 ECMAScript 对象，可能为 Object 或 Array。","type":"Function","name":"reviver","isOptional":true}],"description":"将 JSON 格式的字符串转换为 ECMAScript 值。","returns":[{"type":"*","description":"转换后的 ECMAScript 值。"}],"type":"*","isFunction":true,"category":"static","name":"JSON.parse"},"Object.keys":{"parameters":[{"description":"要获取键列表的对象。","type":"Object","name":"object","isOptional":false}],"description":"获取对象的键列表。","returns":[{"type":"Array","description":"对象的键列表。"}],"type":"Array","see":["http://es5.github.com/#x15.2.3.14","https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Object/keys","http://whattheheadsaid.com/2010/10/a-safer-object-keys-compatibility-implementation"],"examples":["Object.keys({a: 97, b: 98, c: 99});\n// ['a', 'b', 'c']"],"isFunction":true,"category":"static","name":"Object.keys"},"DOMEvent#target":{"description":"触发事件的对象。\n本属性的值也可能是 document 对象。","type":"Element","isFunction":false,"category":"instance","name":"DOMEvent#target"},"DOMEvent#timeStamp":{"description":"事件发生的时间。","type":"number","isFunction":false,"category":"instance","name":"DOMEvent#timeStamp"},"cookie.removeItem":{"parameters":[{"description":"数据名。","type":"string","name":"key","isOptional":false},{"description":"可选参数。","type":"Object","name":"options","isOptional":true},{"description":"限定生效的路径，默认为当前路径。","type":"string","name":"options.path","isOptional":true},{"description":"限定生效的域名，默认为当前域名。","type":"string","name":"options.domain","isOptional":true},{"description":"是否仅通过 SSL 连接 (HTTPS) 传输本条数据。","type":"boolean","name":"options.secure","isOptional":true}],"description":"从 cookie 中删除一条数据。","isFunction":true,"category":"static","name":"cookie.removeItem"},"Element#smoothScroll":{"parameters":[{"description":"横向滚动坐标，支持相对坐标，如 '+=10' 表示在现有横坐标的基础上向左滚动 10 像素，'-=10' 表示在现有横坐标的基础上向右滚动 10 像素。","type":"number","name":"x","isOptional":false},{"description":"纵向滚动坐标，支持相对坐标，如 '+=10' 表示在现有纵坐标的基础上向下滚动 10 像素，'-=10' 表示在现有纵坐标的基础上向上滚动 10 像素。","type":"number","name":"y","isOptional":false},{"description":"动画选项。","type":"Object","name":"options","isOptional":true},{"description":"播放时间，单位为毫秒，默认为 200。","type":"number","name":"options.duration","isOptional":true},{"description":"控速函数名称或表达式，细节请参考 Animation.prototype.addClip 的同名参数，默认为 'easeInOut'。","type":"string","name":"options.timingFunction","isOptional":true},{"description":"播放开始时的回调。\n该函数被调用时 this 的值为本元素。","type":"Function","name":"options.onStart","isOptional":true},{"description":"播放每一帧之后的回调。\n该函数被调用时 this 的值为本元素。","type":"Function","name":"options.onStep","isOptional":true},{"description":"播放完成时的回调。\n该函数被调用时 this 的值为本元素。","type":"Function","name":"options.onFinish","isOptional":true}],"description":"让本元素播放一个平滑滚动动画。\n如果本元素的动画播放列表中已经存在一个 smoothScroll 动画，则停止旧的，播放新的。\n如果在 HTML 或 BODY 元素上调用本方法，则滚动整个视口。","returns":[{"type":"Element","description":"本元素。"}],"type":"Element","isFunction":true,"category":"instance","name":"Element#smoothScroll"},"Date#toJSON":{"description":"将日期转换为 JSON 格式的字符串。","returns":[{"type":"string","description":"转换后的字符串。"}],"type":"string","isFunction":true,"category":"instance","name":"Date#toJSON"},"DOMEvent":{"parameters":[{"description":"事件类型。","type":"string","name":"type","isOptional":false},{"description":"原生事件对象。","type":"Object","name":"e","isOptional":false},{"description":"附加数据。","type":"Object","name":"data","isOptional":true}],"description":"事件对象。\n如果事件对象是通过调用 Element/document/window 的 fire 方法产生的，其除了 originalEvent、type 和 target 之外的其他属性值均可能会被重写。","isFunction":true,"category":"constructor","name":"DOMEvent"},"DOMEvent#wheelUp":{"description":"事件发生时鼠标滚轮是否正在向上滚动，仅在 mousewheel 类型的事件对象上有效。","type":"boolean","isFunction":false,"category":"instance","name":"DOMEvent#wheelUp"},"Animation":{"description":"动画。\n所有 Animation 的实例也都是一个 JSEventTarget 对象。\n* 向一个动画中添加多个剪辑，并调整每个剪辑的 delay，duration，timingFunction 参数，以实现复杂的动画。\n* 仅应在动画初始化时（播放之前）添加动画剪辑，不要在开始播放后添加或更改动画剪辑。\n* 不要在多个剪辑中变更同一个元素的样式。","fires":[{"description":"成功调用 play 方法后，正向播放开始前触发。","name":"play"},{"description":"正向播放开始前（渲染整个动画的第一帧之前）触发。","name":"playstart"},{"description":"正向播放结束后（渲染整个动画的最后一帧之后）触发。","name":"playfinish"},{"description":"成功调用 reverse 方法后，倒放开始前触发。","name":"reverse"},{"description":"倒放开始前（渲染整个动画的第一帧之前）触发。","name":"reversestart"},{"description":"倒放结束后（渲染整个动画的最后一帧之后）触发。","name":"reversefinish"},{"description":"渲染动画的每一帧之后触发。","name":"step"},{"description":"成功调用 pause 方法后触发。","name":"pause"}],"isFunction":true,"category":"constructor","name":"Animation"},"navigator":{"description":"扩展 navigator 对象，提供更多关于浏览器的信息。","isFunction":false,"category":"static","name":"navigator"},"Array#contains":{"parameters":[{"description":"指定的元素。","type":"*","name":"element","isOptional":false}],"description":"检查本数组中是否包含指定的元素。","returns":[{"type":"boolean","description":"检查结果。"}],"type":"boolean","examples":["[0, 1, 2, 3, 4].contains(2);\n// true"],"isFunction":true,"category":"instance","name":"Array#contains"},"navigator.isIElt8":{"description":"浏览器是否为 IE，且版本小于 8。","type":"boolean","isFunction":false,"category":"static","name":"navigator.isIElt8"},"localStorage.getItem":{"parameters":[{"description":"数据名。","type":"string","name":"key","isOptional":false}],"description":"从 localStorage 中读取一条数据。","returns":[{"type":"?string","description":"数据值。\n如果指定的数据名不存在，返回 null。"}],"type":"?string","isFunction":true,"category":"static","name":"localStorage.getItem"},"navigator.isIElt9":{"description":"浏览器是否为 IE，且版本小于 9。","type":"boolean","isFunction":false,"category":"static","name":"navigator.isIElt9"},"HTMLSelectElement":{"description":"确保 HTMLSelectElement.prototype 可访问。","isFunction":false,"category":"static","name":"HTMLSelectElement"},"cookie":{"description":"提供操作 cookie 的常用方法。","isFunction":false,"category":"static","name":"cookie"},"Element#highlight":{"parameters":[{"description":"高亮颜色，默认为 'yellow'。","type":"string","name":"color","isOptional":true},{"description":"高亮样式名，默认为 'backgroundColor'。","type":"string","name":"property","isOptional":true},{"description":"动画选项。","type":"Object","name":"options","isOptional":true},{"description":"播放时间，单位为毫秒，默认为 500。","type":"number","name":"options.duration","isOptional":true},{"description":"控速函数名称或表达式，细节请参考 Animation.prototype.addClip 的同名参数，默认为 'easeIn'。","type":"string","name":"options.timingFunction","isOptional":true},{"description":"播放开始时的回调。\n该函数被调用时 this 的值为本元素。","type":"Function","name":"options.onStart","isOptional":true},{"description":"播放每一帧之后的回调。\n该函数被调用时 this 的值为本元素。","type":"Function","name":"options.onStep","isOptional":true},{"description":"播放完成时的回调。\n该函数被调用时 this 的值为本元素。","type":"Function","name":"options.onFinish","isOptional":true}],"description":"让本元素播放一个高亮动画。\n如果本元素的动画播放列表中已经存在一个 highlight 动画，则停止旧的，播放新的。","returns":[{"type":"Element","description":"本元素。"}],"type":"Element","isFunction":true,"category":"instance","name":"Element#highlight"},"Function#bind":{"parameters":[{"description":"绑定到本函数的 this 的值。","type":"Object","name":"thisArg","isOptional":false},{"description":"绑定到本函数的第一个参数的值。","type":"*","name":"arg1","isOptional":true},{"description":"绑定到本函数的第二个参数的值。","type":"*","name":"arg2","isOptional":true},{"description":"绑定到本函数的第 n 个参数的值。","type":"*","name":"…","isOptional":true}],"description":"生成一个 this 及其参数均被绑定到指定的值的新函数。","returns":[{"type":"Function","description":"绑定后的新函数。"}],"type":"Function","see":["http://es5.github.com/#x15.3.4.5","https://developer.mozilla.org/en/docs/JavaScript/Reference/Global_Objects/Function/bind"],"examples":["var counter = {\n  symbol: '$',\n  count: function(rate, number) {\n    return this.symbol + rate * number;\n  }\n};\ncounter.count(0.157, 1000);\n// $157\nvar simplifiedCount = counter.count.bind({symbol: '￥'}, 6.362);\nsimplifiedCount(500);\n// ￥3181"],"isFunction":true,"category":"instance","name":"Function#bind"},"Number.toInteger":{"parameters":[{"description":"提供的值。","type":"*","name":"value","isOptional":false}],"description":"将提供的值转化为整数。","returns":[{"type":"number","description":"转化结果。"}],"type":"number","see":["http://wiki.ecmascript.org/doku.php?id=harmony:number.tointeger"],"examples":["Number.toInteger([10.75]);\n// 10\nNumber.toInteger('10px');\n// 0"],"isFunction":true,"category":"static","name":"Number.toInteger"},"Element#findAll":{"parameters":[{"description":"选择符。","type":"string","name":"selector","isOptional":false}],"description":"在本元素的后代元素中，根据指定的选择符查找符合条件的所有元素。","returns":[{"type":"Array","description":"包含查找到的元素的数组。\n如果没有找到任何元素，返回空数组。"}],"type":"Array","see":["http://www.w3.org/TR/selectors-api2/","https://github.com/jquery/sizzle/wiki/Sizzle-Home"],"isFunction":true,"category":"instance","name":"Element#findAll"}};