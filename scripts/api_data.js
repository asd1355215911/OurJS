var apiData = {"HTMLFormElement#getFieldValue":{"parameters":[{"description":"<p>域的名称。</p>","type":"string","name":"name","isOptional":false}],"description":"<p>获取本表单内某个域的当前值。</p><p>当该域只包含一个非 select-multiple 类型的控件时，如果具备有效值则返回该值，否则返回空字符串（将无效值与空字符串等同处理是为了降低后续处理的复杂度）。</p><p>其他情况（该域只包含一个 select-multiple 类型的控件或者多个任意类型的控件时）返回数组，值为空字符串的项不会被加入数组。</p>","returns":[{"type":"string|Array","description":"<p>域的当前值。</p>"}],"type":"string|Array","see":["http://www.w3.org/TR/REC-html40/interact/forms.html#successful-controls"],"isFunction":true,"category":"instance","name":"HTMLFormElement#getFieldValue"},"Element#cancelAnimation":{"parameters":[{"description":"<p>要取消的动画类型，如果要取消多种类型的动画，使用逗号将它们分开即可。</p><p>如果省略该参数，则取消本元素所有正在播放的动画。</p>","type":"string","name":"type","isOptional":true}],"description":"<p>取消本元素正在播放的动画。</p><p>对于 morph 类型的动画，会在当前帧停止。</p><p>对于 highlight 类型的动画，会恢复到动画播放前的状态。</p><p>对于 fade 类型的动画，会跳过补间帧直接完成显示/隐藏。</p><p>对于 smoothScroll 类型的动画，会立即停止滚动。</p>","returns":[{"type":"Element","description":"<p>本元素。</p>"}],"type":"Element","isFunction":true,"category":"instance","name":"Element#cancelAnimation"},"DOMEvent#isPropagationStopped":{"description":"<p>查询事件的传播是否已被阻止。</p>","returns":[{"type":"boolean","description":"<p>查询结果。</p>"}],"type":"boolean","isFunction":true,"category":"instance","name":"DOMEvent#isPropagationStopped"},"JSEventTarget":{"description":"<p>通过调用 new JSEventTarget() 获得的新对象，或经过 JSEventTarget.create(object) 处理后的 object 对象，都将具备处理事件的能力，它们都可以被叫做一个 JSEventTarget 对象。</p><p>JSEventTarget 对象在处理事件时，是工作在 JS 事件模型中的。</p><p>window、document 和 Element 对象也都具备处理事件的能力，但它们是工作在 DOM 事件模型中的。</p>","isFunction":true,"category":"constructor","name":"JSEventTarget"},"JSEventTarget#off":{"parameters":[{"description":"<p>监听器名称。</p><p>本对象上添加的所有名称与 name 匹配的监听器都将被删除。</p><p>使用逗号分割多个监听器名称，即可同时删除该对象上的多个监听器。</p>","type":"string","name":"name","isOptional":false}],"description":"<p>删除本对象上已添加的事件监听器。</p>","returns":[{"type":"Object","description":"<p>本对象。</p>"}],"type":"Object","isFunction":true,"category":"instance","name":"JSEventTarget#off"},"Dialog#reposition":{"description":"<p>调整“对话框”的位置。</p><p>如果“对话框”已经关闭，则调用本方法无效。</p>","returns":[{"type":"Element","description":"<p>本元素。</p>"}],"type":"Element","isFunction":true,"category":"instance","name":"Dialog#reposition"},"navigator.isIE10":{"description":"<p>浏览器是否为 IE10。</p>","type":"boolean","isFunction":false,"category":"static","name":"navigator.isIE10"},"Number.isNaN":{"parameters":[{"description":"<p>提供的值。</p>","type":"*","name":"value","isOptional":false}],"description":"<p>检查提供的值是否为非数字。</p>","returns":[{"type":"boolean","description":"<p>检查结果。</p>"}],"type":"boolean","see":["http://wiki.ecmascript.org/doku.php?id=harmony:number.isnan"],"examples":["isNaN(undefined);\r// true\rNumber.isNaN(undefined);\r// false"],"isFunction":true,"category":"static","name":"Number.isNaN"},"RegExp.escape":{"parameters":[{"description":"<p>要转义的字符串。</p>","type":"string","name":"string","isOptional":false}],"description":"<p>转义字符串中包含的正则表达式元字符。</p><p>转以后的字符串可以安全的作为正则表达式的一部分使用。</p>","returns":[{"type":"string","description":"<p>转义后的字符串。</p>"}],"type":"string","see":["http://prototypejs.org/"],"isFunction":true,"category":"static","name":"RegExp.escape"},"Object":{"description":"<p></p>","isFunction":true,"category":"constructor","name":"Object"},"Global":{"description":"<p>全局对象。</p>","isFunction":false,"category":"static","name":"Global"},"Calendar#update":{"parameters":[{"description":"<p>月份，格式为 YYYY-MM 的字符串。</p><p>如果该参数被省略，则使用本元素的 month 属性的值代替。</p>","type":"string","name":"month","isOptional":true}],"description":"<p>显示或刷新指定月份的日期排列情况。</p>","returns":[{"type":"Element","description":"<p>本元素。</p>"}],"type":"Element","isFunction":true,"category":"instance","name":"Calendar#update"},"DOMEvent#stopPropagation":{"description":"<p>阻止事件的传播。</p>","isFunction":true,"category":"instance","name":"DOMEvent#stopPropagation"},"Slideshow#pointers":{"description":"<p>包含所有“指示器”元素的数组。</p>","type":"Array","isFunction":false,"category":"instance","name":"Slideshow#pointers"},"DOMEvent#clientX":{"description":"<p>事件发生时鼠标在视口中的 X 坐标，仅在鼠标事件对象上有效。</p>","type":"number","isFunction":false,"category":"instance","name":"DOMEvent#clientX"},"DOMEvent#clientY":{"description":"<p>事件发生时鼠标在视口中的 Y 坐标，仅在鼠标事件对象上有效。</p>","type":"number","isFunction":false,"category":"instance","name":"DOMEvent#clientY"},"DOMEvent#ctrlKey":{"description":"<p>事件发生时，ctrl 键是否被按下。</p>","type":"boolean","isFunction":false,"category":"instance","name":"DOMEvent#ctrlKey"},"Element#insertAdjacentText":{"parameters":[{"description":"<p>要插入的位置，可选值请参考下表。</p><table><tr><th>可选值</th><th>含义</th></tr><tr><td><dfn>beforeBegin</dfn></td><td>将文本插入到本元素之前。</td></tr><tr><td><dfn>afterBegin</dfn></td><td>将文本插入到本元素的所有内容之前。</td></tr><tr><td><dfn>beforeEnd</dfn></td><td>将文本插入到本元素的所有内容之后。</td></tr><tr><td><dfn>afterEnd</dfn></td><td>将文本插入到本元素之后。</td></tr></table>","type":"string","name":"position","isOptional":false},{"description":"<p>要插入的文本。</p>","type":"Element","name":"text","isOptional":false}],"description":"<p>在本元素的指定位置插入文本。</p>","isFunction":true,"category":"instance","name":"Element#insertAdjacentText"},"Animation#pause":{"description":"<p>暂停动画。</p><p>仅在动画处于“播放”或“倒放”状态时，调用本方法才有效。</p>","returns":[{"type":"boolean","description":"<p>本方法是否已被成功调用。</p>"}],"type":"boolean","isFunction":true,"category":"instance","name":"Animation#pause"},"localStorage.removeItem":{"parameters":[{"description":"<p>数据名。</p>","type":"string","name":"key","isOptional":false}],"description":"<p>从 localStorage 中删除一条数据。</p>","isFunction":true,"category":"static","name":"localStorage.removeItem"},"String#startsWith":{"parameters":[{"description":"<p>指定的子串。</p>","type":"string","name":"substring","isOptional":false}],"description":"<p>检查字符串是否以指定的子串开始。</p>","returns":[{"type":"boolean","description":"<p>检查结果。</p>"}],"type":"boolean","see":["http://wiki.ecmascript.org/doku.php?id=harmony:string_extras"],"examples":["'abcdefg'.startsWith('a');\r// true"],"isFunction":true,"category":"instance","name":"String#startsWith"},"Array#forEach":{"parameters":[{"description":"<p>对数组中的每个元素都调用一次的回调函数。</p><p>回调函数有三个参数：当前元素，当前元素的索引和调用该方法的数组对象。</p>","type":"Function","name":"callback","isOptional":false},{"description":"<p>callback 被调用时 this 的值，如果省略或指定为 null，则使用全局对象 window。</p>","type":"Object","name":"thisObject","isOptional":true}],"description":"<p>遍历数组，对数组中的每一个元素都调用一次指定的函数。</p>","see":["http://es5.github.com/#x15.4.4.18","https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/array/forEach"],"examples":["var s = '';\r[1, 2, 3].forEach(function(item) {\r  s += item;\r});\rs;\r// 123"],"isFunction":true,"category":"instance","name":"Array#forEach"},"Autocue":{"description":"<p>“自动提词机”会以滚动字幕的形式展示“信息队列”中的信息。</p><p>启用方式</p><p>为一个 DIV 元素添加 'widget-autocue' 类，即可使该元素成为“自动提词机”。</p><p>结构约定</p><p>当“自动提词机”初始化时，会自动在其内部创建一个 UL 和多个 LI 元素（数量取决于 data-visible-items 的设置），其中每一个 LI 元素都会用来容纳一条信息。</p><p>新增行为</p><p>* 可以随时通过调用 addMessages 方法来添加要展示的信息，信息会保存在“信息队列”中。</p><p>当“信息队列”的长度超过 data-cache-size 的值时，已展示过的信息将被从队列中删除（尚未展示过的信息不会被删除）。</p><p>* 每隔一定的时间（取决于 data-interval 的设定值），“自动提词机”都会纵向滚动其信息内容，以展示“信息队列”中的下一条信息。</p><p>当鼠标移入本元素时，会暂时停止信息的滚动；当鼠标移出本元素时，会重新开始信息的滚动。</p><p>默认样式</p><p>div.widget-autocue { position: relative; overflow: hidden; }</p><p>div.widget-autocue ul { position: absolute; left: 0; top: 0; list-style: none; margin: 0; padding: 0; }</p><p>可配置项</p><p>data-cache-size</p><p>缓存信息的总条目数。</p><p>如果不指定本属性，则使用 10 作为默认值。</p><p>data-interval</p><p>以毫秒为单位的信息自动滚动间隔时间。</p><p>如果不指定本属性，则使用 5000 作为默认值。</p><p>data-direction</p><p>滚动方向，有效值为 'up' 和 'down'。</p><p>如果不指定本属性，则使用 'up' 作为默认值。</p><p>data-visible-items</p><p>同时展示的信息条目数。</p><p>如果不指定本属性，则使用 1 作为默认值。</p>","fires":[{"description":"<p>调用 addMessages 方法后触发。</p>","name":"addmessages"}],"isFunction":true,"category":"constructor","name":"Autocue"},"Number.isFinite":{"parameters":[{"description":"<p>提供的值。</p>","type":"*","name":"value","isOptional":false}],"description":"<p>检查提供的值是否为有限的数字。</p>","returns":[{"type":"boolean","description":"<p>检查结果。</p>"}],"type":"boolean","see":["http://wiki.ecmascript.org/doku.php?id=harmony:number.isfinite"],"examples":["isFinite(null);\r// true\rNumber.isFinite(null);\r// false"],"isFunction":true,"category":"static","name":"Number.isFinite"},"DOMEvent#pageX":{"description":"<p>事件发生时鼠标在页面中的 X 坐标，仅在鼠标事件对象上有效。</p>","type":"number","isFunction":false,"category":"instance","name":"DOMEvent#pageX"},"ScrollBox":{"description":"<p>“滚动框”可以为其“内容区域”添加可自定义样式的“轨道”及“滚动条”（仅支持纵向滚动）。</p><strong>启用方式：</strong><p>为一个 DIV 元素添加 'widget-scrollbox' 类，即可使该元素成为“滚动框”。</p><strong>结构约定：</strong><ul><li>“滚动框”必须包含一个子元素作为“内容区域”。该元素必须是块级元素，其 width、height、margin、padding、border-width、overflow 的设置都将被忽略并重置为特定的值。</li><li>当“滚动框”初始化时，会在其内部自动创建“轨道” 'div.track'，并在“轨道”内创建“滚动条” 'div.scrollbar'。<br>为便于定制“滚动条”的样式，在“滚动条”内还创建了三个元素 'div.top'，'div.middle' 和 'div.bottom'。</li></ul><strong>新增行为：</strong><ul><li>点击“轨道”或拖动“滚动条”时，“内容区域”将滚动到相应位置。<br>通过按下导航键或调用脚本等方式使“内容区域”滚动时，“滚动条”的位置也将随之改变。</li><li>如果“滚动框”在文档可用后即被解析完毕，并且“滚动框”是可见的，则“滚动条”的位置及高度会被自动更新。</li><li>如果“内容区域”不需要滚动即可完全显示，则“滚动条”将被隐藏。</li><li>当鼠标移入“滚动条”时，“滚动条”将被添加类名 'hover'，该类名将在鼠标移出时被移除。<br>当开始拖动“滚动条”时，“滚动条”将被添加类名 'active'，该类名将在拖动结束时被移除。</li></ul><strong>默认样式：</strong><pre class=\"lang-css\"><p>div.widget-scrollbox { visibility: hidden; position: relative; overflow: hidden; }</p><p>div.widget-scrollbox .track { position: absolute; right: 0; top: 0; z-index: 100000; width: 10px; background: whitesmoke; cursor: default; }</p><p>div.widget-scrollbox .track div { overflow: hidden; }</p><p>div.widget-scrollbox .track .scrollbar { position: absolute; left: 0; top: 0; width: 10px; background: silver; }</p><p>div.widget-scrollbox .track .hover { background: darkgray; }</p><p>div.widget-scrollbox .track .active { background: gray; }</p></pre><p>可配置项</p><p>data-content-shrink</p><p>“内容区域”右侧与“滚动框”右侧的间距，单位为像素。</p><p>如果不指定本属性，则使用“轨道”的宽度作为默认值。</p><p>data-scrollbar-min-height</p><p>“滚动条”的最小高度，单位为像素。</p><p>如果不指定本属性，则使用 20 作为默认值。</p>","fires":[{"description":"<p>调用 update 方法后触发。</p>","name":"update"}],"isFunction":true,"category":"constructor","name":"ScrollBox"},"DOMEvent#pageY":{"description":"<p>事件发生时鼠标在页面中的 Y 坐标，仅在鼠标事件对象上有效。</p>","type":"number","isFunction":false,"category":"instance","name":"DOMEvent#pageY"},"DOMEvent#metaKey":{"description":"<p>事件发生时，meta 键是否被按下。</p>","type":"boolean","isFunction":false,"category":"instance","name":"DOMEvent#metaKey"},"Autocue#addMessages":{"parameters":[{"description":"<p>包含新信息的数组。</p>","type":"Array","name":"newMessages","isOptional":false}],"description":"<p>添加新信息到“信息队列”。</p><p>如果当前的“信息队列”中包含了某条新信息，则这条新信息不会被再次添加到“信息队列”中。</p>","returns":[{"type":"Element","description":"<p>本元素。</p>"}],"type":"Element","isFunction":true,"category":"instance","name":"Autocue#addMessages"},"cookie.setItem":{"parameters":[{"description":"<p>数据名。</p>","type":"string","name":"key","isOptional":false},{"description":"<p>数据值。</p>","type":"string","name":"value","isOptional":false},{"description":"<p>可选参数。</p>","type":"Object","name":"options","isOptional":true},{"description":"<p>限定生效的路径，默认为当前路径。</p>","type":"string","name":"options.path","isOptional":true},{"description":"<p>限定生效的域名，默认为当前域名。</p>","type":"string","name":"options.domain","isOptional":true},{"description":"<p>是否仅通过 SSL 连接 (HTTPS) 传输本条数据，默认为否。</p>","type":"boolean","name":"options.secure","isOptional":true},{"description":"<p>过期时间，默认为会话结束。</p><p>如果使用字符串类型，其表示时间的格式应为 'YYYY-MM-DD hh:mm:ss'。</p>","type":"string|Date","name":"options.expires","isOptional":true}],"description":"<p>在 cookie 中保存一条数据。</p>","isFunction":true,"category":"static","name":"cookie.setItem"},"Array#getLast":{"description":"<p>获取本数组的最后一个元素。</p>","returns":[{"type":"*","description":"<p>本数组的最后一个元素。</p>"}],"type":"*","examples":["[0, 1, 2, 3, 4].getLast();\r// 4"],"isFunction":true,"category":"instance","name":"Array#getLast"},"Request#send":{"parameters":[{"description":"<p>要发送的数据。</p><p>数据格式为 {key1: value1, key2: [value21, value22, ...], ...}，其中所有 value 都可以为任意基本类型的数据（在发送时它们都将被强制转换为字符串类型），另外 key 和 value 均不必做百分比编码。</p><p>本方法的参数不允许使用字符串类型的数据，因为无法判断指定的字符串值是否需要做百分比编码。</p>","type":"Object","name":"requestData","isOptional":true}],"description":"<p>发送请求。</p><p>如果上一次发送的请求尚未完成，则调用本方法无效。</p>","returns":[{"type":"boolean","description":"<p>本方法是否已被成功调用。</p>"}],"type":"boolean","isFunction":true,"category":"instance","name":"Request#send"},"JSEvent#target":{"description":"<p>触发事件的对象。</p>","type":"Object","isFunction":false,"category":"instance","name":"JSEvent#target"},"TabPanel#activePanel":{"description":"<p>当前被激活的“面板”。</p>","type":"Element","isFunction":false,"category":"instance","name":"TabPanel#activePanel"},"Element#morph":{"parameters":[{"description":"<p>目标样式，元素将向指定的目标样式渐变。目标样式包含一条或多条要设置的样式声明，与 setStyles 的参数的差异如下：</p><p>1. 不能使用复合属性。</p><p>2. lineHeight 仅支持 'px' 单位的长度设置，而不支持数字。</p><p>3. 支持相对长度，如 '+=10' 表示在现有长度的基础上增加 10 像素，'-=10' 表示在现有长度的基础上减少 10 像素。</p>","type":"Object","name":"styles","isOptional":false},{"description":"<p>动画选项。</p>","type":"Object","name":"options","isOptional":true},{"description":"<p>播放时间，单位为毫秒，默认为 400。</p>","type":"number","name":"options.duration","isOptional":true},{"description":"<p>控速函数名称或表达式，细节请参考 Animation.prototype.addClip 的同名参数，默认为 'ease'。</p>","type":"string","name":"options.timingFunction","isOptional":true},{"description":"<p>播放开始时的回调。</p><p>该函数被调用时 this 的值为本元素。</p>","type":"Function","name":"options.onStart","isOptional":true},{"description":"<p>播放每一帧之后的回调。</p><p>该函数被调用时 this 的值为本元素。</p>","type":"Function","name":"options.onStep","isOptional":true},{"description":"<p>播放完成时的回调。</p><p>该函数被调用时 this 的值为本元素。</p>","type":"Function","name":"options.onFinish","isOptional":true}],"description":"<p>让本元素播放一个渐变动画。</p><p>如果本元素的动画播放列表中已经存在一个 morph 动画，则停止旧的，播放新的。</p>","returns":[{"type":"Element","description":"<p>本元素。</p>"}],"type":"Element","isFunction":true,"category":"instance","name":"Element#morph"},"Global.execScript":{"parameters":[{"description":"<p>要执行的代码。</p>","type":"string","name":"code","isOptional":false}],"description":"<p>将字符串作为脚本执行，执行时的作用域为全局作用域。</p>","see":["http://w3help.org/zh-cn/causes/BX9056"],"examples":["var a;\rexecScript('a = 128 * 2 + 256;');\ra;\r// 512"],"isFunction":true,"category":"static","name":"Global.execScript"},"Element#getFirstChild":{"description":"<p>获取本元素的第一个子元素。</p>","returns":[{"type":"Element","description":"<p>本元素的第一个子元素。</p>"}],"type":"Element","isFunction":true,"category":"instance","name":"Element#getFirstChild"},"navigator.isIE6":{"description":"<p>浏览器是否为 IE6。</p>","type":"boolean","isFunction":false,"category":"static","name":"navigator.isIE6"},"navigator.isIE7":{"description":"<p>浏览器是否为 IE7。</p>","type":"boolean","isFunction":false,"category":"static","name":"navigator.isIE7"},"navigator.isIE8":{"description":"<p>浏览器是否为 IE8。</p>","type":"boolean","isFunction":false,"category":"static","name":"navigator.isIE8"},"Element#insertTo":{"parameters":[{"description":"<p>目标元素。</p>","type":"Element","name":"target","isOptional":false},{"description":"<p>要插入的位置，可选值请参考下表。</p><table><tr><th>可选值</th><th>含义</th></tr><tr><td><dfn>beforeBegin</dfn></td><td>将本元素插入到目标元素之前。</td></tr><tr><td><dfn>afterBegin</dfn></td><td>将本元素插入到目标元素的所有内容之前。</td></tr><tr><td><dfn>beforeEnd</dfn></td><td>将本元素插入到目标元素的所有内容之后。</td></tr><tr><td><dfn>afterEnd</dfn></td><td>将本元素插入到目标元素之后。</td></tr></table><p>如果该参数被省略，则使用 <dfn>beforeEnd</dfn> 作为默认值。</p>","type":"string","name":"position","isOptional":true}],"description":"<p>将本元素插入到目标元素的指定位置。</p>","returns":[{"type":"Element","description":"<p>本元素。</p>"}],"type":"Element","isFunction":true,"category":"instance","name":"Element#insertTo"},"Animation#reverse":{"description":"<p>倒放动画。</p><p>如果当前动画正在倒放中，或时间点已到达起点，则调用本方法无效。</p>","returns":[{"type":"boolean","description":"<p>本方法是否已被成功调用。</p>"}],"type":"boolean","isFunction":true,"category":"instance","name":"Animation#reverse"},"navigator.isIE9":{"description":"<p>浏览器是否为 IE9。</p>","type":"boolean","isFunction":false,"category":"static","name":"navigator.isIE9"},"Animation.createStyleRenderer":{"parameters":[{"description":"<p>要实施渐变效果的元素。</p>","type":"Element","name":"element","isOptional":false},{"description":"<p>要实施渐变效果的样式。支持相对长度值和颜色值，其中相对长度值目前仅支持像素单位，颜色值支持 140 个颜色名称、#RRGGBB 格式、#RGB 格式或 rgb(R, G, B) 格式。</p>","type":"Object","name":"styles","isOptional":false}],"description":"<p>创建样式渐变效果渲染器。</p>","returns":[{"type":"Function","description":"<p>生成的渲染器。</p>"}],"type":"Function","isFunction":true,"category":"static","name":"Animation.createStyleRenderer"},"RegExp":{"description":"<p></p>","isFunction":true,"category":"constructor","name":"RegExp"},"document.$":{"parameters":[{"description":"<p>不同类型的元素表示。</p>","type":"string|Element","name":"e","isOptional":false}],"description":"<p>根据指定的参数获取/创建一个元素，并对其进行扩展。</p><ul><li>当参数为一个元素（可以包含后代元素）的序列化之后的字符串时，会返回扩展后的、根据这个字符串反序列化的元素。<br>注意：不要使用本方法创建 SCRIPT 元素，对于动态载入外部脚本文件的需求，应使用 document.loadScript 方法。</li><li>当参数为一个 CSS 选择符时，会返回扩展后的、与指定的 CSS 选择符相匹配的<strong>第一个元素</strong>。<br>如果没有找到任何元素，返回 null。</li><li>当参数为一个元素时，会返回扩展后的该元素。</li><li>当参数为其他值（包括 document 和 window）时，均返回 null。</li></ul>","returns":[{"type":"Element","description":"<p>扩展后的元素。</p>"}],"type":"Element","see":["http://jquery.com/","http://mootools.net/","http://w3help.org/zh-cn/causes/SD9003"],"isFunction":true,"category":"static","name":"document.$"},"DOMEvent#screenX":{"description":"<p>事件发生时鼠标在屏幕上的 X 坐标，仅在鼠标事件对象上有效。</p>","type":"number","isFunction":false,"category":"instance","name":"DOMEvent#screenX"},"DOMEvent#screenY":{"description":"<p>事件发生时鼠标在屏幕上的 Y 坐标，仅在鼠标事件对象上有效。</p>","type":"number","isFunction":false,"category":"instance","name":"DOMEvent#screenY"},"Date.parseExact":{"parameters":[{"description":"<p>代表日期的字符串，该字符串应该能够通过 Date.prototype.format 生成。</p><p>日期字符串中缺失的部分将使用默认值代替，各部分的默认值如下：</p><table><tr><th>日期字段</th><th>默认值</th></tr><tr><td>年</td><td>当前年份</td></tr><tr><td>月</td><td>1</td></tr><tr><td>日</td><td>1</td></tr><tr><td>时</td><td>0</td></tr><tr><td>分</td><td>0</td></tr><tr><td>秒</td><td>0</td></tr><tr><td>毫秒</td><td>0</td></tr><tr><td>时区</td><td>当地时区</td></tr></table><p>注意：未检查字符串内包含数据的有效性，若数据异常，将得不到预期的日期值。</p>","type":"string","name":"string","isOptional":false},{"description":"<p>由代表日期字段的标识符和其他字符组成的格式字符串，默认为 'YYYY-MM-DD'。格式请参考 Date.prototype.format 的同名参数。</p>","type":"string","name":"format","isOptional":true},{"description":"<p>字符串是否为世界标准时间。</p><p>当 isUTC 与 string 中已存在的 TZD 标识冲突时，isUTC 将被忽略。</p>","type":"boolean","name":"isUTC","isOptional":true}],"description":"<p>将以指定格式表示日期的字符串转换为日期对象。</p>","returns":[{"type":"Date","description":"<p>转换后的日期对象。</p>"}],"type":"Date","examples":["Date.parseExact('2012-06-25 12:00:00', 'YYYY-MM-DD hh:mm:ss')\r// 各浏览器中日期的字符串形式略有差异。\r// \"Mon Jun 25 2012 12:00:00 GMT+0800\"\rDate.parseExact('2012-12-21T23:14:35.000+08:00', 'YYYY-MM-DDThh:mm:ss.sTZD', true).format('世界标准时间YYYY年MM月DD日hh点mm分ss秒', true)\r// \"世界标准时间2012年12月21日15点14分35秒\"\rDate.parseExact('02-29 16:00', 'MM-DD hh:mm')\r// 年份缺失，使用默认值代替。\r// \"Wed Feb 29 2012 16:00:00 GMT+0800\""],"isFunction":true,"category":"static","name":"Date.parseExact"},"localStorage":{"description":"<p>为不支持 localStorage 的浏览器提供类似的功能。</p><p>在不支持 localStorage 的浏览器中，会使用路径 '/favicon.ico' 来创建启用 userData 的元素。应保证上述路径存在，以免出现预料外的异常。</p><p>userData 的尺寸限制为每文件 128KB，每域 1024KB；受限站点每文件 64KB，每域 640KB。</p>","isFunction":false,"category":"static","name":"localStorage"},"Global.typeOf":{"parameters":[{"description":"<p>要判断的值。</p>","type":"*","name":"value","isOptional":false}],"description":"<p>判断提供的值的数据类型，比 typeof 运算符返回的结果更明确（将对结果为 'object' 的情况进行更细致的区分）。</p><p>特殊情况：</p><p>一些特殊的对象，如 IE7 IE8 中的 XMLHttpRequest，是作为构造函数使用的，但使用本方法将得到 'object.Object' 的结果。考虑到需要判断这类对象的情况极为少见，因此未作处理。</p><p>IE6 IE7 IE8 IE9 IE10 中 SELECT.options === SELECT 为 true，因此 SELECT.options 将得到 'object.Node'，而不是预期的 'object.Collection'。</p><p>IE6 IE7 IE8 中在试图访问某些对象提供的属性/方法时，如 new ActiveXObject('Microsoft.XMLHTTP').abort，将抛出“对象不支持此属性或方法”的异常，因此也无法使用本方法对其进行判断。但可以对其使用 typeof 运算符并得到结果 'unknown'。</p>","returns":[{"type":"string","description":"<p>值的类型，可能为以下几种情况之一：</p><p>undefined</p><p>boolean</p><p>number</p><p>string</p><p>function</p><p>null</p><p>object.Boolean</p><p>object.Number</p><p>object.String</p><p>object.Array</p><p>object.Date</p><p>object.RegExp</p><p>object.Error</p><p>object.Math</p><p>object.JSON</p><p>object.Arguments</p><p>object.Global</p><p>object.Node</p><p>object.Collection</p><p>object.Object</p>"}],"type":"string","see":["http://mootools.net/","http://jquery.com/"],"examples":["typeOf(document);\r// 'object.Node'"],"isFunction":true,"category":"static","name":"Global.typeOf"},"Calendar#month":{"description":"<p>当前显示的月份。</p>","type":"string","isFunction":false,"category":"instance","name":"Calendar#month"},"Array#shuffle":{"description":"<p>随机排序本数组中的各元素。</p>","returns":[{"type":"Array","description":"<p>随机排序后的本数组。</p>"}],"type":"Array","see":["http://bost.ocks.org/mike/shuffle/"],"examples":["[0, 1, 2, 3, 4].shuffle();\r// [4, 0, 2, 1, 3]"],"isFunction":true,"category":"instance","name":"Array#shuffle"},"Element#getClientRect":{"description":"<p>获取本元素的 border-box 在视口中的坐标信息。</p>","returns":[{"type":"Object","description":"<p>包含位置（left、right、top、bottom）及尺寸（width、height）的对象，所有属性值均为 number 类型，单位为像素。</p>"}],"type":"Object","isFunction":true,"category":"instance","name":"Element#getClientRect"},"Element#getStyles":{"parameters":[{"description":"<p>指定要获取的特性名，可以为任意个。</p>","type":"Array","name":"propertyNames","isOptional":false}],"description":"<p>获取本元素的“计算后的样式”中一组特性的值。</p>","returns":[{"type":"Object","description":"<p>包含一组特性值的，格式为 {propertyName: propertyValue, ...} 的对象。</p>"}],"type":"Object","isFunction":true,"category":"instance","name":"Element#getStyles"},"document.addStyleRules":{"parameters":[{"description":"<p>包含样式规则的数组，其中每一项为一条规则。</p>","type":"Array","name":"rules","isOptional":false}],"description":"<p>添加样式规则。</p>","isFunction":true,"category":"static","name":"document.addStyleRules"},"localStorage.setItem":{"parameters":[{"description":"<p>数据名，不能为空字符串。</p>","type":"string","name":"key","isOptional":false},{"description":"<p>数据值。</p>","type":"string","name":"value","isOptional":false}],"description":"<p>在 localStorage 中保存一条数据。</p><p>注意：与原生的 localStorage 不同，IE6 IE7 的实现不允许 `~!@#$%^&*() 等符号出现在 key 中，可以使用 . 和 _ 符号，但不能以 . 和数字开头。</p>","isFunction":true,"category":"static","name":"localStorage.setItem"},"console":{"description":"<p>控制台对象。</p>","isFunction":false,"category":"static","name":"console"},"Dialog":{"description":"<p>“模态对话框”（以下简称为“对话框”）可以突出显示一部分内容并遮盖其余内容，以强制用户对突出显示的部分进行操作。</p><strong>启用方式：</strong><p>为一个 DIV 元素添加 'widget-dialog' 类，即可使该元素成为“对话框”。</p><strong>结构约定：</strong><ul><li>“对话框”的一些数据保存在其父元素中，因此不要修改“对话框”在文档树中的位置。<br>“对话框”的父元素一定要创建 stacking context，必要时会自动将其父元素的 position 设置为 'relative'。<br>如果“对话框”的父元素不是 BODY，应避免其父元素出现滚动条，以免“对话框”和“遮盖层”随其父元素的内容一起滚动。</li><li>“对话框”的 position 在其“定位参考元素”为 BODY 时将被设置为 'fixed'，其余情况均会被设置为 'absolute'。<br>“对话框”的 z-index 值会被自动指定。</li><li>“对话框”的后代元素中，类名包含 'close' 的为“关闭按钮”。<br>“关闭按钮”是可选的。</li></ul><strong>新增行为：</strong><ul><li>“对话框”的默认状态为关闭。</li><li>当“对话框”打开时，会根据其“定位参考元素”及定位偏移量的设置来确定其显示的位置。同时，还将自动生成一个“遮盖层”，“遮盖层”遮盖的范围为“对话框”的父元素的渲染范围，当前打开的“对话框”会在“遮盖层”上方显示，被遮盖的部分将无法使用键盘或鼠标进行操作。</li><li>当多个“对话框”有相同的父元素时，则视这些“对话框”为一组，一组“对话框”可以重叠显示。<br>当一组“对话框”重叠显示时，“遮盖层”只有一个，只有最后打开的“对话框”才不会被遮盖。</li><li>通过点击“关闭按钮”（如果有）即可关闭“对话框”。在“关闭按钮”上发生的 click 事件的默认行为将被阻止。</li></ul><strong>默认样式：</strong><pre class=\"lang-css\"><p>div.widget-overlay { display: none; left: 0; top: 0; background-color: black; opacity: 0.2; filter: alpha(opacity=20); }</p><p>div.widget-dialog { display: none; outline: none; }</p></pre><p>可配置项</p><p>data-pinned-target</p><p>“对话框”的“定位参考元素”的 id。</p><p>如果不指定本属性，则以父元素作为“定位参考元素”。</p><p>“定位参考元素”只能是“对话框”的父元素或其父元素的后代元素，且不能是“对话框”自身。</p><p>data-left</p><p>“对话框”的左边与其“定位参考元素”的左边的横向差值，单位为像素。</p><p>data-right</p><p>“对话框”的右边与其“定位参考元素”的右边的横向差值，单位为像素。</p><p>如果已指定 data-left， 本属性将被忽略。</p><p>如果 data-left 和本属性均未指定，“对话框”的中心点在横向将与其“定位参考元素”的中心点对齐。</p><p>data-top</p><p>“对话框”的顶边与其“定位参考元素”的顶边的纵向差值，单位为像素。</p><p>data-bottom</p><p>“对话框”的底边与其“定位参考元素”的底边的纵向差值，单位为像素。</p><p>如果已指定 data-top， 本属性将被忽略。</p><p>如果 data-top 和本属性均未指定，“对话框”的中心点在纵向将与其“定位参考元素”的中心点对齐。</p><p>data-animation</p><p>打开和关闭“对话框”时使用的动画效果，可选项有 'none'，'fade' 和 'slide'。</p><p>如果不指定本属性或指定为 'none'，则关闭动画效果。</p><p>在 IE6 下本属性无效（不能启用动画效果）。</p>","fires":[{"description":"<p>成功调用 open 方法后触发。</p>","name":"open"},{"description":"<p>成功调用 close 方法后触发。</p>","name":"close"},{"description":"<p>成功调用 reposition 方法后触发。</p>","name":"reposition"}],"isFunction":true,"category":"constructor","name":"Dialog"},"Element":{"description":"<p>确保 Element.prototype 可访问。</p>","isFunction":false,"category":"static","name":"Element"},"DOMEvent#stopImmediatePropagation":{"description":"<p>立即阻止事件的传播，被立即阻止传播的事件也不会在当前的对象上被分发到其他的监听器。</p>","isFunction":true,"category":"instance","name":"DOMEvent#stopImmediatePropagation"},"Animation.fps":{"description":"<p>指定动画引擎播放动画时的每秒帧数。</p><p>应指定 10 到 60 之间的数字，默认为 60。</p><p>仅在对性能敏感的环境下，才需要降低这个数值。过低的 fps 将导致动画播放不流畅。</p>","type":"number","isFunction":false,"category":"static","name":"Animation.fps"},"DOMEvent#altKey":{"description":"<p>事件发生时，alt 键是否被按下。</p>","type":"boolean","isFunction":false,"category":"instance","name":"DOMEvent#altKey"},"Array#getFirst":{"description":"<p>获取本数组的第一个元素。</p>","returns":[{"type":"*","description":"<p>本数组的第一个元素。</p>"}],"type":"*","examples":["[0, 1, 2, 3, 4].getFirst();\r// 0"],"isFunction":true,"category":"instance","name":"Array#getFirst"},"String":{"description":"<p></p>","isFunction":true,"category":"constructor","name":"String"},"navigator.isIElt10":{"description":"<p>浏览器是否为 IE，且版本小于 10。</p>","type":"boolean","isFunction":false,"category":"static","name":"navigator.isIElt10"},"TabPanel#activate":{"parameters":[{"description":"<p>要激活的“标签”和“面板”在所有“标签”和“面板”中的索引值。</p>","type":"number","name":"index","isOptional":false}],"description":"<p>激活一个“标签”及与其对应的“面板”。</p><p>如果指定的索引值不在有效范围内或与当前被激活的索引值相同，则调用本方法无效。</p>","returns":[{"type":"Element","description":"<p>本元素。</p>"}],"type":"Element","isFunction":true,"category":"instance","name":"TabPanel#activate"},"localStorage.clear":{"description":"<p>清空 localStorage 中的所有数据。</p>","isFunction":true,"category":"static","name":"localStorage.clear"},"Element#getChildCount":{"description":"<p>获取本元素的子元素的总数。</p>","returns":[{"type":"number","description":"<p>本元素的子元素的总数。</p>"}],"type":"number","isFunction":true,"category":"instance","name":"Element#getChildCount"},"DOMEvent#bubbles":{"description":"<p>是否可以冒泡，不冒泡的事件不能使用代理事件监听。</p>","type":"boolean","isFunction":false,"category":"instance","name":"DOMEvent#bubbles"},"Animation.createBasicRenderer":{"parameters":[{"description":"<p>渲染函数，传入两个参数“时间轴”和“偏移量”。</p><p>该函数被调用时 this 的值为所属的 Animation 对象。</p>","type":"Function","name":"renderer","isOptional":false}],"description":"<p>创建基本渲染器。</p>","returns":[{"type":"Function","description":"<p>生成的渲染器。</p>"}],"type":"Function","isFunction":true,"category":"static","name":"Animation.createBasicRenderer"},"navigator.inStandardsMode":{"description":"<p>浏览器是否工作在标准模式下。</p>","type":"boolean","isFunction":false,"category":"static","name":"navigator.inStandardsMode"},"Element#find":{"parameters":[{"description":"<p>选择符。</p>","type":"string","name":"selector","isOptional":false}],"description":"<p>在本元素的后代元素中，根据指定的选择符查找符合条件的第一个元素。</p>","returns":[{"type":"Element","description":"<p>查找到的元素。</p><p>如果没有找到任何元素，返回 null。</p>"}],"type":"Element","see":["http://www.w3.org/TR/selectors-api2/","https://github.com/jquery/sizzle/wiki/Sizzle-Home"],"isFunction":true,"category":"instance","name":"Element#find"},"Array#map":{"parameters":[{"description":"<p>对数组中的每个元素都调用一次的回调函数。</p><p>回调函数有三个参数：当前元素，当前元素的索引和调用该方法的数组对象。</p>","type":"Function","name":"callback","isOptional":false},{"description":"<p>callback 被调用时 this 的值，如果省略或指定为 null，则使用全局对象 window。</p>","type":"Object","name":"thisObject","isOptional":true}],"description":"<p>对数组中的每一个元素都调用一次回调函数，并返回一个包含这个回调函数的每次调用后的返回值的新数组。</p>","returns":[{"type":"Array","description":"<p>包含 callback 的每次调用后的返回值的新数组。</p>"}],"type":"Array","see":["http://es5.github.com/#x15.4.4.19","https://developer.mozilla.org/en/Core_JavaScript_1.5_Reference/Objects/Array/map"],"examples":["var a = [1, 2, 3].map(function(item) {\r  return item + 10;\r});\ra;\r// [11, 12, 13]"],"isFunction":true,"category":"instance","name":"Array#map"},"Element#clone":{"parameters":[{"description":"<p>是否进行深克隆。</p>","type":"boolean","name":"recursively","isOptional":true},{"description":"<p>是否保留本元素及后代元素上的所有事件监听器。</p>","type":"boolean","name":"keepListeners","isOptional":true}],"description":"<p>克隆本元素。</p><p>如果本元素有 id 属性，需注意克隆元素的 id 属性将与之有相同的值，必要时应进一步处理。</p><p>不要克隆包含脚本的元素，以免出现兼容性问题。</p><p>不要克隆包含样式表的元素，以免最终样式不符合预期。</p>","returns":[{"type":"Element","description":"<p>克隆后的元素。</p>"}],"type":"Element","see":["http://jquery.com/","http://mootools.net/","http://w3help.org/zh-cn/causes/SD9029"],"isFunction":true,"category":"instance","name":"Element#clone"},"Element#getStyle":{"parameters":[{"description":"<p>特性名（不支持复合特性），应使用 camel case 格式。</p>","type":"string","name":"propertyName","isOptional":false}],"description":"<p>获取本元素的“计算后的样式”中某个特性的值。</p><p>注意：不要尝试获取未插入文档树的元素的“计算后的样式”，它们存在兼容性问题。</p>","returns":[{"type":"string","description":"<p>对应的特性值，如果获取的是长度值，其单位未必是 px，可能是其定义时的单位。</p>"}],"type":"string","isFunction":true,"category":"instance","name":"Element#getStyle"},"Date":{"description":"<p></p>","isFunction":true,"category":"constructor","name":"Date"},"window":{"description":"<p>扩展 DOMWindow 对象。</p>","isFunction":false,"category":"static","name":"window"},"Array#filter":{"parameters":[{"description":"<p>对数组中的每个元素都调用一次的回调函数。</p><p>回调函数有三个参数：当前元素，当前元素的索引和调用该方法的数组对象。</p>","type":"Function","name":"callback","isOptional":false},{"description":"<p>callback 被调用时 this 的值，如果省略或指定为 null，则使用全局对象 window。</p>","type":"Object","name":"thisObject","isOptional":true}],"description":"<p>对数组中的每一个元素都调用一次回调函数，并且创建一个新的数组，该数组包含所有调用回调函数后返回值为 true 时对应的原数组元素。</p>","returns":[{"type":"Array","description":"<p>包含所有调用 callback 后返回值为 true 时对应的原数组元素的新数组。</p>"}],"type":"Array","see":["http://es5.github.com/#x15.4.4.20","https://developer.mozilla.org/en/Core_JavaScript_1.5_Reference/Objects/Array/filter"],"examples":["var a = [1, 2, 3].filter(function(item) {\r  return item % 2 === 1;\r});\ra;\r// [1, 3]"],"isFunction":true,"category":"instance","name":"Array#filter"},"Slideshow#show":{"parameters":[{"description":"<p>要播放的“幻灯片”在所有“幻灯片”中的索引值。</p>","type":"number","name":"index","isOptional":false}],"description":"<p>播放指定的“幻灯片”。</p><p>如果指定的索引值不在有效范围内或与当前播放的索引值相同，则调用本方法无效。</p>","returns":[{"type":"Element","description":"<p>本元素。</p>"}],"type":"Element","isFunction":true,"category":"instance","name":"Slideshow#show"},"Array.from":{"parameters":[{"description":"<p>要转化为数组的值。</p><p>如果该值为 undefined 或 null，则返回空数组。</p><p>如果该值本身即为一个数组，则直接返回这个数组。</p><p>如果该值有 toArray 方法，则返回调用该方法后的结果。</p><p>如果该值可遍历，则返回一个包含各可遍历项的数组。</p><p>否则，返回一个仅包含该值的数组。</p>","type":"*","name":"value","isOptional":false}],"description":"<p>将一个值转化为数组。</p>","returns":[{"type":"Array","description":"<p>由 value 转化而来的数组。</p>"}],"type":"Array","isFunction":true,"category":"static","name":"Array.from"},"Boolean":{"description":"<p></p>","isFunction":true,"category":"constructor","name":"Boolean"},"Number.isInteger":{"parameters":[{"description":"<p>提供的值。</p>","type":"*","name":"value","isOptional":false}],"description":"<p>检查提供的值是否为 IEEE-754 双精度整数。</p><p>取值范围在 ±Math.pow(2, 53) 之间。</p>","returns":[{"type":"boolean","description":"<p>检查结果。</p>"}],"type":"boolean","see":["http://wiki.ecmascript.org/doku.php?id=harmony:number.isinteger"],"examples":["Number.isInteger(9007199254740992);\r// false"],"isFunction":true,"category":"static","name":"Number.isInteger"},"Element#setStyles":{"parameters":[{"description":"<p>包含一条或多条要设置的样式声明，格式为 {propertyName: propertyValue, ...} 的对象。</p>","type":"Object","name":"declarations","isOptional":false}],"description":"<p>为本元素设置一组行内样式声明。</p>","returns":[{"type":"Element","description":"<p>本元素。</p>"}],"type":"Element","isFunction":true,"category":"instance","name":"Element#setStyles"},"Element#getParent":{"description":"<p>获取本元素的父元素。</p>","returns":[{"type":"Element","description":"<p>本元素的父元素。</p>"}],"type":"Element","isFunction":true,"category":"instance","name":"Element#getParent"},"Animation#play":{"description":"<p>播放动画。</p><p>如果当前动画正在播放中，或时间点已到达终点，则调用本方法无效。</p>","returns":[{"type":"boolean","description":"<p>本方法是否已被成功调用。</p>"}],"type":"boolean","isFunction":true,"category":"instance","name":"Animation#play"},"window.getClientSize":{"description":"<p>获取视口可视区域的尺寸。</p><p>IE9 Firefox Chrome Safari Opera 有 window.innerWidth 和 window.innerHeight 属性，但这个值是包含了滚动条宽度的值。</p><p>为保持一致性，不使用这两个属性来获取文档可视区域尺寸。</p>","returns":[{"type":"Object","description":"<p>尺寸，包含 width 和 height 两个数字类型的属性，单位为像素。</p>"}],"type":"Object","see":["http://www.w3.org/TR/cssom-view/#dom-window-innerwidth","http://www.w3.org/TR/cssom-view/#dom-window-innerheight"],"isFunction":true,"category":"static","name":"window.getClientSize"},"Paginator#update":{"parameters":[{"description":"<p>当前页码。</p>","type":"number","name":"currentPage","isOptional":false},{"description":"<p>总页数。</p>","type":"number","name":"totalPages","isOptional":false}],"description":"<p>根据当前页码和总页数创建“导航链接”。</p><p>仅当没有配置 data-current-page 和 data-total-pages 时，调用本方法才有效。</p>","returns":[{"type":"Element","description":"<p>本元素。</p>"}],"type":"Element","isFunction":true,"category":"instance","name":"Paginator#update"},"Math":{"description":"<p></p>","isFunction":true,"category":"constructor","name":"Math"},"Math.limit":{"parameters":[{"description":"<p>输入的数字。</p>","type":"number","name":"number","isOptional":false},{"description":"<p>允许的数字下限。</p>","type":"number","name":"min","isOptional":false},{"description":"<p>允许的数字上限。</p>","type":"number","name":"max","isOptional":false}],"description":"<p>参考输入的数字 number，返回介于 min 和 max 之间（包含 min 和 max）的数字。</p><p>如果 number 小于 min 则返回 min；如果 number 大于 max 则返回 max；否则返回 number。</p>","returns":[{"type":"number","description":"<p>输出的数字。</p>"}],"type":"number","see":["http://mootools.net/"],"examples":["Math.limit(100, 0, 80);\r// 80\rMath.limit(NaN, 0, 80);\r// 0"],"isFunction":true,"category":"static","name":"Math.limit"},"Paginator":{"description":"<p>“分页导航条”用于生成数据分页时的“导航链接”。</p><p>“分页导航条”能够满足以下两种场景的需求：</p><ul><li>对于服务端输出的静态页，应将当前页码和总页数输出为 <dfn>data-current-page</dfn> 和 <dfn>data-total-pages</dfn> 属性的值，以直接生成“导航链接”。此外，还应指定 <dfn>data-target-url</dfn>，以使每个“导航链接”都可以像普通链接一样被点击。<br>在这种情况下，不必编写任何 JS 代码来做其他处理。</li><li>对于一个富应用页面，上述三个属性均不必指定。<br>当使用脚本获得了当前页码和总页数后，应通过调用 update 方法来创建“导航链接”。<br>当一个“导航链接”被点击时，会自动调用 turn 方法并触发 turn 事件，对于本次点击行为的处理可以在该事件的监听器中进行。</li></ul><strong>启用方式：</strong><p>为一个 DIV 元素添加 'widget-paginator' 类，即可使该元素成为“分页导航条”。</p><strong>结构约定：</strong><ul><li>“分页导航条”会在其内部创建“导航链接”，其中“上一页”的类名为 'prev'，“下一页”的类名为 'next'，“当前页码”的类名为 'current'。</li></ul><strong>新增行为：</strong><ul><li>“分页导航条”在创建“导航链接”之前是不可见的。</li><li>“分页导航条”被解析时，会根据各配置参数决定主动或被动的创建各“导航链接”。</li><li>点击“导航链接”时，会根据 data-target-url 的配置执行相应的操作。<br>如果没有指定 data-target-url，则在“导航链接”上发生的 click 事件的默认行为将被阻止。</li><li>如果“上一页”或“下一页”处于禁用状态，将为其添加类名 'disabled'。</li></ul><strong>默认样式：</strong><pre class=\"lang-css\"><p>div.widget-paginator { visibility: hidden; font-size: 14px; line-height: 16px; text-align: center; }</p><p>div.widget-paginator a:link, div.widget-paginator a:visited, div.widget-paginator a:hover, div.widget-paginator a:active { display: inline-block; margin: 2px; padding: 2px 5px; border: 1px solid silver; background-color: white; color: black; text-decoration: none; }</p><p>div.widget-paginator a:hover { border-color: gray; background-color: gainsboro; }</p><p>div.widget-paginator a:active { border-color: dimgray; background-color: silver; }</p><p>div.widget-paginator a.current:link, div.widget-paginator a.current:visited, div.widget-paginator a.current:hover, div.widget-paginator a.current:active { border-color: black; background-color: steelblue; color: white; }</p><p>div.widget-paginator a.disabled:link, div.widget-paginator a.disabled:visited, div.widget-paginator a.disabled:hover, div.widget-paginator a.disabled:active { border-color: gainsboro; background-color: white; color: gainsboro; cursor: default; }</p></pre><p>可配置项</p><p>data-current-page</p><p>当前页码。</p><p>只有本属性和 data-total-pages 一并指定时才有效。</p><p>data-total-pages</p><p>总页数。</p><p>如果同时指定了 data-current-page 和本属性，则对 update 方法的调用将失效，“导航链接”会在“分页导航条”被解析后将自动生成。</p><p>data-target-url</p><p>点击“导航链接”后跳转到的地址，其中应包含子串 '{page}'，该子串将在生成链接时被替换为页码数字。</p><p>如果指定了本属性，则对 turn 方法的调用将失效，当点击一个“导航链接”时，浏览器将直接跳转到对应的链接地址。</p><p>如果不指定本属性，当点击一个“导航链接”时，会自动调用 turn 方法，并将对应的页码作为参数传入。</p><p>data-endpoint-pages</p><p>在导航条的两端最多可以显示的“导航链接”数量。</p><p>如果不指定本属性，则使用 1 作为默认值。</p><p>data-adjacent-pages</p><p>在当前页码的两侧最多可以显示的“导航链接”数量。</p><p>如果不指定本属性，则使用 2 作为默认值。</p>","fires":[{"description":"<p>{number} currentPage 当前页码。</p><p>{number} totalPages 总页数。</p><p>成功调用 update 方法后触发。</p>","name":"update"},{"description":"<p>{number} targetPage 目标页码。</p><p>成功调用 turn 方法后触发。</p>","name":"turn"}],"isFunction":true,"category":"constructor","name":"Paginator"},"Math.randomRange":{"parameters":[{"description":"<p>要获取的随机数的下限，整数。</p>","type":"number","name":"min","isOptional":false},{"description":"<p>要获取的随机数的上限，整数。</p>","type":"number","name":"max","isOptional":false}],"description":"<p>生成介于 min 和 max 之间（包含 min 和 max）的伪随机整数。</p>","returns":[{"type":"number","description":"<p>生成的伪随机整数。</p>"}],"type":"number","see":["http://mootools.net/"],"isFunction":true,"category":"static","name":"Math.randomRange"},"Request":{"parameters":[{"description":"<p>请求地址。</p>","type":"string","name":"url","isOptional":false},{"description":"<p>可选参数。</p>","type":"Object","name":"options","isOptional":true},{"description":"<p>请求模式，使用 'xhr' 则为 XHR 模式，使用 'jsonp' 则为 JSONP 模式，默认为 'xhr'，大小写不敏感。</p>","type":"string","name":"options.mode","isOptional":true},{"description":"<p>请求方法，在 XHR 模式下可以使用 'get' 和 'post'，默认为 'get'，在 JSONP 模式下永远为 'get'，大小写不敏感。</p><p>如果使用 'get' 方式，应将整个 URL 的长度控制在 2048 个字符以内。</p>","type":"string","name":"options.method","isOptional":true},{"description":"<p>是否允许浏览器的缓存生效，在 XHR 模式下可以使用 true 和 false，默认为 true，在 JSONP 模式下永远为 false。</p>","type":"boolean","name":"options.useCache","isOptional":true},{"description":"<p>是否使用异步方式，在 XHR 模式下可以使用 true 和 false，默认为 true，在 JSONP 模式下永远为 true。</p>","type":"boolean","name":"options.async","isOptional":true},{"description":"<p>请求最短时间，单位为毫秒，默认为 NaN，即无最短时间限制，async 为 true 时有效。</p>","type":"number","name":"options.minTime","isOptional":true},{"description":"<p>请求超时时间，单位为毫秒，默认为 NaN，即无超时时间限制，async 为 true 时有效。</p>","type":"number","name":"options.maxTime","isOptional":true},{"description":"<p>用户名，仅在 XHR 模式下有效，默认为空字符串，即不指定用户名。</p>","type":"string","name":"options.username","isOptional":true},{"description":"<p>密码，仅在 XHR 模式下有效，默认为空字符串，即不指定密码。</p>","type":"string","name":"options.password","isOptional":true},{"description":"<p>要设置的 request headers，仅在 XHR 模式下有效，格式为 {key: value, ...} 的对象，默认为 {'X-Requested-With': 'XMLHttpRequest', 'Accept': '*&#47;*'}。</p>","type":"Object","name":"options.headers","isOptional":true},{"description":"<p>发送数据的内容类型，仅在 XHR 模式下且 method 为 'post' 时有效，默认为 'application/x-www-form-urlencoded'。</p>","type":"string","name":"options.contentType","isOptional":true},{"description":"<p>指定服务端获取 JSONP 前缀的参数名，仅在 JSONP 模式下有效，默认为 'callback'，大小写敏感。</p>","type":"string","name":"options.callbackName","isOptional":true}],"description":"<p>对一个指定的资源发起请求，并获取响应数据。</p><p>所有 Request 的实例也都是一个 JSEventTarget 对象。</p><p>每个 Request 的实例都对应一个资源，实例创建后可以重复使用。</p><p>创建 Request 时，可以选择使用 XHR 模式（同域请求时）或 JSONP 模式（跨域请求时）。</p><p>在 JSONP 模式下，如果服务端返回的响应体不是 JSONP 格式的数据，请求将出现错误，并且这个错误是无法被捕获的。需要注意的是 JSONP 请求会直接执行另一个域内的脚本，因此如果该域遭到攻击，本域也可能会受到影响。</p><p>两种模式的请求结果都会被传入 abort、timeout、complete 和 finish 事件监听器中。</p><p>XHR 模式的请求结果中包含以下属性：</p><ul><li>{number} <dfn>status</dfn> 状态码。</li><li>{string} <dfn>statusText</dfn> 状态描述。</li><li>{Object} <dfn>headers</dfn> 响应头。</li><li>{string} <dfn>text</dfn> 响应文本。</li><li>{XMLDocument} <dfn>xml</dfn> 响应 XML 文档。</li></ul><p>JSONP 模式的请求结果中包含以下属性：</p><ul><li>{number} <dfn>status</dfn> 状态码。</li><li>{string} <dfn>statusText</dfn> 状态描述。</li><li>{Object} <dfn>data</dfn> 请求结果。</li></ul>","fires":[{"description":"<p>请求开始时触发。</p>","name":"start"},{"description":"<p>请求被取消时触发。</p>","name":"abort"},{"description":"<p>请求超时时触发。</p>","name":"timeout"},{"description":"<p>请求完成时触发。</p>","name":"complete"},{"description":"<p>请求结束时触发。</p><p>只要请求已开始，此事件就必然会被触发（跟随在 abort、timeout 或 complete 任一事件之后）。</p><p>这样设计的好处是在请求结束时可以统一处理一些状态的设定或恢复，如将 start 事件监听器中呈现到用户界面的提示信息隐藏。</p>","name":"finish"}],"isFunction":true,"category":"constructor","name":"Request"},"Request#ongoing":{"description":"<p>请求是否正在进行中。</p>","type":"boolean","isFunction":false,"category":"instance","name":"Request#ongoing"},"Object.toQueryString":{"parameters":[{"description":"<p>要转换的对象，该对象的每个属性名和属性值都将以键值对的形式被转换为字符串。</p><p>如果某个属性值为 undefined 或 null，则忽略该属性。</p><p>如果某个属性值为数组，则表示其对应的属性名有多个有效值。</p>","type":"Object","name":"object","isOptional":false},{"description":"<p>转换时不使用 encodeURIComponent 编码。</p>","type":"boolean","name":"dontEncode","isOptional":true}],"description":"<p>将一个对象转换为用于 HTTP 传输的查询字符串。</p>","returns":[{"type":"string","description":"<p>转换后的字符串。</p>"}],"type":"string","examples":["Object.toQueryString({a: undefined, b: null, c: '', d: 100, e: ['Composite Value', true]});\r// \"c=&d=100&e=Composite%20Value&e=true\""],"isFunction":true,"category":"static","name":"Object.toQueryString"},"Element#removeData":{"parameters":[{"description":"<p>数据名。</p>","type":"string","name":"key","isOptional":false}],"description":"<p>从本元素中删除一条自定义数据。</p><p>注意：IE6 IE7 在 removeAttribute 时，key 参数是大小写敏感的。</p>","returns":[{"type":"Element","description":"<p>本元素。</p>"}],"type":"Element","isFunction":true,"category":"instance","name":"Element#removeData"},"location":{"description":"<p>扩展 location 对象。</p>","isFunction":false,"category":"static","name":"location"},"DOMEvent#shiftKey":{"description":"<p>事件发生时，shift 键是否被按下。</p>","type":"boolean","isFunction":false,"category":"instance","name":"DOMEvent#shiftKey"},"Element#fade":{"parameters":[{"description":"<p>模式，默认为 'toggle'。</p><table><tr><th>可选值</th><th>含义</th></tr><tr><td><dfn>toggle</dfn></td><td>如果本元素的动画播放列表中已经存在一个 fade 动画，则使用与这个已存在的动画相反的模式。<br>否则若本元素的 display 为 none 则为淡入模式，display 不为 none 则为淡出模式。</td></tr><tr><td><dfn>in</dfn></td><td>淡入模式。</td></tr><tr><td><dfn>out</dfn></td><td>淡出模式。</td></tr></table>","type":"string","name":"mode","isOptional":true},{"description":"<p>动画选项。</p>","type":"Object","name":"options","isOptional":true},{"description":"<p>播放时间，单位为毫秒，默认为 200。</p>","type":"number","name":"options.duration","isOptional":true},{"description":"<p>控速函数名称或表达式，细节请参考 Animation.prototype.addClip 的同名参数，默认为 'easeIn'。</p>","type":"string","name":"options.timingFunction","isOptional":true},{"description":"<p>播放开始时的回调。</p><p>该函数被调用时 this 的值为本元素。</p>","type":"Function","name":"options.onStart","isOptional":true},{"description":"<p>播放每一帧之后的回调。</p><p>该函数被调用时 this 的值为本元素。</p>","type":"Function","name":"options.onStep","isOptional":true},{"description":"<p>播放完成时的回调。</p><p>该函数被调用时 this 的值为本元素。</p>","type":"Function","name":"options.onFinish","isOptional":true}],"description":"<p>让本元素播放一个淡入或淡出动画。</p><p>如果本元素的动画播放列表中已经存在一个 fade 动画，则停止旧的，播放新的。这种情况下新动画的播放时间会小于设定的时间（具体取决于旧动画已播放的百分比）。</p><p>否则若本元素的 display 不为 none 则不能播放淡入动画，display 为 none 则不能播放淡出动画。</p>","returns":[{"type":"Element","description":"<p>本元素。</p>"}],"type":"Element","isFunction":true,"category":"instance","name":"Element#fade"},"String#contains":{"parameters":[{"description":"<p>指定的子串。</p>","type":"string","name":"substring","isOptional":false}],"description":"<p>检查字符串是否包含指定的子串。</p>","returns":[{"type":"boolean","description":"<p>检查结果。</p>"}],"type":"boolean","see":["http://wiki.ecmascript.org/doku.php?id=harmony:string_extras"],"examples":["'abcdefg'.contains('cd');\r// true"],"isFunction":true,"category":"instance","name":"String#contains"},"DOMEvent#wheelDown":{"description":"<p>事件发生时鼠标滚轮是否正在向下滚动，仅在 mousewheel 类型的事件对象上有效。</p>","type":"boolean","isFunction":false,"category":"instance","name":"DOMEvent#wheelDown"},"Object.mixin":{"parameters":[{"description":"<p>目标对象。</p>","type":"Object","name":"destination","isOptional":false},{"description":"<p>源对象，其 properties 会被复制到 destination 中。</p>","type":"Object","name":"source","isOptional":false},{"description":"<p>过滤要添加的 source 中的 properties 的名单。</p>","type":"Object","name":"filter","isOptional":true},{"description":"<p>仅当 source 中的 key 包含于 whiteList 时，对应的 property 才会被复制到 destination 中。</p>","type":"Array","name":"filter.whiteList","isOptional":true},{"description":"<p>如果 source 中的 key 包含于 blackList，则对应的 property 不会被复制到 destination 中。</p><p>如果 blackList 与 whiteList 有重复的值，则 whiteList 中的将被忽略。</p>","type":"Array","name":"filter.blackList","isOptional":true}],"description":"<p>将源对象（不包含原型链）上的 properties 添加到目标对象中。</p><p>source 中的 property 会覆盖 destination 中的同名 property。</p><table><tr><th>destination (before)</th><th>source</th><th>destination (after)</th></tr><tr><td>a: 0</td><td></td><td>a: 0</td></tr><tr><td>b: 0</td><td>b: 1</td><td>b: 1</td></tr><tr><td></td><td>c: 1</td><td>c: 1</td></tr></table>","returns":[{"type":"Object","description":"<p>目标对象。</p>"}],"type":"Object","examples":["Object.mixin({a: 0}, {b: 1});\r// {a: 0, b: 1}","Object.mixin({a: 0, b: 0}, {a: 1, b: 1}, {whiteList: ['a']});\r// {a: 1, b: 0}\rObject.mixin({a: 0, b: 0}, {a: 1, b: 1}, {whiteList: ['a', 'b'], blackList: ['a']});\r// {a: 0, b: 1}"],"isFunction":true,"category":"static","name":"Object.mixin"},"DOMEvent#originalEvent":{"description":"<p>原生事件对象。</p><p>使用 fire 方法创建的事件对象的 originalEvent.type 为空字符串。</p>","type":"Object","isFunction":false,"category":"instance","name":"DOMEvent#originalEvent"},"Animation.createScrollRenderer":{"parameters":[{"description":"<p>要实施滚动效果的元素。</p>","type":"Element","name":"element","isOptional":false},{"description":"<p>横向滚动坐标，元素的内容将向指定的坐标平滑滚动。</p>","type":"number","name":"x","isOptional":false},{"description":"<p>纵向滚动坐标，元素的内容将向指定的坐标平滑滚动。</p>","type":"number","name":"y","isOptional":false}],"description":"<p>创建平滑滚动效果渲染器。</p>","returns":[{"type":"Function","description":"<p>生成的渲染器。</p>"}],"type":"Function","isFunction":true,"category":"static","name":"Animation.createScrollRenderer"},"Widget.parse":{"parameters":[{"description":"<p>要解析的元素。</p>","type":"Element","name":"element","isOptional":false},{"description":"<p>是否解析该元素的后代元素。</p>","type":"boolean","name":"recursively","isOptional":true}],"description":"<p>将符合条件的元素解析为 Widget。</p><p>在 DOM 树解析完成后会自动将页面内的全部符合条件的元素解析为 Widget，因此仅应在必要时调用本方法。</p>","isFunction":true,"category":"static","name":"Widget.parse"},"DOMEvent#relatedTarget":{"description":"<p>事件被触发时的相关对象，仅在 mouseover/mouseout 类型的事件对象上有效。</p>","type":"Element","isFunction":false,"category":"instance","name":"DOMEvent#relatedTarget"},"DOMEvent#offsetX":{"description":"<p>事件发生时鼠标在横向移动的偏移量，仅在 mousedragstart/mousedrag/mousedragend 类型的事件对象上有效。</p>","type":"number","isFunction":false,"category":"instance","name":"DOMEvent#offsetX"},"Object.forEach":{"parameters":[{"description":"<p>要遍历的对象。</p>","type":"Object","name":"object","isOptional":false},{"description":"<p>用来遍历的函数，参数为 value，key，object。</p>","type":"Function","name":"callback","isOptional":false},{"description":"<p>callback 被调用时 this 的值，如果省略或指定为 null，则使用全局对象 window。</p>","type":"Object","name":"thisObject","isOptional":true}],"description":"<p>遍历一个对象。</p>","isFunction":true,"category":"static","name":"Object.forEach"},"DOMEvent#offsetY":{"description":"<p>事件发生时鼠标在纵向移动的偏移量，仅在 mousedragstart/mousedrag/mousedragend 类型的事件对象上有效。</p>","type":"number","isFunction":false,"category":"instance","name":"DOMEvent#offsetY"},"Widget":{"description":"<p>提供对 Widget 的支持。</p>","isFunction":false,"category":"static","name":"Widget"},"Paginator#currentPage":{"description":"<p>当前页码。</p>","type":"number","isFunction":false,"category":"instance","name":"Paginator#currentPage"},"Element#getPreviousSibling":{"description":"<p>获取与本元素相邻的上一个元素。</p>","returns":[{"type":"Element","description":"<p>与本元素相邻的上一个元素。</p>"}],"type":"Element","isFunction":true,"category":"instance","name":"Element#getPreviousSibling"},"Dialog#open":{"description":"<p>打开“对话框”。</p><p>如果“对话框”已经打开，则调用本方法无效。</p>","returns":[{"type":"Element","description":"<p>本元素。</p>"}],"type":"Element","isFunction":true,"category":"instance","name":"Dialog#open"},"String#toArray":{"description":"<p>将字符串转化为数组。</p>","returns":[{"type":"Array","description":"<p>从字符串转化的数组。</p>"}],"type":"Array","see":["http://wiki.ecmascript.org/doku.php?id=harmony:string_extras"],"examples":["'abcdefg'.toArray();\r// ['a', 'b', 'c', 'd', 'e', 'f', 'g']"],"isFunction":true,"category":"instance","name":"String#toArray"},"Element#getNextSibling":{"description":"<p>获取与本元素相邻的下一个元素。</p>","returns":[{"type":"Element","description":"<p>与本元素相邻的下一个元素。</p>"}],"type":"Element","isFunction":true,"category":"instance","name":"Element#getNextSibling"},"Paginator#totalPages":{"description":"<p>总页数。</p>","type":"number","isFunction":false,"category":"instance","name":"Paginator#totalPages"},"Number#toJSON":{"description":"<p>将数字转换为 JSON 格式的字符串。</p>","returns":[{"type":"string","description":"<p>转换后的字符串。</p>"}],"type":"string","isFunction":true,"category":"instance","name":"Number#toJSON"},"DOMEvent#which":{"description":"<p>当一个设备触发事件时的相关代码。在键盘事件中为按下的键的代码。</p>","type":"number","isFunction":false,"category":"instance","name":"DOMEvent#which"},"Array#lastIndexOf":{"parameters":[{"description":"<p>指定的元素。</p>","type":"*","name":"searchElement","isOptional":false},{"description":"<p>从指定索引为起始点开始查找，默认为数组的长度。</p><p>如果该值大于数组的长度，则使用数组的长度作为查找起始点。</p><p>如果该值为负数，则表示从数组的末尾开始计算的偏移量，即使用 (fromIndex + 数组的长度) 作为查找起始点，如果这个结果仍为负数，则使用 0 作为查找起始点。</p>","type":"number","name":"fromIndex","isOptional":true}],"description":"<p>返回数组中最后一次出现指定的元素的索引。</p>","returns":[{"type":"number","description":"<p>索引值，如果数组中不包含指定的元素，则返回 -1。</p>"}],"type":"number","see":["http://es5.github.com/#x15.4.4.15","https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Array/lastIndexOf"],"examples":["[1, 2, 3, 2, 1].lastIndexOf(2);\r// 3\r[1, 2, 3, 2, 1].lastIndexOf(2, 2);\r// 1\r[1, 2, 3, 2, 1].lastIndexOf(2, -3)\r// 1\r[1, 2, 3, 2, 1].lastIndexOf(8)\r// -1"],"isFunction":true,"category":"instance","name":"Array#lastIndexOf"},"TabPanel#tabs":{"description":"<p>包含所有“标签”的数组。</p>","type":"Array","isFunction":false,"category":"instance","name":"TabPanel#tabs"},"TabPanel#panels":{"description":"<p>包含所有“面板”的数组。</p>","type":"Array","isFunction":false,"category":"instance","name":"TabPanel#panels"},"window.getScrollSize":{"description":"<p>获取视口滚动区域的尺寸。当内容不足以充满视口可视区域时，返回视口可视区域的尺寸。</p>","returns":[{"type":"Object","description":"<p>尺寸，包含 width 和 height 两个数字类型的属性，单位为像素。</p>"}],"type":"Object","isFunction":true,"category":"static","name":"window.getScrollSize"},"Animation#addClip":{"parameters":[{"description":"<p>使用 Animation.create*Renderer 创建的渲染器。</p><p>该函数被调用时 this 的值为所属的 Animation 对象。</p>","type":"Function","name":"renderer","isOptional":false},{"description":"<p>延时。</p>","type":"number","name":"delay","isOptional":false},{"description":"<p>播放时间。</p>","type":"number","name":"duration","isOptional":false},{"description":"<p>控速函数名称或表达式。</p><p>支持的名称有 linear，bounceIn，bounceOut，ease，easeIn，easeOut，easeInOut，easeOutIn。</p><p>表达式的格式为 <dfn>cubicBezier(<var>p1x</var>, <var>p1y</var>, <var>p2x</var>, <var>p2y</var>)</dfn>，各参数均为浮点数，其中 <var>p1x</var> 和 <var>p2x</var> 的取值范围必须在 [0, 1] 之间。</p>","type":"string","name":"timingFunction","isOptional":false}],"description":"<p>添加动画剪辑。</p>","returns":[{"type":"Object","description":"<p>Animation 对象。</p>"}],"type":"Object","isFunction":true,"category":"instance","name":"Animation#addClip"},"Number#padZero":{"parameters":[{"description":"<p>数字总位数（包括整数位和小数位），当数字实际位数小于指定的数字总位数时，会在左侧补零。</p>","type":"number","name":"digits","isOptional":false}],"description":"<p>在数字左侧补零，以使数字更整齐。</p>","returns":[{"type":"string","description":"<p>补零后的数字、NaN、Infinity 或 -Infinity 的字符形式。</p>"}],"type":"string","isFunction":true,"category":"instance","name":"Number#padZero"},"navigator.userAgentInfo.name":{"description":"<p>浏览器的名称，值为以下之一：IE|Firefox|Chrome|Safari|Opera。</p>","type":"string","isFunction":false,"category":"static","name":"navigator.userAgentInfo.name"},"Element#removeClass":{"parameters":[{"description":"<p>类名，如果要同时指定多个类名，使用逗号将它们分开即可。</p>","type":"string","name":"className","isOptional":false}],"description":"<p>为本元素删除指定的类名。</p>","returns":[{"type":"Element","description":"<p>本元素。</p>"}],"type":"Element","isFunction":true,"category":"instance","name":"Element#removeClass"},"Element#toggleClass":{"parameters":[{"description":"<p>类名，如果要同时指定多个类名，使用逗号将它们分开即可。</p>","type":"string","name":"className","isOptional":false}],"description":"<p>如果本元素没有指定的类名，则添加指定的类名，否则删除指定的类名。</p>","returns":[{"type":"Element","description":"<p>本元素。</p>"}],"type":"Element","isFunction":true,"category":"instance","name":"Element#toggleClass"},"DatePicker":{"requires":["Calendar"],"description":"<p>“日期选择器”可以通过点选的方式来选择一个日期，它仍是一个表单控件。</p><strong>启用方式：</strong><p>为一个 INPUT[type=text] 元素添加 'widget-datepicker' 类，即可使该元素成为“日期选择器”。</p><strong>结构约定：</strong><ul><li>“日期选择器”会自动在文档中创建一个“日期选择面板”（其中包含一个“月历”），并利用它来进行日期的点选。<br>所有的“日期选择器”共用一个“日期选择面板”。</li><li>在“日期选择面板”中，类名包含 'btn' 的为按钮，类名包含 'prev_year' 的为“上一年”按钮，类名包含 'prev_month' 的为“上一月”按钮，类名包含 'next_month' 的为“下一月”按钮，类名包含 'next_year' 的为“下一年”按钮，类名包含 'clear' 的为“清除”按钮，类名包含 'today' 的为“今天”按钮。另外如果一个按钮处于禁用状态，将为其添加类名 'disabled'。</li></ul><strong>新增行为：</strong><ul><li>“日期选择器”将不再能由键盘输入值。点击该元素时，将弹出“日期选择面板”，在面板中选中的日期会被回填到该元素中。</li><li>如果“日期选择器”已经有选定值，点击“日期选择面板”的“清除”按钮可以清除该值。</li><li>如果今天在可选日期范围（取决于 data-min-date 和 data-max-date 的设定值）内，点击“今天”按钮可以将今天的日期作为选定值。</li><li>在“日期选择面板”中，可以通过点击“上一年”和“下一年”按钮或使用鼠标滚轮翻年，通过点击“上一月”和“下一月”按钮或使用 Shift + 鼠标滚轮翻月。</li></ul><strong>默认样式：</strong><pre class=\"lang-css\"><p>div.datepicker-panel { display: none; position: absolute; left: 0; top: 0; width: 218px; padding: 6px; box-shadow: 0 0 10px rgba(0, 0, 0, 0.2); border: 1px solid silver; border-radius: 3px; background: whitesmoke; color: navy; font: 14px/20px Verdana, Helvetica, Arial, SimSun, serif; cursor: default; }</p><p>div.datepicker-panel div.control_set { position: relative; height: 22px; line-height: 22px; text-align: center; }</p><p>div.datepicker-panel span.btn { position: absolute; top: 0; width: 28px; height: 20px; border: 1px solid silver; border-radius: 2px; background: white; color: black; line-height: 20px; }</p><p>div.datepicker-panel span.btn:hover, div.datepicker-panel tbody td:hover { box-shadow: 0 0 2px rgba(178, 34, 34, 0.75); border-color: firebrick; background: lightyellow; }</p><p>div.datepicker-panel span.disabled, div.datepicker-panel span.disabled:hover, div.datepicker-panel tbody td.disabled, div.datepicker-panel tbody td.disabled:hover { box-shadow: none; border-color: whitesmoke; background: whitesmoke; color: gainsboro; }</p><p>div.datepicker-panel span.prev_year { left: 1px; }</p><p>div.datepicker-panel span.prev_month { left: 32px; }</p><p>div.datepicker-panel span.next_year { right: 1px; }</p><p>div.datepicker-panel span.next_month { right: 32px; }</p><p>div.datepicker-panel table { margin: 2px 0; }</p><p>div.datepicker-panel thead td { border-color: whitesmoke; }</p><p>div.datepicker-panel tbody td { background: white; }</p><p>div.datepicker-panel tbody td.selected, div.datepicker-panel tbody td.selected:hover { box-shadow: none; border-color: firebrick; background: crimson; color: white; font-weight: bold; }</p><p>div.datepicker-panel span.clear { left: 1px; width: 61px; }</p><p>div.datepicker-panel span.today { right: 1px; width: 61px; }'</p></pre><p>可配置项</p><p>data-min-date</p><p>指定允许选择的最小日期，格式为 YYYY-MM-DD。</p><p>如果不指定本属性，则使用 '1900-01-01' 作为默认值。</p><p>在“日期选择器”被解析后，对本属性的值的修改仍然可以生效。</p><p>data-max-date</p><p>指定允许选择的最大日期，格式为 YYYY-MM-DD。</p><p>如果不指定本属性，则使用 '9999-12-31' 作为默认值。</p><p>在“日期选择器”被解析后，对本属性的值的修改仍然可以生效。</p>","fires":[{"description":"<p>选定的值改变时触发。</p><p>本事件用于模拟真实发生在表单域元素上的 change 事件。</p>","name":"change"}],"isFunction":true,"category":"constructor","name":"DatePicker"},"Element#getData":{"parameters":[{"description":"<p>数据名。</p>","type":"string","name":"key","isOptional":false}],"description":"<p>从本元素中读取一条自定义数据。</p>","returns":[{"type":"string","description":"<p>数据值。</p><p>如果指定的数据名不存在，返回 undefined。</p>"}],"type":"string","see":["http://www.w3.org/TR/html5/global-attributes.html#embedding-custom-non-visible-data-with-the-data-attributes"],"isFunction":true,"category":"instance","name":"Element#getData"},"Dialog#close":{"description":"<p>关闭“对话框”。</p><p>如果“对话框”已经关闭，则调用本方法无效。</p>","returns":[{"type":"Element","description":"<p>本元素。</p>"}],"type":"Element","isFunction":true,"category":"instance","name":"Dialog#close"},"DOMEvent#rightButton":{"description":"<p>事件发生时，鼠标右键是否被按下，仅在鼠标事件对象上有效。</p>","type":"boolean","isFunction":false,"category":"instance","name":"DOMEvent#rightButton"},"Validator#addValidationRules":{"parameters":[{"description":"<p>要验证的表单域的名称及规则，格式为 <dfn>{<var>name</var>: <var>ruleSet</var>, ...}</dfn>。</p><p>属性名 <var>name</var> 为要验证的表单域的名称。</p><p>属性值 <var>ruleSet</var> 为定义“验证规则”的对象，包括 5 种预置规则和 2 种自定规则。按照验证进行的顺序排列如下：</p><table><tr><th>规则名称</th><th>值类型</th><th>详细描述</th><th>提示信息</th></tr><tr><td><dfn>required</dfn></td><td>boolean</td><td>限定该表单域是否为必填或必选的。</td><td>当该表单域只包含一个控件时为 '<strong>必填</strong>'，否则为 '<strong>必选</strong>'</td></tr><tr><td><dfn>equals</dfn></td><td>string</td><td>指定相关表单域的名称，以限定该表单域的值与相关表单域的值一致。仅应在这两个表单域均只包含一个控件时指定，且相关表单域不能为该表单域自身。</td><td>'<strong>两次输入的密码不一致</strong>'</td></tr><tr><td><dfn>minLength</dfn></td><td>number</td><td>当该表单域只包含一个控件时，限定该控件的值的最小长度，否则限定选择项的最少数目。</td><td>当该表单域只包含一个控件时为 '<strong>不能少于 <dfn>minLength</dfn> 个字符</strong>'，否则为 '<strong>至少选择 <dfn>minLength</dfn> 项</strong>'。</td></tr><tr><td><dfn>maxLength</dfn></td><td>number</td><td>当该表单域只包含一个控件时，限定该控件的值的最大长度，否则限定选择项的最多数目。</td><td>当该表单域只包含一个控件时为 '<strong>不能超过 <dfn>maxLength</dfn> 个字符</strong>'，否则为 '<strong>最多选择 <dfn>maxLength</dfn> 项</strong>'。</td></tr><tr><td><dfn>type</dfn></td><td>Array</td><td>限定数据的类型，值可以为 'number'、'date'、'email'、'phone' 中的任一个。</td><td>'<strong>格式错误</strong>'</td></tr><tr><td><dfn>custom</dfn></td><td>Function</td><td>用来对该表单域的值进行进一步验证的函数，该函数被调用时会被传入该表单域的值，其 this 的值为本表单元素，返回值应为一个“提示信息”字符串（若为空字符串则表示验证通过）。</td><td>提示信息为 <dfn>custom</dfn> 函数的返回值。</td></tr><tr><td><dfn>remote</dfn></td><td>Object</td><td>指定对该表单域的值进行服务端验证，包含四个属性：url、options、keyName、validateResult。<br>其中前两个属性为创建远程请求时使用的 Request 的参数（细节请参考 Request 的同名参数），keyName 是将该表单域的值（value）以 <var>keyName=value</var> 的形式发送到服务端时使用的字段名，validateResult 是处理服务端返回信息的函数，该函数被调用时传入的参数与 Request 的 finish 事件监听器被调用时传入的参数一致，其 this 的值为“表单验证器”，该函数应该返回“提示信息”字符串（若为空字符串则表示验证通过）。</td><td>提示信息为 validateResult 函数的返回值。</td></tr></table><p>若不需要某种类型的验证，在 <var>ruleSet</var> 中省略对应的规则即可。</p>","type":"Object","name":"rules","isOptional":false}],"description":"<p>添加“验证规则”。</p><p>新的配置将在下次使用到这些“验证规则”的时候生效。</p>","returns":[{"type":"Element","description":"<p>本元素。</p>"}],"type":"Element","isFunction":true,"category":"instance","name":"Validator#addValidationRules"},"Slideshow#slides":{"description":"<p>包含所有“幻灯片”元素的数组。</p>","type":"Array","isFunction":false,"category":"instance","name":"Slideshow#slides"},"DOMEvent#middleButton":{"description":"<p>事件发生时，鼠标中键是否被按下，仅在鼠标事件对象上有效。</p>","type":"boolean","isFunction":false,"category":"instance","name":"DOMEvent#middleButton"},"Element#swap":{"parameters":[{"description":"<p>目标元素。</p>","type":"Element","name":"target","isOptional":false}],"description":"<p>交换本元素和目标元素的位置。</p>","returns":[{"type":"Element","description":"<p>本元素。</p>"}],"type":"Element","isFunction":true,"category":"instance","name":"Element#swap"},"window.getPageOffset":{"description":"<p>获取视口的滚动偏移量。</p><p>一些浏览器支持 window.scrollX/window.scrollY 或 window.pageXOffset/window.pageYOffset 直接获取视口的滚动偏移量。</p><p>这里使用通用性更强的方法实现。</p>","returns":[{"type":"Object","description":"<p>坐标，包含 x 和 y 两个数字类型的属性，单位为像素。</p>"}],"type":"Object","see":["http://w3help.org/zh-cn/causes/BX9008"],"isFunction":true,"category":"static","name":"window.getPageOffset"},"Widget.register":{"parameters":[{"description":"<p>要注册的 Widget 的相关信息。</p>","type":"Object","name":"widget","isOptional":false},{"description":"<p>Widget 的类型。</p>","type":"string","name":"widget.type","isOptional":false},{"description":"<p>Widget 的选择符，能被此选择符选中的元素即可被本 Widget 的解析器解析。</p>","type":"string","name":"widget.selector","isOptional":false},{"description":"<p>包含要应用到此类 Widget 的 CSS 规则集的数组。</p>","type":"Array","name":"widget.styleRules","isOptional":true},{"description":"<p>包含此类 Widget 的默认配置的对象。</p>","type":"Object","name":"widget.config","isOptional":true},{"description":"<p>包含此类 Widget 的实例方法的对象。</p>","type":"Object","name":"widget.methods","isOptional":true},{"description":"<p>此类 Widget 的初始化函数。</p>","type":"Function","name":"widget.initialize","isOptional":true}],"description":"<p>注册一个 Widget。</p>","isFunction":true,"category":"static","name":"Widget.register"},"DOMEvent#type":{"description":"<p>事件类型。</p>","type":"string","isFunction":false,"category":"instance","name":"DOMEvent#type"},"Slideshow#activeSlide":{"description":"<p>当前播放的“幻灯片”元素。</p>","type":"Element","isFunction":false,"category":"instance","name":"Slideshow#activeSlide"},"Element#innerText":{"description":"<p>获取/设置本元素内的文本信息。</p><p>注意：getter 在处理 BR 元素或换行符时，各浏览器的行为不一致。</p>","type":"string","isFunction":false,"category":"instance","name":"Element#innerText"},"location.parameters":{"description":"<p>通过此对象可以访问当前页面地址中查询字符串所携带的参数。</p><p>注意：获取的参数值均为原始值（未经过 decodeURIComponent 解码）。</p>","type":"Object","see":["http://w3help.org/zh-cn/causes/HD9001"],"examples":["// 设页面地址为 test.html?a=ok&b=100&b=128\rlocation.parameters\r// {a:'ok', b:['100', '128']}"],"isFunction":false,"category":"static","name":"location.parameters"},"Request.options":{"description":"<p>默认选项。</p><p>修改 Request.options 即可更改 Request 的默认选项，新的默认选项仅对后续创建的实例生效。</p>","type":"Object","isFunction":false,"category":"static","name":"Request.options"},"DOMEventTarget":{"description":"<p>所有的 DOMEventTarget 对象都自动具备处理事件的能力，window 对象、document 对象和所有的 Element 对象都是 DOMEventTarget 对象。</p><p>DOMEventTarget 对象在处理事件时，是工作在 DOM 事件模型中的。</p>","isFunction":true,"category":"constructor","name":"DOMEventTarget"},"Date.now":{"description":"<p>获取系统当前的时间戳。</p>","returns":[{"type":"number","description":"<p>系统当前的时间戳。</p>"}],"type":"number","see":["http://es5.github.com/#x15.9.4.4"],"examples":["Date.now() === new Date().getTime();\r// true"],"isFunction":true,"category":"static","name":"Date.now"},"Paginator#turn":{"parameters":[{"description":"<p>目标页码。</p>","type":"number","name":"number","isOptional":false}],"description":"<p>跳转到指定页。</p><p>仅当没有配置 data-target-url 时，调用本方法才有效。</p><p>当主动调用本方法时，targetPage 可能超过当前客户端保存的 totalPages。因此需要服务端做必要的容错处理，以确保能够正常的返回数据。</p>","returns":[{"type":"Element","description":"<p>本元素。</p>"}],"type":"Element","isFunction":true,"category":"instance","name":"Paginator#turn"},"DOMEvent#isDefaultPrevented":{"description":"<p>查询事件的默认行为是否已被阻止。</p>","returns":[{"type":"boolean","description":"<p>查询结果。</p>"}],"type":"boolean","isFunction":true,"category":"instance","name":"DOMEvent#isDefaultPrevented"},"Element#compareDocumentPosition":{"parameters":[{"description":"<p>目标元素。</p>","type":"Element","name":"target","isOptional":false}],"description":"<p>比较本元素和目标元素在文档树中的位置关系。</p><p>调用本方法后返回的 number 值的含义：</p><table><tr><th>Bits</th><th>Number</th><th>Meaning</th></tr><tr><td>000000</td><td>0</td><td>节点 A 与节点 B 相等</td></tr><tr><td>000001</td><td>1</td><td>节点 A 与节点 B 在不同的文档（或者一个在文档之外）</td></tr><tr><td>000010</td><td>2</td><td>节点 B 在节点 A 之前</td></tr><tr><td>000100</td><td>4</td><td>节点 A 在节点 B 之前</td></tr><tr><td>001000</td><td>8</td><td>节点 B 包含节点 A</td></tr><tr><td>010000</td><td>16</td><td>节点 A 包含节点 B</td></tr><tr><td>100000</td><td>32</td><td>浏览器的私有使用</td></tr></table>","returns":[{"type":"number","description":"<p>比较结果。</p>"}],"type":"number","see":["http://www.w3.org/TR/DOM-Level-3-Core/core.html#Node3-compareDocumentPosition","http://ejohn.org/blog/comparing-document-position/"],"isFunction":true,"category":"instance","name":"Element#compareDocumentPosition"},"Element#matchesSelector":{"parameters":[{"description":"<p>选择符。</p>","type":"string","name":"selector","isOptional":false}],"description":"<p>检查本元素是否能被指定的选择符选中。</p>","returns":[{"type":"boolean","description":"<p>检查结果。</p>"}],"type":"boolean","see":["http://www.w3.org/TR/selectors-api2/","https://github.com/jquery/sizzle/wiki/Sizzle-Home"],"isFunction":true,"category":"instance","name":"Element#matchesSelector"},"TabPanel":{"description":"<p>“标签面板”包含多组“标签”和“面板”，可以通过切换活动“标签”来显示与之对应的“面板”的内容。</p><strong>启用方式：</strong><p>为一个 DIV 元素添加 'widget-tabpanel' 类，即可使该元素成为“标签面板”。</p><strong>结构约定：</strong><ul><li>“标签面板”的后代元素中，类名包含 'tab' 的为“标签”，类名包含 'panel' 的为“面板”。<br>“标签”和“面板”应按照顺序一一对应。</li></ul><strong>新增行为：</strong><ul><li>“标签”都是可见的，“面板”则只有处于激活状态时才可见。<br>同一时刻只有一组“标签”和“面板”能够被激活（默认是第一组），被激活的“标签”和“面板”会被加入 'active' 类。</li><li>如果“标签面板”在文档可用后即被解析完毕，则默认第一组“标签”和“面板”会被激活。</li><li>通过点击或鼠标指向（如果指定了 data-hover-delay 的值）一个“标签”即可激活这个“标签”和与之对应的“面板”。</li><li>在“标签”上发生的 click 事件的默认行为将被阻止。</li></ul><strong>默认样式：</strong><pre class=\"lang-css\"><p>div.widget-tabpanel { display: block; }</p><p>div.widget-tabpanel .panel { display: none; }</p><p>div.widget-tabpanel .active { display: block; }</p></pre><p>可配置项</p><p>data-hover-delay</p><p>指定以毫秒为单位的“标签”鼠标悬停激活延时（建议设置为 '200' - '400' 之间的数值）。</p><p>如果指定本属性，则除点击一个“标签”外，当鼠标指针在一个“标签”范围内停留了指定的时间后，这个“标签”及与其对应的“面板”也将被激活。</p>","fires":[{"description":"<p>{Element} activeTab 当前的激活的“标签”。</p><p>{Element} activePanel 当前的激活的“面板”。</p><p>{Element} inactiveTab 上一个激活的“标签”。</p><p>{Element} inactivePanel 上一个激活的“面板”。</p><p>成功调用 activate 方法后触发。</p>","name":"activate"}],"isFunction":true,"category":"constructor","name":"TabPanel"},"String#toJSON":{"description":"<p>将字符串转换为 JSON 格式的字符串。</p>","returns":[{"type":"string","description":"<p>转换后的字符串。</p>"}],"type":"string","isFunction":true,"category":"instance","name":"String#toJSON"},"Array#remove":{"parameters":[{"description":"<p>指定的元素。</p>","type":"*","name":"element","isOptional":false}],"description":"<p>移除数组中第一个与指定的元素相同的元素。</p><p>IE6 无法通过 [undefined].remove(undefined) 或 [undefined].remove() 成功移除数组中的元素。</p>","returns":[{"type":"boolean","description":"<p>指定的元素是否存在并被移除。</p>"}],"type":"boolean","examples":["[1, 2, 1].remove(1);\r// [2, 1]"],"isFunction":true,"category":"instance","name":"Array#remove"},"Element#outerText":{"description":"<p>获取本元素内的文本信息，或使用文本信息替换本元素。</p><p>与 innerText 不同，如果设置一个元素的 outerText，那么设置的字符串将作为文本节点替换本元素在文档树中的位置。</p><p>注意：getter 在处理 BR 元素或换行符时，各浏览器的行为不一致。</p>","type":"string","isFunction":false,"category":"instance","name":"Element#outerText"},"String#camelize":{"parameters":[{"description":"<p>是否使用大驼峰式命名法（又名 Pascal 命名法），默认为 false，即使用小驼峰式命名法。</p>","type":"boolean","name":"useUpperCamelCase","isOptional":true}],"description":"<p>以 camelize 的形式重组字符串。</p>","returns":[{"type":"string","description":"<p>重组后的字符串。</p>"}],"type":"string","examples":["'foo-bar'.camelize();\r// 'fooBar'\r'foo-bar'.camelize(true);\r// 'FooBar'\r'HTMLFormElement'.camelize();\r// 'htmlFormElement'"],"isFunction":true,"category":"instance","name":"String#camelize"},"Number":{"description":"<p></p>","isFunction":true,"category":"constructor","name":"Number"},"Element#insertAdjacentElement":{"parameters":[{"description":"<p>要插入的位置，可选值请参考下表。</p><table><tr><th>可选值</th><th>含义</th></tr><tr><td><dfn>beforeBegin</dfn></td><td>将目标元素插入到本元素之前。</td></tr><tr><td><dfn>afterBegin</dfn></td><td>将目标元素插入到本元素的所有内容之前。</td></tr><tr><td><dfn>beforeEnd</dfn></td><td>将目标元素插入到本元素的所有内容之后。</td></tr><tr><td><dfn>afterEnd</dfn></td><td>将目标元素插入到本元素之后。</td></tr></table>","type":"string","name":"position","isOptional":false},{"description":"<p>目标元素。</p>","type":"Element","name":"target","isOptional":false}],"description":"<p>在本元素的指定位置插入目标元素。</p>","returns":[{"type":"Element","description":"<p>目标元素。</p>"}],"type":"Element","isFunction":true,"category":"instance","name":"Element#insertAdjacentElement"},"JSEventTarget#on":{"parameters":[{"description":"<p>监听器名称。</p><p>监听器名称由要监听的事件类型（必选）和标签（可选）组成，格式如下：</p><p><dfn><var>type</var></dfn>[<dfn>.<var>label</var></dfn>]</p><p>详细信息请参考下表：</p><table><tr><th>组成部分</th><th>详细描述</th></tr><tr><td><dfn><var>type</var></dfn></td><td>本监听器要监听的事件类型。<br><var>type</var> 只能使用大小写英文字母。</td></tr><tr><td><dfn>.<var>label</var></dfn></td><td>在监听器名称的末尾添加标签可以可以使相同对象上添加的相同类型、相同行为的监听器具备不同的名称。不同的名称可以确保调用 off 方法时能够精确匹配要删除的监听器。<br>添加具有明确含义的标签，可以最大限度的避免监听器被误删。<br><var>label</var> 可以使用英文字母、数字和下划线。</td></tr></table><p>使用逗号分割多个监听器名称，即可以在本对象上使用多个名称将同一个监听器添加多次。</p>","type":"string","name":"name","isOptional":false},{"description":"<p>监听器。</p><p>该函数将在对应的事件发生时被调用，传入事件对象作为参数。</p><p>该函数被调用时 this 的值为监听到本次事件的对象。</p>","type":"Function","name":"listener","isOptional":false}],"description":"<p>为本对象添加事件监听器。</p>","returns":[{"type":"Object","description":"<p>本对象。</p>"}],"type":"Object","isFunction":true,"category":"instance","name":"JSEventTarget#on"},"navigator.userAgentInfo.engine":{"description":"<p>浏览器渲染引擎的类型，值为以下之一：Trident|WebKit|Gecko|Presto。</p>","type":"string","isFunction":false,"category":"static","name":"navigator.userAgentInfo.engine"},"Element#replace":{"parameters":[{"description":"<p>目标元素。</p>","type":"Element","name":"target","isOptional":false},{"description":"<p>是否保留目标元素及后代元素上的所有事件监听器。</p>","type":"boolean","name":"keepListeners","isOptional":true}],"description":"<p>使用本元素替换目标元素。</p>","returns":[{"type":"Element","description":"<p>本元素。</p>"}],"type":"Element","isFunction":true,"category":"instance","name":"Element#replace"},"Array#some":{"parameters":[{"description":"<p>用来检查的回调函数。</p><p>回调函数有三个参数：当前元素，当前元素的索引和调用该方法的数组对象。</p><p>回调函数返回 true 表示当前元素通过检查，反之表示未通过检查。</p>","type":"Function","name":"callback","isOptional":false},{"description":"<p>callback 被调用时 this 的值，如果省略或指定为 null，则使用全局对象 window。</p>","type":"Object","name":"thisObject","isOptional":true}],"description":"<p>检查数组中是否有任一元素符合某个条件。</p>","returns":[{"type":"boolean","description":"<p>检查结果。</p>"}],"type":"boolean","see":["http://es5.github.com/#x15.4.4.17","https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Array/some"],"examples":["[1, 2, 3].some(function(item) {\r  return item === 2;\r});\r// true"],"isFunction":true,"category":"instance","name":"Array#some"},"Date#format":{"parameters":[{"description":"<p>由代表日期字段的标识符和其他字符组成的格式字符串，默认为 'YYYY-MM-DD'。</p><p>各标识符及其含义：</p><table><tr><th>字符</th><th>含义</th></tr><tr><td>YYYY</td><td>四位数年份。</td></tr><tr><td>MM</td><td>两位数月份。</td></tr><tr><td>DD</td><td>两位数日期。</td></tr><tr><td>hh</td><td>两位数小时，24 小时制。</td></tr><tr><td>mm</td><td>两位数分钟。</td></tr><tr><td>ss</td><td>两位数秒钟。</td></tr><tr><td>s</td><td>三位数毫秒。</td></tr><tr><td>TZD</td><td>时区指示。世界标准时间显示大写字母 Z，其他时区用当地时间加时差表示。</td></tr></table>","type":"string","name":"format","isOptional":true},{"description":"<p>是否格式化为世界标准时间。</p>","type":"boolean","name":"toUTC","isOptional":true}],"description":"<p>将日期对象格式化为字符串。</p>","returns":[{"type":"string","description":"<p>格式化后的字符串。</p>"}],"type":"string","see":["http://www.w3.org/TR/NOTE-datetime","http://en.wikipedia.org/wiki/ISO_8601","http://blog.stevenlevithan.com/archives/date-time-format"],"examples":["new Date(2000,0,1).format()\r// \"2000-01-01\"\rnew Date(2000,2,1).format('MM-DD hh:mm', true)\r// \"02-29 16:00\"\rnew Date('Fri, 21 Dec 2012 15:14:35 GMT').format('YYYY-MM-DDThh:mm:ss.sTZD')\r// \"2012-12-21T23:14:35.000+08:00\"\rnew Date(2012, 0, 1).format('YYYYYY')\r// 未被成功匹配的字符均会作为普通字符显示。\r// \"2012YY\""],"isFunction":true,"category":"instance","name":"Date#format"},"Element#empty":{"description":"<p>将本元素的内容清空，并删除本元素及后代元素上的所有事件监听器。</p>","returns":[{"type":"Element","description":"<p>本元素。</p>"}],"type":"Element","isFunction":true,"category":"instance","name":"Element#empty"},"String#endsWith":{"parameters":[{"description":"<p>指定的子串。</p>","type":"string","name":"substring","isOptional":false}],"description":"<p>检查字符串是否以指定的子串结束。</p>","returns":[{"type":"boolean","description":"<p>检查结果。</p>"}],"type":"boolean","see":["http://wiki.ecmascript.org/doku.php?id=harmony:string_extras"],"examples":["'abcdefg'.endsWith('a');\r// false"],"isFunction":true,"category":"instance","name":"String#endsWith"},"navigator.isSafari":{"description":"<p>浏览器是否为 Safari。</p>","type":"boolean","isFunction":false,"category":"static","name":"navigator.isSafari"},"Validator":{"description":"<p>“表单验证器”可以在表单提交的时候根据配置的“验证规则”对表单域的值（而不是某一个控件的值）进行验证，并能在不同的状态下显示相应的提示信息。</p><strong>启用方式：</strong><p>为一个 FORM 元素添加 'widget-validator' 类，即可使该元素成为“表单验证器”。</p><strong>结构约定：</strong><ul><li>“表单验证器”的后代元素中，类名包含 'state' 的为“状态指示器”，类名包含 'message' 的为“提示信息容器”。这些元素还应指定 data-for=\"<var>name</var>\" 属性，<var>name</var> 为这些元素对应的表单域的名称。</li><li>一个表单域最多只能有一个“状态指示器”和一个“提示信息容器”（如果指定了多个则只有第一个生效），并且它们必须在对应的表单域“验证规则”被解析时可访问。</li></ul><strong>新增行为：</strong><ul><li>如果一个表单域配置了“验证规则”，当其中包含的任何控件的值被用户改变时，都将对该表单域进行验证，并触发 fieldvalidate 事件，验证结束后会触发 fieldvalidated 事件。<br>如果一个表单域未能通过验证，提示信息会被注入为该表单域指定的“提示信息容器”中。<br>要手动验证某一个表单域，触发其中任一控件的 change 事件即可。</li><li>当某个表单域的输入或验证状态发生变化时，“状态指示器”和“提示信息容器”的类名也会随之改变（输入中=input && 验证中=validating || 通过验证=valid || 未通过验证=invalid），可以利用此特性在各种状态下显示不同的内容。</li><li>该表单的 submit 事件的默认行为将被阻止，当表单的 submit 事件发生时，会对所有已配置的“验证规则”涉及到的、且尚未验证的表单域进行验证，并触发 validate 事件，验证结束后会触发 validated 事件。<br>如果没有需要服务端验证的表单域，validated 事件将同步触发，否则 validated 事件将在所有的服务端验证结束后异步触发。<br>如果用户在可能存在的服务端验证尚未全部结束之前修改了任一控件的值，则会立即取消当前的服务端验证，并触发 validated 事件，本次验证按失败处理。</li><li>当该表单触发 reset 事件时，当前的验证结果和所有已显示的提示信息也会随之重置。</li></ul>","fires":[{"description":"<p>{string} name 验证的表单域的名称。</p><p>{string|Array} value 验证的表单域的值。</p><p>当开始验证一个表单域时触发。</p>","name":"fieldvalidate"},{"description":"<p>{string} name 验证的表单域的名称。</p><p>{string|Array} value 验证的表单域的值。</p><p>{boolean} passed 本表单域的值是否已通过验证。</p><p>{string} errorMessage “提示信息”字符串，若验证通过则为空字符串。</p><p>在一个表单域验证结束后触发。</p>","name":"fieldvalidated"},{"description":"<p>当表单验证开始时（即表单的 submit 事件发生时）触发。</p>","name":"validate"},{"description":"<p>{boolean} passed 本表单所有已配置验证规则的域的值是否已全部通过验证。</p><p>{Array} invalidFields 尚未通过验证的字段，若验证通过则为空数组。</p><p>在表单验证结束后触发。</p>","name":"validated"}],"isFunction":true,"category":"constructor","name":"Validator"},"Array#indexOf":{"parameters":[{"description":"<p>指定的元素。</p>","type":"*","name":"searchElement","isOptional":false},{"description":"<p>从指定索引为起始点开始查找，默认为 0。</p><p>如果该值大于数组的长度，则使用数组的长度作为查找起始点。</p><p>如果该值为负数，则表示从数组的末尾开始计算的偏移量，即使用 (fromIndex + 数组的长度) 作为查找起始点，如果这个结果仍为负数，则使用 0 作为查找起始点。</p>","type":"number","name":"fromIndex","isOptional":true}],"description":"<p>返回数组中第一次出现指定的元素的索引。</p>","returns":[{"type":"number","description":"<p>索引值，如果数组中不包含指定的元素，则返回 -1。</p>"}],"type":"number","see":["http://es5.github.com/#x15.4.4.14","https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Array/indexOf"],"examples":["[1, 2, 3, 2, 1].indexOf(2);\r// 1\r[1, 2, 3, 2, 1].indexOf(2, 2);\r// 3\r[1, 2, 3, 2, 1].indexOf(2, -3)\r// 3\r[1, 2, 3, 2, 1].indexOf(8)\r// -1"],"isFunction":true,"category":"instance","name":"Array#indexOf"},"navigator.userAgentInfo.version":{"description":"<p>浏览器的版本号。</p>","type":"string","isFunction":false,"category":"static","name":"navigator.userAgentInfo.version"},"Element#setStyle":{"parameters":[{"description":"<p>特性名（支持复合特性），应使用 camel case 格式。</p>","type":"string","name":"propertyName","isOptional":false},{"description":"<p>特性值，若为数字，则为期望长度单位的特性值自动添加长度单位 'px'。</p>","type":"number|string","name":"propertyValue","isOptional":false}],"description":"<p>为本元素设置一条行内样式声明。</p><p>注意：如果设置的是长度值，若长度单位不是 'px' 则不能省略长度单位。</p>","returns":[{"type":"Element","description":"<p>本元素。</p>"}],"type":"Element","isFunction":true,"category":"instance","name":"Element#setStyle"},"DOMEventTarget#on":{"parameters":[{"description":"<p>监听器名称。</p><p>监听器名称由要监听的事件类型（必选）、限定符（可选）和标签（可选）组成，格式如下：</p><p><dfn><var>type</var></dfn>[<dfn>:relay(<var>selector</var>)</dfn>][<dfn>:once</dfn>|<dfn>:idle(<var>n</var>)</dfn>|<dfn>:throttle(<var>n</var>)</dfn>][<dfn>.<var>label</var></dfn>]</p><p>详细信息请参考下表：</p><table><tr><th>组成部分</th><th>详细描述</th></tr><tr><td><dfn><var>type</var></dfn></td><td>本监听器要监听的事件类型。<br><var>type</var> 只能使用大小写英文字母。</td></tr><tr><td><dfn>:relay(<var>selector</var>)</dfn></td><td>指定本监听器为代理事件监听器，监听的目标为文档树中（如果本方法在 document 上被调用）或本元素的后代元素中（如果本方法在一个元素上被调用），符合 <var>selector</var> 限定的元素。<br><var>selector</var> 应为合法的 CSS 选择符。</td></tr><tr><td><dfn>:once</dfn></td><td>指定本监听器仅能被调用一次，调用后即被自动删除。<br>自动删除时，会使用添加本监听器时使用的监听器名称。</td></tr><tr><td><dfn>:idle(<var>n</var>)</dfn></td><td>指定本监听器将在该类型的事件每次被触发 <var>n</var> 毫秒后、且下一次同类型的事件被触发前才能被调用。<br><var>n</var> 应为大于 0 的数字。</td></tr><tr><td><dfn>:throttle(<var>n</var>)</dfn></td><td>指定当事件连续发生时，本监听器可被连续调用的最短时间间隔为 <var>n</var> 毫秒。<br><var>n</var> 应为大于 0 的数字。</td></tr><tr><td><dfn>.<var>label</var></dfn></td><td>在监听器名称的末尾添加标签可以可以使相同对象上添加的相同类型、相同行为的监听器具备不同的名称。不同的名称可以确保调用 off 方法时能够精确匹配要删除的监听器。<br>添加具有明确含义的标签，可以最大限度的避免监听器被误删。<br><var>label</var> 可以使用英文字母、数字和下划线。</td></tr></table><p>使用逗号分割多个监听器名称，即可以在本对象上使用多个名称将同一个监听器添加多次。</p>","type":"string","name":"name","isOptional":false},{"description":"<p>监听器。</p><p>该函数将在对应的事件发生时被调用，传入事件对象作为参数。如果指定了 idle 或 throttle 限定符，则该事件对象无法被阻止传播或取消默认行为。</p><p>该函数被调用时 this 的值为监听到本次事件的对象，即：</p><ul><li>如果是普通监听器，则 this 的值为本对象。</li><li>如果是代理监听器，则 this 的值为被代理的元素。</li></ul><p>如果该函数返回 false，则相当于调用了传入的事件对象的 stopPropagation 和 preventDefault 方法。</p>","type":"Function","name":"listener","isOptional":false}],"description":"<p>为本对象添加事件监听器。</p>","returns":[{"type":"Object","description":"<p>本对象。</p>"}],"type":"Object","see":["http://mootools.net/","http://www.quirksmode.org/dom/events/index.html"],"examples":["document.on('click', onClick);\r// 为 document 添加一个 click 事件的监听器。","$element.on('click:relay(a)', onClick);\r// 为 $element 添加一个代理监听器，为该元素所有的后代 A 元素代理 click 事件的监听。","$element.on('click.temp', onClick);\r// 为 $element 添加一个 click 事件的监听器，并为其指定一个标签 temp。","$element.on('input:idle(200)', onInput);\r// 为 $element 添加一个 input 事件的监听器，该监听器将在每次 input 事件被触发 200 毫秒后、且下一次 input 事件被触发前被调用。","$element.on('scroll:throttle(200)', onScroll);\r// 为 $element 添加一个 scroll 事件的监听器，该监听器可被连续调用的最短时间间隔为 200 毫秒。"],"isFunction":true,"category":"instance","name":"DOMEventTarget#on"},"DOMEvent#isImmediatePropagationStopped":{"description":"<p>查询事件的传播是否已被立即阻止。</p>","returns":[{"type":"boolean","description":"<p>查询结果。</p>"}],"type":"boolean","isFunction":true,"category":"instance","name":"DOMEvent#isImmediatePropagationStopped"},"navigator.languageCode":{"description":"<p>浏览器的语言代码。</p>","type":"string","isFunction":false,"category":"static","name":"navigator.languageCode"},"navigator.isOpera":{"description":"<p>浏览器是否为 Opera。</p>","type":"boolean","isFunction":false,"category":"static","name":"navigator.isOpera"},"Function":{"description":"<p></p>","isFunction":true,"category":"constructor","name":"Function"},"Object.clone":{"parameters":[{"description":"<p>原始对象。</p>","type":"Object","name":"source","isOptional":false},{"description":"<p>是否进行深克隆。</p>","type":"boolean","name":"recursively","isOptional":true}],"description":"<p>克隆一个对象。</p><p>实例关系和原型链都不会被克隆。</p><p>一些类型的值是无法被克隆的，当尝试克隆它们时，会抛出异常，它们是 (传入 typeOf 方法后返回的值)：</p><ul><li>function</li><li>object.Error</li><li>object.Math</li><li>object.JSON</li><li>object.Arguments</li><li>object.Global</li><li>object.Node</li><li>object.Collection</li></ul><p>如果成功对一个对象进行深克隆，则对克隆对象的任何操作都不会影响原始对象。</p>","returns":[{"type":"Object","description":"<p>克隆对象。</p>"}],"type":"Object","isFunction":true,"category":"static","name":"Object.clone"},"Element#hasClass":{"parameters":[{"description":"<p>类名，如果要同时指定多个类名，使用逗号将它们分开即可。</p>","type":"string","name":"className","isOptional":false}],"description":"<p>检查本元素是否有指定的类名。</p>","returns":[{"type":"boolean","description":"<p>检查结果。</p>"}],"type":"boolean","isFunction":true,"category":"instance","name":"Element#hasClass"},"JSEvent":{"parameters":[{"description":"<p>事件类型。</p>","type":"string","name":"type","isOptional":false},{"description":"<p>触发本事件的对象。</p>","type":"Object","name":"target","isOptional":false},{"description":"<p>附加数据。</p>","type":"Object","name":"data","isOptional":true}],"description":"<p>事件对象。</p>","isFunction":true,"category":"constructor","name":"JSEvent"},"Element#contains":{"parameters":[{"description":"<p>目标元素。</p>","type":"Element","name":"target","isOptional":false}],"description":"<p>判断本元素是否包含目标元素。</p><p>注意，如果本元素和目标元素一致，本方法也将返回 true。</p>","returns":[{"type":"boolean","description":"<p>判断结果。</p>"}],"type":"boolean","isFunction":true,"category":"instance","name":"Element#contains"},"DOMEventTarget#off":{"parameters":[{"description":"<p>监听器名称。</p><p>本对象上添加的所有名称与 name 匹配的监听器都将被删除。</p><p>使用逗号分割多个监听器名称，即可同时删除该对象上的多个监听器。</p>","type":"string","name":"name","isOptional":false}],"description":"<p>删除本对象上已添加的事件监听器。</p>","returns":[{"type":"Object","description":"<p>本对象。</p>"}],"type":"Object","examples":["document.off('click');\r// 为 document 删除名为 click 的监听器。","$element.off('click:relay(a)');\r// 为 $element 删除名为 click:relay(a) 的监听器。"],"isFunction":true,"category":"instance","name":"DOMEventTarget#off"},"window.$":{"parameters":[{"description":"<p>不同类型的元素表示。</p>","type":"string|Element","name":"e","isOptional":false}],"description":"<p>对 document.$ 的引用。</p><p>在编写应用代码时，可以使用 $ 来代替 document.$。</p>","returns":[{"type":"Element","description":"<p>扩展后的元素。</p>"}],"type":"Element","isFunction":true,"category":"static","name":"window.$"},"Boolean#toJSON":{"description":"<p>将布尔值转换为 JSON 格式的字符串。</p>","returns":[{"type":"string","description":"<p>转换后的字符串。</p>"}],"type":"string","isFunction":true,"category":"instance","name":"Boolean#toJSON"},"Slideshow#showNext":{"description":"<p>播放下一张“幻灯片”。</p><p>播放完最后一张后，将开始播放第一张。</p>","returns":[{"type":"Element","description":"<p>本元素。</p>"}],"type":"Element","isFunction":true,"category":"instance","name":"Slideshow#showNext"},"Validator#removeValidationRules":{"parameters":[{"description":"<p>包含要删除“验证规则”的表单域的名称的数组。</p>","type":"Array","name":"names","isOptional":false}],"description":"<p>删除“验证规则”。</p><p>删除某个表单域的“验证规则”时，该表单域已显示的提示信息也将被清除。</p>","returns":[{"type":"Element","description":"<p>本元素。</p>"}],"type":"Element","isFunction":true,"category":"instance","name":"Validator#removeValidationRules"},"Animation#timePoint":{"description":"<p>当前帧所处的时间点。</p>","type":"number","isFunction":false,"category":"instance","name":"Animation#timePoint"},"Element#getLastChild":{"description":"<p>获取本元素的最后一个子元素。</p>","returns":[{"type":"Element","description":"<p>本元素的最后一个子元素。</p>"}],"type":"Element","isFunction":true,"category":"instance","name":"Element#getLastChild"},"JSEvent#type":{"description":"<p>事件类型。</p>","type":"string","isFunction":false,"category":"instance","name":"JSEvent#type"},"JSEventTarget#fire":{"parameters":[{"description":"<p>事件类型。</p>","type":"string","name":"type","isOptional":false},{"description":"<p>在事件对象上附加的数据。</p>","type":"Object","name":"data","isOptional":true}],"description":"<p>触发本对象的某类事件。</p>","returns":[{"type":"Object","description":"<p>事件对象。</p>"}],"type":"Object","isFunction":true,"category":"instance","name":"JSEventTarget#fire"},"Element#getChildren":{"description":"<p>获取本元素的所有子元素。</p>","returns":[{"type":"Array","description":"<p>包含本元素的所有子元素的数组，数组内各元素的顺序为调用本方法时各元素在文档树中的顺序。</p>"}],"type":"Array","isFunction":true,"category":"instance","name":"Element#getChildren"},"DOMEvent#leftButton":{"description":"<p>事件发生时，鼠标左键是否被按下，仅在鼠标事件对象上有效。</p>","type":"boolean","isFunction":false,"category":"instance","name":"DOMEvent#leftButton"},"Element#remove":{"parameters":[{"description":"<p>是否保留本元素及后代元素上的所有事件监听器。</p>","type":"boolean","name":"keepListeners","isOptional":true}],"description":"<p>将本元素从文档树中删除。</p>","returns":[{"type":"Element","description":"<p>本元素。</p>"}],"type":"Element","isFunction":true,"category":"instance","name":"Element#remove"},"navigator.isFirefox":{"description":"<p>浏览器是否为 Firefox。</p>","type":"boolean","isFunction":false,"category":"static","name":"navigator.isFirefox"},"TabPanel#activeTab":{"description":"<p>当前被激活的“标签”。</p>","type":"Element","isFunction":false,"category":"instance","name":"TabPanel#activeTab"},"String#dasherize":{"description":"<p>以 dasherize 的形式重组字符串。</p>","returns":[{"type":"string","description":"<p>重组后的字符串。</p>"}],"type":"string","examples":["'foo_bar'.dasherize();\r// 'foo-bar'\r'FooBar'.dasherize();\r// 'foo-bar'"],"isFunction":true,"category":"instance","name":"String#dasherize"},"JSON":{"description":"<p>JSON 对象。</p>","isFunction":false,"category":"static","name":"JSON"},"Element#setData":{"parameters":[{"description":"<p>数据名，必须为 camel case 形式，并且只能包含英文字母。</p>","type":"string","name":"key","isOptional":false},{"description":"<p>数据值，必须为字符串。</p>","type":"string","name":"value","isOptional":false}],"description":"<p>向本元素中保存一条自定义数据。</p>","returns":[{"type":"Element","description":"<p>本元素。</p>"}],"type":"Element","isFunction":true,"category":"instance","name":"Element#setData"},"String#clean":{"description":"<p>合并字符串中的空白字符，并去掉首尾的空白字符。</p>","returns":[{"type":"string","description":"<p>清理后的字符串。</p>"}],"type":"string","examples":["' a b  c   d    e     f      g       '.clean();\r// 'a b c d e f g'"],"isFunction":true,"category":"instance","name":"String#clean"},"Dialog#isOpen":{"description":"<p>“对话框”当前是否为打开状态。</p>","type":"boolean","isFunction":false,"category":"instance","name":"Dialog#isOpen"},"Array":{"description":"<p></p>","isFunction":true,"category":"constructor","name":"Array"},"JSEventTarget.create":{"parameters":[{"description":"<p>目标对象。</p><p>目标对象不应该是 window、document 或 Element 对象，因为这些对象已经具备处理事件的能力，并且使用的是 DOM 事件模型。</p>","type":"Object","name":"target","isOptional":false}],"description":"<p>让目标对象成为一个 JSEventTarget 对象，以具备处理事件的能力。</p><ul><li>目标对象将被添加实例属性 eventHandlers 用于保存处理事件所必需的数据。</li><li>目标对象将被添加实例方法 on 用于添加事件监听器。</li><li>目标对象将被添加实例方法 off 用于删除事件监听器。</li><li>目标对象将被添加实例方法 fire 用于触发某类事件。</li></ul>","returns":[{"type":"Object","description":"<p>目标对象。</p>"}],"type":"Object","isFunction":true,"category":"static","name":"JSEventTarget.create"},"String#repeat":{"parameters":[{"description":"<p>要重复的次数。</p>","type":"number","name":"count","isOptional":false}],"description":"<p>将字符串重复指定的次数。</p>","returns":[{"type":"string","description":"<p>重复指定次数后的字符串。</p>"}],"type":"string","see":["http://wiki.ecmascript.org/doku.php?id=harmony:string.prototype.repeat"],"examples":["'*'.repeat(5);\r// '*****'"],"isFunction":true,"category":"instance","name":"String#repeat"},"navigator.isChrome":{"description":"<p>浏览器是否为 Chrome。</p>","type":"boolean","isFunction":false,"category":"static","name":"navigator.isChrome"},"JSON.stringify":{"parameters":[{"description":"<p>要转换的 ECMAScript 值，通常是 Object 或 Array 类型，也可以是 String、Boolean、Number、Date 类型或者 null。</p>","type":"*","name":"value","isOptional":false},{"description":"<p>用来更改/过滤转换结果的函数或数组。</p><dl><dt>如果是函数，则：</dt><dd><p>该函数将在解析要转换的 ECMAScript 值中每一个键值对之前被调用，传入两个参数 key 和 value，并使用其返回值代替 value 进行转换。如果返回 undefined，则正在处理的这个键值对将被从转换结果中删除。</p><p>该函数第一次被调用（如果要转换的 ECMAScript 值的类型是 String、Boolean、Number、Date 或为 null 时则是唯一一次被调用）时，传入的 key 是空字符串，value 是要转换的 ECMAScript 值。</p><p>该函数被调用时 this 的值为当前传入的 key 和 value 所属的 ECMAScript 对象，可能为 Object 或 Array。</p></dd><dt>如果是数组，则：</dt><dd><p>该数组只能包含字符串，本方法会仅对 key 出现在数组中的部分进行转换。</p></dd></dl>","type":"Function|Array","name":"replacer","isOptional":true},{"description":"<p>为使 JSON 字符串更易读而将其换行，并在每行内容之前加入的前缀。</p><p>如果是字符串，则直接加入这个字符串作为前缀。若字符串的长度超过 10，则仅保留前 10 个字符。</p><p>如果是数字，则加入对应数目的空格符。若数字大于 10，则只使用 10 个空格符。</p><p>如果未指定该值，或者该值为 '' 或小于 1 的数字，则 JSON 字符串不会换行。</p>","type":"string|number","name":"space","isOptional":true}],"description":"<p>将 ECMAScript 值转换为 JSON 格式的字符串。</p>","returns":[{"type":"string","description":"<p>转换后的字符串。</p>"}],"type":"string","isFunction":true,"category":"static","name":"JSON.stringify"},"Slideshow#activePointer":{"description":"<p>当前播放的“指示器”元素。</p>","type":"Element","isFunction":false,"category":"instance","name":"Slideshow#activePointer"},"Object.fromQueryString":{"parameters":[{"description":"<p>要转换的查询字符串。</p>","type":"string","name":"string","isOptional":false},{"description":"<p>转换时不使用 decodeURIComponent 解码。</p>","type":"boolean","name":"dontDecode","isOptional":true}],"description":"<p>将一个用于 HTTP 传输的查询字符串转换为对象。</p>","returns":[{"type":"Object","description":"<p>转换后的对象。</p>"}],"type":"Object","examples":["Object.fromQueryString('c=&d=100&e=Composite%20Value&e=true');\r// {c: '', d: '100', e: ['Composite Value', 'true']}"],"isFunction":true,"category":"static","name":"Object.fromQueryString"},"Element#addClass":{"parameters":[{"description":"<p>类名，如果要同时指定多个类名，使用逗号将它们分开即可。</p>","type":"string","name":"className","isOptional":false}],"description":"<p>为本元素添加指定的类名。</p>","returns":[{"type":"Element","description":"<p>本元素。</p>"}],"type":"Element","isFunction":true,"category":"instance","name":"Element#addClass"},"DOMEvent#preventDefault":{"description":"<p>阻止事件的默认行为。</p>","isFunction":true,"category":"instance","name":"DOMEvent#preventDefault"},"Request#abort":{"description":"<p>取消请求。</p><p>仅在一次异步模式的请求正在进行时，调用本方法才有效。</p>","returns":[{"type":"boolean","description":"<p>本方法是否已被成功调用。</p>"}],"type":"boolean","isFunction":true,"category":"instance","name":"Request#abort"},"document.loadScript":{"parameters":[{"description":"<p>脚本文件的路径。</p>","type":"string","name":"url","isOptional":false},{"description":"<p>可选参数。</p>","type":"Object","name":"options","isOptional":true},{"description":"<p>脚本文件的字符集。</p>","type":"string","name":"options.charset","isOptional":true},{"description":"<p>加载完毕后的回调。</p><p>该函数被调用时 this 的值为加载本脚本时创建的 SCRIPT 元素。</p>","type":"Function","name":"options.onLoad","isOptional":true}],"description":"<p>加载脚本。</p>","isFunction":true,"category":"static","name":"document.loadScript"},"cookie.getItem":{"parameters":[{"description":"<p>数据名。</p>","type":"string","name":"key","isOptional":false}],"description":"<p>从 cookie 中读取一条数据。</p>","returns":[{"type":"string","description":"<p>数据值。</p><p>如果没有对应的值，返回 null。</p>"}],"type":"string","isFunction":true,"category":"static","name":"cookie.getItem"},"Slideshow":{"description":"<p>“幻灯片播放器”可以自动轮播一组“幻灯片”。</p><strong>启用方式：</strong><p>为一个 DIV 元素添加 'widget-slideshow' 类，即可使该元素成为“幻灯片播放器”。</p><strong>结构约定：</strong><ul><li>“幻灯片播放器”的后代元素中，类名包含 'slides' 的为“幻灯片”的容器，类名包含 'slide' 的为“幻灯片”，类名包含 'pointers' 的为“指示器”的容器，类名包含 'pointer' 的为“指示器”，类名包含 'prev' 的为“播放上一张”按钮，类名包含 'next' 的为“播放下一张”按钮。<br>上述内容中，只有“幻灯片”和“幻灯片”的容器是必选的，其他均可以省略。如果“幻灯片”小于两个，则即便有“指示器”、“播放上一张”和“播放下一张”按钮，它们也将不可见。</li><li>所有“幻灯片”都应有共同的父元素，并且它们的渲染尺寸也应与其父元素的渲染尺寸一致。</li><li>如果需要“指示器”，则所有“指示器”也应有共同的父元素，它们的数量也应和“幻灯片”的数量一致。</li></ul><strong>新增行为：</strong><ul><li>当前播放的“幻灯片”和“指示器”（如果有）会被加入 'active' 类。</li><li>如果“幻灯片播放器”在文档可用后即被解析完毕，则默认播放第一张“幻灯片”，并且每隔一定的时间后（取决于 data-interval 的设定值），即自动播放下一张“幻灯片”。</li><li>如果自动播放正在进行，则当鼠标移入本元素时，自动播放会被暂时禁用；当鼠标移出本元素时，自动播放会被重新启用。</li><li>如果有“指示器”，则通过点击或鼠标指向（如果指定了 data-hover-delay 的值）一个“指示器”即可播放与之对应的“幻灯片”。</li><li>如果有“播放上一张”和“播放下一张”按钮，则通过点击这些按钮即可播放上一张或下一张“幻灯片”。<br>当“播放上一张”或“播放下一张”按钮的类名中包含 'disabled' 时，点击它们无效。</li></ul><strong>默认样式：</strong><pre class=\"lang-css\"><p>div.widget-slideshow { display: block; }</p><p>div.widget-slideshow .slides { display: block; position: relative; }</p><p>div.widget-slideshow .slide { display: block; position: absolute; left: 0; top: 0; z-index: auto; }</p><p>div.slideshow-single .pointers, div.slideshow-single .prev, div.slideshow-single .next { display: none !important; }</p></pre><p>可配置项</p><p>data-interval</p><p>以毫秒为单位的“幻灯片”自动播放间隔时间。</p><p>如果不指定本属性，则使用 '5000'，即每 5 秒更换一张“幻灯片”。</p><p>data-hover-delay</p><p>以毫秒为单位的“指示器”鼠标悬停播放延时，仅在“指示器”存在时有效（建议设置为 '200' - '400' 之间的数值）。</p><p>如果指定本属性，则除点击一个“指示器”外，当鼠标指针在一个“指示器”范围内停留了指定的时间后，这个“指示器”对应的“幻灯片”也将被播放。</p><p>data-animation</p><p>“幻灯片”切换时使用的动画效果，可选项有 'none'，'fade', 'cover' 和 'slide'。</p><p>如果不指定本属性，则使用 'fade'。</p><p>当动画效果为 'slide' 时，所有“幻灯片”将被从左到右浮动排列；其他情况下所有“幻灯片”将绝对定位在其容器的左上角。</p>","fires":[{"description":"<p>{Element} activeSlide 当前播放的“幻灯片”。</p><p>{Element} activePointer 当前播放的“指示器”。</p><p>{Element} inactiveSlide 上一个播放的“幻灯片”。</p><p>{Element} inactivePointer 上一个播放的“指示器”。</p><p>成功调用 show 方法后触发。</p>","name":"show"},{"description":"<p>调用 showPrevious 方法后触发。</p>","name":"showprevious"},{"description":"<p>调用 showNext 方法后触发。</p>","name":"shownext"}],"isFunction":true,"category":"constructor","name":"Slideshow"},"document.preloadImages":{"parameters":[{"description":"<p>包含需预加载的图片路径的数组。</p>","type":"Array","name":"urlArray","isOptional":false},{"description":"<p>每个图片加载完毕后的回调。</p><p>该函数被调用时 this 的值为已完成加载的 IMG 元素。</p>","type":"Function","name":"onLoad","isOptional":true}],"description":"<p>预加载图片。</p>","isFunction":true,"category":"static","name":"document.preloadImages"},"Calendar":{"description":"<p>“月历”可以显示指定月份的日期排列情况。</p><strong>启用方式：</strong><p>为一个 DIV 元素添加 'widget-calendar' 类，即可使该元素成为“月历”。</p><strong>结构约定：</strong><ul><li>“月历”初始化时，会在其内部自动追加一个表格元素，以显示指定月份的日期。</li><li>当“月历”列出了一个月份的日期时，在上述表格元素中，每个单元格都会被添加用于表示星期几的类名 'sun'、'mon'、'tues'、'wed'、'thurs'、'fri'、'sat'，其中上一个月和下一个月的日期所在的单元格还会额外被添加类名 'prev' 和 'next'，今天的日期所在的单元格还会额外被添加类名 'today'。</li></ul><strong>新增行为：</strong><ul><li>如果“月历”在文档可用后即被解析完毕，且其 data-month 属性的值不为 '0000-00'，则其 update 方法会被自动调用。</li></ul><strong>默认样式：</strong><pre class=\"lang-css\"><p>div.widget-calendar { visibility: hidden; }</p><p>div.widget-calendar table { table-layout: fixed; border-collapse: separate; border-spacing: 1px; width: 218px; font: 14px/20px Verdana, Helvetica, Arial, SimSun, serif; cursor: default; }</p><p>div.widget-calendar table td { padding: 0; border: 1px solid silver; border-radius: 2px; text-align: center; }</p><p>div.widget-calendar thead td { border-color: white; color: navy; font-weight: bold; }</p><p>div.widget-calendar tbody td { color: black; }</p><p>div.widget-calendar tbody td.prev, div.widget-calendar tbody td.next { color: silver; }</p><p>div.widget-calendar tbody td.today { font-weight: bold; text-decoration: underline; }</p></pre><p>可配置项</p><p>data-month</p><p>指定要显示哪一个月的“月历”，格式为 YYYY-MM。</p><p>如果不指定本属性，则使用当前月份作为默认值。</p><p>当需要将“月历”集成在其他功能中，只希望主动调用 update 方法进行更新时，应指定为 '0000-00'，这样就不会以当前月份作为默认值来自动调用 update 方法。</p><p>data-first-day</p><p>指定每周的第一天是星期几，取值范围为 0 - 6。</p><p>如果不指定本属性，则使用 0 作为默认值，即每周的第一天为星期日。</p>","fires":[{"description":"<p>{string} month 显示的月份，格式为 YYYY-MM 的字符串。</p><p>调用 update 方法后触发。</p>","name":"update"},{"description":"<p>{Element} cell 已更新的单元格。</p><p>{Date} date 已更新的日期。</p><p>日期单元格更新后触发。每次调用 update 方法时，每个日期单元格都会更新一次。</p>","name":"cellupdate"}],"isFunction":true,"category":"constructor","name":"Calendar"},"String#trim":{"description":"<p>删除字符串两端的空白符。</p>","returns":[{"type":"string","description":"<p>删除两端的空白符后的字符串。</p>"}],"type":"string","see":["http://blog.stevenlevithan.com/archives/faster-trim-javascript","http://es5.github.com/#x15.5.4.20"],"examples":["' hello  '.trim();\r// 'hello'"],"isFunction":true,"category":"instance","name":"String#trim"},"Array.isArray":{"parameters":[{"description":"<p>提供的值。</p>","type":"*","name":"value","isOptional":false}],"description":"<p>检查提供的值是否为数组。</p>","returns":[{"type":"boolean","description":"<p>检查结果。</p>"}],"type":"boolean","see":["http://es5.github.com/#x15.4.3.2","https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Array/isArray"],"examples":["Array.isArray([]);\r// true"],"isFunction":true,"category":"static","name":"Array.isArray"},"DOMEventTarget#fire":{"parameters":[{"description":"<p>事件类型。</p>","type":"string","name":"type","isOptional":false},{"description":"<p>在事件对象上附加的数据。</p><p>data 的属性会被追加到事件对象中，但名称为 originalEvent、type、target 的属性除外。</p><p>如果指定其 bubbles 属性为 true，则该事件将可以在文档树中传播。</p>","type":"Object","name":"data","isOptional":true}],"description":"<p>触发本对象的某类事件。</p><p>通过调用本方法产生的事件对象不具备默认行为。</p><p>如果需要执行此类事件的默认行为，可以直接在本对象上调用对应的方法（如 click、reset 等）。</p>","returns":[{"type":"Object","description":"<p>事件对象。</p>"}],"type":"Object","isFunction":true,"category":"instance","name":"DOMEventTarget#fire"},"document.head":{"description":"<p>获取文档的 HEAD 元素。</p>","type":"Element","examples":["document.documentElement === document.getElementsByTagName('html')[0];\r// true\rdocument.head === document.getElementsByTagName('head')[0];\r// true\rdocument.body === document.getElementsByTagName('body')[0];\r// true"],"isFunction":false,"category":"static","name":"document.head"},"HTMLFormElement":{"description":"<p>确保 HTMLFormElement.prototype 可访问。</p>","isFunction":false,"category":"static","name":"HTMLFormElement"},"Array#every":{"parameters":[{"description":"<p>用来检查的回调函数。</p><p>回调函数有三个参数：当前元素，当前元素的索引和调用该方法的数组对象。</p><p>回调函数返回 true 表示当前元素通过检查，反之表示未通过检查。</p>","type":"Function","name":"callback","isOptional":false},{"description":"<p>callback 被调用时 this 的值，如果省略或指定为 null，则使用全局对象 window。</p>","type":"Object","name":"thisObject","isOptional":true}],"description":"<p>检查数组中的所有元素是否都符合某个条件。</p>","returns":[{"type":"boolean","description":"<p>检查结果。</p>"}],"type":"boolean","see":["http://es5.github.com/#x15.4.4.16","https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Array/every"],"examples":["[1, 2, 3].every(function(item) {\r  return item < 5;\r});\r// true"],"isFunction":true,"category":"instance","name":"Array#every"},"navigator.userAgentInfo":{"description":"<p>从 navigator.userAgent 中提取的常用信息。</p><p>注意：navigator.userAgentInfo 下的三个属性是根据 navigator.userAgent 得到的，仅供参考，不建议作为逻辑判断的依据。</p>","type":"Object","isFunction":false,"category":"static","name":"navigator.userAgentInfo"},"ScrollBox#update":{"description":"<p>更新“滚动条”的位置及高度。</p><p>当“滚动框”的尺寸、可见性或其“内容区域”的滚动高度发生变化时，需手动调用本方法对“滚动条”进行校正。</p>","returns":[{"type":"Element","description":"<p>本元素。</p>"}],"type":"Element","isFunction":true,"category":"instance","name":"ScrollBox#update"},"document":{"description":"<p>扩展 document 对象。</p>","isFunction":false,"category":"static","name":"document"},"JSON.parse":{"parameters":[{"description":"<p>要转换的 JSON 格式的字符串。</p>","type":"string","name":"text","isOptional":false},{"description":"<p>用来过滤或更改转换结果的函数。</p><p>该函数将在解析 text 中每一个键值对之后被调用，传入两个参数 key 和 value，并使用其返回值代替 value 作为最终值。如果返回 undefined，则正在处理的这个键值对将被从转换结果中删除。</p><p>该函数最后一次被调用（如果 text 表示的是一个 String、Boolean、Number 类型的值或 null 时则是唯一一次被调用）时，传入的 key 是空字符串，value 是已从 text 转换到 ECMAScript 值的结果。</p><p>该函数被调用时 this 的值为当前传入的 key 和 value 所属的 ECMAScript 对象，可能为 Object 或 Array。</p>","type":"Function","name":"reviver","isOptional":true}],"description":"<p>将 JSON 格式的字符串转换为 ECMAScript 值。</p>","returns":[{"type":"*","description":"<p>转换后的 ECMAScript 值。</p>"}],"type":"*","isFunction":true,"category":"static","name":"JSON.parse"},"Object.keys":{"parameters":[{"description":"<p>要获取键列表的对象。</p>","type":"Object","name":"object","isOptional":false}],"description":"<p>获取对象的键列表。</p>","returns":[{"type":"Array","description":"<p>对象的键列表。</p>"}],"type":"Array","see":["http://es5.github.com/#x15.2.3.14","https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Object/keys","http://whattheheadsaid.com/2010/10/a-safer-object-keys-compatibility-implementation"],"examples":["Object.keys({a: 97, b: 98, c: 99});\r// ['a', 'b', 'c']"],"isFunction":true,"category":"static","name":"Object.keys"},"DOMEvent#target":{"description":"<p>触发事件的对象。</p>","type":"Element","isFunction":false,"category":"instance","name":"DOMEvent#target"},"DOMEvent#timeStamp":{"description":"<p>事件发生的时间。</p>","type":"number","isFunction":false,"category":"instance","name":"DOMEvent#timeStamp"},"cookie.removeItem":{"parameters":[{"description":"<p>数据名。</p>","type":"string","name":"key","isOptional":false},{"description":"<p>可选参数。</p>","type":"Object","name":"options","isOptional":true},{"description":"<p>限定生效的路径，默认为当前路径。</p>","type":"string","name":"options.path","isOptional":true},{"description":"<p>限定生效的域名，默认为当前域名。</p>","type":"string","name":"options.domain","isOptional":true},{"description":"<p>是否仅通过 SSL 连接 (HTTPS) 传输本条数据，默认为否。</p>","type":"boolean","name":"options.secure","isOptional":true}],"description":"<p>从 cookie 中删除一条数据。</p>","isFunction":true,"category":"static","name":"cookie.removeItem"},"Element#smoothScroll":{"parameters":[{"description":"<p>横向滚动坐标，支持相对坐标，如 '+=10' 表示在现有横坐标的基础上向左滚动 10 像素，'-=10' 表示在现有横坐标的基础上向右滚动 10 像素。</p>","type":"number","name":"x","isOptional":false},{"description":"<p>纵向滚动坐标，支持相对坐标，如 '+=10' 表示在现有纵坐标的基础上向下滚动 10 像素，'-=10' 表示在现有纵坐标的基础上向上滚动 10 像素。</p>","type":"number","name":"y","isOptional":false},{"description":"<p>动画选项。</p>","type":"Object","name":"options","isOptional":true},{"description":"<p>播放时间，单位为毫秒，默认为 200。</p>","type":"number","name":"options.duration","isOptional":true},{"description":"<p>控速函数名称或表达式，细节请参考 Animation.prototype.addClip 的同名参数，默认为 'easeInOut'。</p>","type":"string","name":"options.timingFunction","isOptional":true},{"description":"<p>播放开始时的回调。</p><p>该函数被调用时 this 的值为本元素。</p>","type":"Function","name":"options.onStart","isOptional":true},{"description":"<p>播放每一帧之后的回调。</p><p>该函数被调用时 this 的值为本元素。</p>","type":"Function","name":"options.onStep","isOptional":true},{"description":"<p>播放完成时的回调。</p><p>该函数被调用时 this 的值为本元素。</p>","type":"Function","name":"options.onFinish","isOptional":true}],"description":"<p>让本元素播放一个平滑滚动动画。</p><p>如果本元素的动画播放列表中已经存在一个 smoothScroll 动画，则停止旧的，播放新的。</p><p>如果在 HTML 或 BODY 元素上调用本方法，则滚动整个视口。</p>","returns":[{"type":"Element","description":"<p>本元素。</p>"}],"type":"Element","isFunction":true,"category":"instance","name":"Element#smoothScroll"},"Date#toJSON":{"description":"<p>将日期转换为 JSON 格式的字符串。</p>","returns":[{"type":"string","description":"<p>转换后的字符串。</p>"}],"type":"string","isFunction":true,"category":"instance","name":"Date#toJSON"},"DOMEvent":{"parameters":[{"description":"<p>事件类型。</p>","type":"string","name":"type","isOptional":false},{"description":"<p>原生事件对象。</p>","type":"Object","name":"e","isOptional":false},{"description":"<p>附加数据。</p>","type":"Object","name":"data","isOptional":true}],"description":"<p>事件对象。</p><p>如果事件对象是通过调用 Element/document/window 的 fire 方法产生的，其除了 originalEvent、type 和 target 之外的其他属性值均可能会被重写。</p>","isFunction":true,"category":"constructor","name":"DOMEvent"},"DOMEvent#wheelUp":{"description":"<p>事件发生时鼠标滚轮是否正在向上滚动，仅在 mousewheel 类型的事件对象上有效。</p>","type":"boolean","isFunction":false,"category":"instance","name":"DOMEvent#wheelUp"},"Animation":{"description":"<p>动画。</p><p>所有 Animation 的实例也都是一个 JSEventTarget 对象。</p><ul><li>向一个动画中添加多个剪辑，并调整每个剪辑的 delay，duration，timingFunction 参数，以实现复杂的动画。</li><li>仅应在动画初始化时（播放之前）添加动画剪辑，不要在开始播放后添加或更改动画剪辑。</li><li>不要在多个剪辑中变更同一个元素的样式。</li></ul>","fires":[{"description":"<p>成功调用 play 方法后，正向播放开始前触发。</p>","name":"play"},{"description":"<p>正向播放开始前（渲染整个动画的第一帧之前）触发。</p>","name":"playstart"},{"description":"<p>正向播放结束后（渲染整个动画的最后一帧之后）触发。</p>","name":"playfinish"},{"description":"<p>成功调用 reverse 方法后，倒放开始前触发。</p>","name":"reverse"},{"description":"<p>倒放开始前（渲染整个动画的第一帧之前）触发。</p>","name":"reversestart"},{"description":"<p>倒放结束后（渲染整个动画的最后一帧之后）触发。</p>","name":"reversefinish"},{"description":"<p>渲染动画的每一帧之后触发。</p>","name":"step"},{"description":"<p>成功调用 pause 方法后触发。</p>","name":"pause"}],"isFunction":true,"category":"constructor","name":"Animation"},"navigator":{"description":"<p>扩展 navigator 对象，提供更多关于浏览器的信息。</p>","isFunction":false,"category":"static","name":"navigator"},"Array#contains":{"parameters":[{"description":"<p>指定的元素。</p>","type":"*","name":"element","isOptional":false}],"description":"<p>检查本数组中是否包含指定的元素。</p>","returns":[{"type":"boolean","description":"<p>检查结果。</p>"}],"type":"boolean","examples":["[0, 1, 2, 3, 4].contains(2);\r// true"],"isFunction":true,"category":"instance","name":"Array#contains"},"navigator.isIElt8":{"description":"<p>浏览器是否为 IE，且版本小于 8。</p>","type":"boolean","isFunction":false,"category":"static","name":"navigator.isIElt8"},"localStorage.getItem":{"parameters":[{"description":"<p>数据名。</p>","type":"string","name":"key","isOptional":false}],"description":"<p>从 localStorage 中读取一条数据。</p>","returns":[{"type":"string","description":"<p>数据值。</p><p>如果没有对应的值，返回 null。</p>"}],"type":"string","isFunction":true,"category":"static","name":"localStorage.getItem"},"navigator.isIElt9":{"description":"<p>浏览器是否为 IE，且版本小于 9。</p>","type":"boolean","isFunction":false,"category":"static","name":"navigator.isIElt9"},"Slideshow#showPrevious":{"description":"<p>播放上一张“幻灯片”。</p><p>播放完第一张后，将开始播放最后一张。</p>","returns":[{"type":"Element","description":"<p>本元素。</p>"}],"type":"Element","isFunction":true,"category":"instance","name":"Slideshow#showPrevious"},"cookie":{"description":"<p>提供操作 cookie 的常用方法。</p>","isFunction":false,"category":"static","name":"cookie"},"Element#highlight":{"parameters":[{"description":"<p>高亮颜色，默认为 'yellow'。</p>","type":"string","name":"color","isOptional":true},{"description":"<p>高亮样式名，默认为 'backgroundColor'。</p>","type":"string","name":"property","isOptional":true},{"description":"<p>动画选项。</p>","type":"Object","name":"options","isOptional":true},{"description":"<p>播放时间，单位为毫秒，默认为 500。</p>","type":"number","name":"options.duration","isOptional":true},{"description":"<p>控速函数名称或表达式，细节请参考 Animation.prototype.addClip 的同名参数，默认为 'easeIn'。</p>","type":"string","name":"options.timingFunction","isOptional":true},{"description":"<p>播放开始时的回调。</p><p>该函数被调用时 this 的值为本元素。</p>","type":"Function","name":"options.onStart","isOptional":true},{"description":"<p>播放每一帧之后的回调。</p><p>该函数被调用时 this 的值为本元素。</p>","type":"Function","name":"options.onStep","isOptional":true},{"description":"<p>播放完成时的回调。</p><p>该函数被调用时 this 的值为本元素。</p>","type":"Function","name":"options.onFinish","isOptional":true}],"description":"<p>让本元素播放一个高亮动画。</p><p>如果本元素的动画播放列表中已经存在一个 highlight 动画，则停止旧的，播放新的。</p>","returns":[{"type":"Element","description":"<p>本元素。</p>"}],"type":"Element","isFunction":true,"category":"instance","name":"Element#highlight"},"Function#bind":{"parameters":[{"description":"<p>绑定到本函数的 this 的值。</p>","type":"Object","name":"thisObject","isOptional":false},{"description":"<p>绑定到本函数的第一个参数的值。</p>","type":"*","name":"arg1","isOptional":true},{"description":"<p>绑定到本函数的第二个参数的值。</p>","type":"*","name":"arg2","isOptional":true},{"description":"<p>绑定到本函数的第 n 个参数的值。</p>","type":"*","name":"…","isOptional":true}],"description":"<p>生成一个 this 及其参数均被绑定到指定的值的新函数。</p>","returns":[{"type":"Function","description":"<p>绑定后的新函数。</p>"}],"type":"Function","see":["http://es5.github.com/#x15.3.4.5","https://developer.mozilla.org/en/docs/JavaScript/Reference/Global_Objects/Function/bind"],"examples":["var counter = {\r  symbol: '$',\r  count: function(rate, number) {\r    return this.symbol + rate * number;\r  }\r};\rcounter.count(0.157, 1000);\r// $157\rvar simplifiedCount = counter.count.bind({symbol: '￥'}, 6.362);\rsimplifiedCount(500);\r// ￥3181"],"isFunction":true,"category":"instance","name":"Function#bind"},"Number.toInteger":{"parameters":[{"description":"<p>提供的值。</p>","type":"*","name":"value","isOptional":false}],"description":"<p>将提供的值转化为整数。</p>","returns":[{"type":"number","description":"<p>转化结果。</p>"}],"type":"number","see":["http://wiki.ecmascript.org/doku.php?id=harmony:number.tointeger"],"examples":["Number.toInteger([10.75]);\r// 10\rNumber.toInteger('10px');\r// 0"],"isFunction":true,"category":"static","name":"Number.toInteger"},"Element#findAll":{"parameters":[{"description":"<p>选择符。</p>","type":"string","name":"selector","isOptional":false}],"description":"<p>在本元素的后代元素中，根据指定的选择符查找符合条件的所有元素。</p>","returns":[{"type":"Array","description":"<p>包含查找到的元素的数组。</p><p>如果没有找到任何元素，返回空数组。</p>"}],"type":"Array","see":["http://www.w3.org/TR/selectors-api2/","https://github.com/jquery/sizzle/wiki/Sizzle-Home"],"isFunction":true,"category":"instance","name":"Element#findAll"}};