{!
  var classType = "";
  if (data.isBuiltin()) {
    classType += "Built-In ";
  }
  if (data.isNamespace) {
    if (data.is('FUNCTION')) {
      classType += "Function ";
    }
    classType += "Namespace ";
  } else {
    classType += "Class ";
  }
  var classAttribute = '';
  if (data.isPrivate) classAttribute += '<kbd>&lt;private&gt;</kbd>';
  if (data.isInner) classAttribute += '<kbd>&lt;inner&gt;</kbd>';
  var ownProperties = data.properties.filter(function($){return $.memberOf == data.alias && !$.isNamespace});
  var ownMethods = data.methods.filter(function($){return $.memberOf == data.alias  && !$.isNamespace});
!}
<!-- ============================== [{+ data.alias +}] ============================== -->
<h1>{+ data.alias +}</h1>

<!-- ============================== constructor ============================== -->
<if test="!data.isBuiltin() && (data.isNamespace || data.is('CONSTRUCTOR'))">
  <h2>{+ classType +}</h2>
  <fieldset id="{+ data.alias +}" class="constructor">
    <legend>{+ data.alias +}</legend>
    <h3><if test="classAttribute != ''">{+ classAttribute +}</if><dfn>{+ data.alias +}</dfn><if test="classType != 'Namespace '">{+ makeSignature(data.params) +}</if></h3>
    <blockquote>
      {+ data.desc +}
    </blockquote>
    <if test="data.example.length">
      <for each="example" in="data.example">
        <pre>{+ example +}</pre>
      </for>
    </if>
    <if test="data.params.length">
      <dl>
        <dt>Parameters:</dt>
        <dd>
          <table>
            <for each="item" in="data.params">
              <tr>
                <td>{+ ((item.type) ? "<var>{"+ item.type +"}</var>" : "") +}</td>
                <td><dfn>{+ item.name +}</dfn><if test="item.isOptional"><em>Optional</em><if test="item.defaultValue"><strong>Default: {+ item.defaultValue +}</strong></if></if></td>
                <td>{+ item.desc +}</td>
              </tr>
            </for>
          </table>
        </dd>
      </dl>
    </if>
    <if test="data.deprecated">
      <dl>
        <dt>Deprecated:</dt>
        <dd>{+ data.deprecated +}</dd>
      </dl>
    </if>
    <if test="data.since">
      <dl>
        <dt>Since:</dt>
        <dd>{+ data.since +}</dd>
      </dl>
    </if>
    <if test="data.exceptions.length">
      <dl>
        <dt>Throws:</dt>
        <dd>
          <table>
            <for each="item" in="data.exceptions">
              <tr>
                <td>{+ ((item.type) ? "<var>{"+ item.type +"}</var>" : "") +}</td>
                <td><dfn>{+ item.name +}</dfn></td>
                <td>{+ item.desc +}</td>
              </tr>
            </for>
          </table>
        </dd>
      </dl>
    </if>
    <if test="data.returns.length">
      <dl>
        <dt>Returns:</dt>
        <for each="item" in="data.returns">
          <dd>{+ ((item.type) ? "<var>{"+ item.type +"}</var> " : "") +}{+ item.desc +}</dd>
        </for>
      </dl>
    </if>
    <if test="data.requires.length">
      <dl>
        <dt>Requires:</dt>
        <for each="item" in="data.requires">
          <dd>{+ item +}</dd>
        </for>
      </dl>
    </if>
    <if test="data.see.length">
      <dl>
        <dt>See:</dt>
        <for each="item" in="data.see">
          <dd>{+ item +}</dd>
        </for>
      </dl>
    </if>
  </fieldset>
</if>

<!-- ============================== properties ============================== -->
<if test="defined(ownProperties) && ownProperties.length">
  <h2>Properties</h2>
  <for each="member" in="ownProperties">
    {!
      var propertyId = member.alias.replace('#', (member.isStatic ? '.' : '.prototype.'));
      var propertyAttribute = '';
      if (member.isPrivate) propertyAttribute += '<kbd>&lt;private&gt;</kbd>';
      if (member.isInner) propertyAttribute += '<kbd>&lt;inner&gt;</kbd>';
      if (member.isStatic) propertyAttribute += '<kbd>&lt;static&gt;</kbd>';
      if (member.isConstant) propertyAttribute += '<kbd>&lt;constant&gt;</kbd>';
    !}
    <fieldset id="{+ propertyId +}" class="property">
      <legend>{+ propertyId +}</legend>
      <h3><if test="propertyAttribute != ''">{+ propertyAttribute +}</if><if test="member.type"><var>{{+ member.type +}}</var></if><if test="member.isStatic && member.memberOf != '_global_'"><samp>{+ member.memberOf +}</samp>.</if><dfn>{+ member.name +}</dfn></h3>
      <blockquote>
        {+ member.desc +}
      </blockquote>
      <if test="member.example.length">
        <for each="example" in="member.example">
          <pre>{+ example +}</pre>
        </for>
      </if>
      <if test="member.deprecated">
        <dl>
          <dt>Deprecated:</dt>
          <dd>{+ member.deprecated +}</dd>
        </dl>
      </if>
      <if test="member.since">
        <dl>
          <dt>Since:</dt>
          <dd>{+ member.since +}</dd>
        </dl>
      </if>
      <if test="member.see.length">
        <dl>
          <dt>See:</dt>
          <for each="item" in="member.see">
            <dd>{+ item +}</dd>
          </for>
        </dl>
      </if>
      <if test="member.defaultValue">
        <dl>
          <dt>Default Value:</dt>
          <dd>{+ member.defaultValue +}</dd>
        </dl>
      </if>
    </fieldset>
  </for>
</if>

<!-- ============================== methods ============================== -->
<if test="defined(ownMethods) && ownMethods.length">
  <h2>Methods</h2>
  <for each="member" in="ownMethods">
    {!
      var methodId = member.alias.replace('#', (member.isStatic ? '.' : '.prototype.'));
      var methodAttribute = '';
      if (member.isPrivate) methodAttribute += '<kbd>&lt;private&gt;</kbd>';
      if (member.isInner) methodAttribute += '<kbd>&lt;inner&gt;</kbd>';
      if (member.isStatic) methodAttribute += '<kbd>&lt;static&gt;</kbd>';
    !}
    <fieldset id="{+ methodId +}" class="method">
      <legend>{+ methodId +}</legend>
      <h3><if test="methodAttribute != ''">{+ methodAttribute +}</if><if test="member.type"><var>{{+ member.type +}}</var></if><if test="member.isStatic && member.memberOf != '_global_'"><samp>{+ member.memberOf +}</samp>.</if><dfn>{+ member.name.replace(/\^\d+$/, '') +}</dfn>{+ makeSignature(member.params) +}</h3>
      <blockquote>
        {+ member.desc +}
      </blockquote>
      <if test="member.example.length">
        <for each="example" in="member.example">
          <pre>{+ example +}</pre>
        </for>
      </if>
      <if test="member.params.length">
        <dl>
          <dt>Parameters:</dt>
          <dd>
            <table>
              <for each="item" in="member.params">
                <tr>
                  <td>{+ ((item.type) ? "<var>{"+ item.type +"}</var>" : "") +}</td>
                  <td><dfn>{+ item.name +}</dfn><if test="item.isOptional"><em>Optional<if test="item.defaultValue">, Default: {+ item.defaultValue +}</if></em></if></td>
                  <td>{+ item.desc +}</td>
                </tr>
              </for>
            </table>
          </dd>
        </dl>
      </if>
      <if test="member.deprecated">
        <dl>
          <dt>Deprecated:</dt>
          <dd>{+ member.deprecated +}</dd>
        </dl>
      </if>
      <if test="member.since">
        <dl>
          <dt>Since:</dt>
          <dd>{+ member.since +}</dd>
        </dl>
      </if>
      <if test="member.exceptions.length">
        <dl>
          <dt>Throws:</dt>
          <dd>
            <table>
              <for each="item" in="member.exceptions">
                <tr>
                  <td>{+ ((item.type) ? "<var>{"+ item.type +"}</var>" : "") +}</td>
                  <td><dfn>{+ item.name +}</dfn></td>
                  <td>{+ item.desc +}</td>
                </tr>
              </for>
            </table>
          </dd>
        </dl>
      </if>
      <if test="member.returns.length">
        <dl>
          <dt>Returns:</dt>
          <for each="item" in="member.returns">
            <dd>{+ ((item.type) ? "<var>{"+ item.type +"}</var> " : "") +}{+ item.desc +}</dd>
          </for>
        </dl>
      </if>
      <if test="member.requires.length">
        <dl>
          <dt>Requires:</dt>
          <for each="item" in="member.requires">
            <dd>{+ item +}</dd>
          </for>
        </dl>
      </if>
      <if test="member.see.length">
        <dl>
          <dt>See:</dt>
          <for each="item" in="member.see">
            <dd>{+ item +}</dd>
          </for>
        </dl>
      </if>
    </fieldset>
  </for>
</if>
